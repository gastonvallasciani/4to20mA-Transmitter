

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Nov 17 11:37:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1,inline
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,inline
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,inline
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,inline
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,keep,inline
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,keep,inline
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   124                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   125  0000                     
   126                           ; Version 1.41
   127                           ; Generated 25/01/2017 GMT
   128                           ; 
   129                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   130                           ; All rights reserved.
   131                           ; 
   132                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   133                           ; 
   134                           ; Redistribution and use in source and binary forms, with or without modification, are
   135                           ; permitted provided that the following conditions are met:
   136                           ; 
   137                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   138                           ;        conditions and the following disclaimer.
   139                           ; 
   140                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   141                           ;        of conditions and the following disclaimer in the documentation and/or other
   142                           ;        materials provided with the distribution.
   143                           ; 
   144                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   145                           ;        software without specific prior written permission.
   146                           ; 
   147                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   148                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   149                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   150                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   151                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   152                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   153                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   154                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   155                           ; 
   156                           ; 
   157                           ; Code-generator required, PIC18F46K22 Definitions
   158                           ; 
   159                           ; SFR Addresses
   160  0000                     
   161                           	psect	idataCOMRAM
   162  00414E                     __pidataCOMRAM:
   163                           	opt stack 0
   164                           
   165                           ;initializer for _I2C1_targetAddress
   166  00414E  AA                 	db	170
   167                           
   168                           ;initializer for _I2C1_slaveWriteData
   169  00414F  55                 	db	85
   170                           
   171                           	psect	smallconst
   172  001000                     __psmallconst:
   173                           	opt stack 0
   174  001000  00                 	db	0
   175  001001                     _VERSION_HARDWARE:
   176                           	opt stack 0
   177  001001  34                 	db	52
   178  001002  54                 	db	84
   179  001003  4F                 	db	79
   180  001004  32                 	db	50
   181  001005  30                 	db	48
   182  001006  00                 	db	0
   183  001007                     __end_of_VERSION_HARDWARE:
   184                           	opt stack 0
   185  001007                     _VERSION_FIRMWARE:
   186                           	opt stack 0
   187  001007  31                 	db	49
   188  001008  2E                 	db	46
   189  001009  30                 	db	48
   190  00100A  00                 	db	0
   191  00100B                     __end_of_VERSION_FIRMWARE:
   192                           	opt stack 0
   193  00100B                     STR_3:
   194  00100B  50                 	db	80	;'P'
   195  00100C  61                 	db	97	;'a'
   196  00100D  73                 	db	115	;'s'
   197  00100E  6F                 	db	111	;'o'
   198  00100F  73                 	db	115	;'s'
   199  001010  20                 	db	32
   200  001011  6D                 	db	109	;'m'
   201  001012  6F                 	db	111	;'o'
   202  001013  74                 	db	116	;'t'
   203  001014  6F                 	db	111	;'o'
   204  001015  72                 	db	114	;'r'
   205  001016  3A                 	db	58	;':'
   206  001017  20                 	db	32
   207  001018  5F                 	db	95	;'_'
   208  001019  5F                 	db	95	;'_'
   209  00101A  5F                 	db	95	;'_'
   210  00101B  5F                 	db	95	;'_'
   211  00101C  5F                 	db	95	;'_'
   212  00101D  20                 	db	32
   213  00101E  20                 	db	32
   214  00101F  00                 	db	0
   215  001020                     STR_2:
   216  001020  49                 	db	73	;'I'
   217  001021  44                 	db	68	;'D'
   218  001022  3A                 	db	58	;':'
   219  001023  20                 	db	32
   220  001024  5F                 	db	95	;'_'
   221  001025  5F                 	db	95	;'_'
   222  001026  20                 	db	32
   223  001027  50                 	db	80	;'P'
   224  001028  6F                 	db	111	;'o'
   225  001029  73                 	db	115	;'s'
   226  00102A  69                 	db	105	;'i'
   227  00102B  63                 	db	99	;'c'
   228  00102C  69                 	db	105	;'i'
   229  00102D  6F                 	db	111	;'o'
   230  00102E  6E                 	db	110	;'n'
   231  00102F  3A                 	db	58	;':'
   232  001030  20                 	db	32
   233  001031  5F                 	db	95	;'_'
   234  001032  5F                 	db	95	;'_'
   235  001033  20                 	db	32
   236  001034  00                 	db	0
   237  001035                     STR_4:
   238  001035  53                 	db	83	;'S'
   239  001036  45                 	db	69	;'E'
   240  001037  4E                 	db	78	;'N'
   241  001038  20                 	db	32
   242  001039  41                 	db	65	;'A'
   243  00103A  3A                 	db	58	;':'
   244  00103B  20                 	db	32
   245  00103C  5F                 	db	95	;'_'
   246  00103D  5F                 	db	95	;'_'
   247  00103E  5F                 	db	95	;'_'
   248  00103F  5F                 	db	95	;'_'
   249  001040  20                 	db	32
   250  001041  42                 	db	66	;'B'
   251  001042  3A                 	db	58	;':'
   252  001043  20                 	db	32
   253  001044  5F                 	db	95	;'_'
   254  001045  5F                 	db	95	;'_'
   255  001046  5F                 	db	95	;'_'
   256  001047  5F                 	db	95	;'_'
   257  001048  20                 	db	32
   258  001049  00                 	db	0
   259  00104A                     STR_1:
   260  00104A  46                 	db	70	;'F'
   261  00104B  57                 	db	87	;'W'
   262  00104C  3A                 	db	58	;':'
   263  00104D  20                 	db	32
   264  00104E  42                 	db	66	;'B'
   265  00104F  46                 	db	70	;'F'
   266  001050  5F                 	db	95	;'_'
   267  001051  5F                 	db	95	;'_'
   268  001052  5F                 	db	95	;'_'
   269  001053  5F                 	db	95	;'_'
   270  001054  20                 	db	32
   271  001055  48                 	db	72	;'H'
   272  001056  57                 	db	87	;'W'
   273  001057  3A                 	db	58	;':'
   274  001058  20                 	db	32
   275  001059  5F                 	db	95	;'_'
   276  00105A  5F                 	db	95	;'_'
   277  00105B  5F                 	db	95	;'_'
   278  00105C  5F                 	db	95	;'_'
   279  00105D  20                 	db	32
   280  00105E  00                 	db	0
   281                           
   282                           ; #config settings
   283  00105F  00                 	db	0	; dummy byte at the end
   284  0000                     
   285                           	psect	nvBANK0
   286  0000FA                     __pnvBANK0:
   287                           	opt stack 0
   288  0000FA                     _TMR4_InterruptHandler:
   289                           	opt stack 0
   290  0000FA                     	ds	2
   291  0000FC                     _TMR2_InterruptHandler:
   292                           	opt stack 0
   293  0000FC                     	ds	2
   294  0000FE                     _I2C_Address:
   295                           	opt stack 0
   296  0000FE                     	ds	1
   297  0000FF                     _eusart1TxBufferRemaining:
   298                           	opt stack 0
   299  0000FF                     	ds	1
   300  0000                     _CCPTMRS1bits	set	3912
   301  0000                     _CCPR4H	set	3929
   302  0000                     _CCPR4L	set	3928
   303  0000                     _CCP4CON	set	3927
   304  0000                     _CCPR3H	set	3935
   305  0000                     _CCPR3L	set	3934
   306  0000                     _PSTR3CON	set	3930
   307  0000                     _PWM3CON	set	3932
   308  0000                     _ECCP3AS	set	3931
   309  0000                     _CCP3CON	set	3933
   310  0000                     _CCPR5H	set	3926
   311  0000                     _CCPR5L	set	3925
   312  0000                     _CCP5CON	set	3924
   313  0000                     _CCPTMRS0bits	set	3913
   314  0000                     _T6CONbits	set	3914
   315  0000                     _TMR6	set	3916
   316  0000                     _PR6	set	3915
   317  0000                     _T6CON	set	3914
   318  0000                     _T4CONbits	set	3921
   319  0000                     _TMR4	set	3923
   320  0000                     _PR4	set	3922
   321  0000                     _T4CON	set	3921
   322  0000                     _ANSELD	set	3899
   323  0000                     _ANSELC	set	3898
   324  0000                     _ANSELB	set	3897
   325  0000                     _ANSELA	set	3896
   326  0000                     _ANSELE	set	3900
   327  0000                     _PORTBbits	set	3969
   328  0000                     _CCPR2H	set	3944
   329  0000                     _CCPR2L	set	3943
   330  0000                     _PSTR2CON	set	3939
   331  0000                     _PWM2CON	set	3941
   332  0000                     _ECCP2AS	set	3940
   333  0000                     _CCP2CON	set	3942
   334  0000                     _CCPR1H	set	4031
   335  0000                     _CCPR1L	set	4030
   336  0000                     _PSTR1CON	set	4025
   337  0000                     _PWM1CON	set	4023
   338  0000                     _ECCP1AS	set	4022
   339  0000                     _CCP1CON	set	4029
   340  0000                     _SSP1CON1bits	set	4038
   341  0000                     _SSP1STATbits	set	4039
   342  0000                     _SSP1BUF	set	4041
   343  0000                     _SSP1ADD	set	4040
   344  0000                     _SSP1MSK	set	4042
   345  0000                     _SSP1CON3	set	4043
   346  0000                     _SSP1CON2bits	set	4037
   347  0000                     _SSP1CON2	set	4037
   348  0000                     _SSP1CON1	set	4038
   349  0000                     _SSP1STAT	set	4039
   350  0000                     _RCREG1	set	4014
   351  0000                     _TXREG1	set	4013
   352  0000                     _RCSTA1bits	set	4011
   353  0000                     _SPBRGH1	set	4016
   354  0000                     _SPBRG1	set	4015
   355  0000                     _TXSTA1	set	4012
   356  0000                     _RCSTA1	set	4011
   357  0000                     _BAUDCON1	set	4024
   358  0000                     _OSCTUNE	set	3995
   359  0000                     _OSCCON2	set	4050
   360  0000                     _OSCCON	set	4051
   361  0000                     _PIR5bits	set	3966
   362  0000                     _PIE5bits	set	3965
   363  0000                     _IPR5bits	set	3967
   364  0000                     _IPR1bits	set	3999
   365  0000                     _ADCON0bits	set	4034
   366  0000                     _ADRESH	set	4036
   367  0000                     _ADRESL	set	4035
   368  0000                     _ADCON2	set	4032
   369  0000                     _ADCON1	set	4033
   370  0000                     _ADCON0	set	4034
   371  0000                     _INTCON2bits	set	4081
   372  0000                     _TRISA	set	3986
   373  0000                     _TRISC	set	3988
   374  0000                     _TRISB	set	3987
   375  0000                     _TRISE	set	3990
   376  0000                     _TRISD	set	3989
   377  0000                     _WPUB	set	3937
   378  0000                     _LATC	set	3979
   379  0000                     _LATD	set	3980
   380  0000                     _LATE	set	3981
   381  0000                     _LATA	set	3977
   382  0000                     _LATB	set	3978
   383  0000                     _T2CONbits	set	4026
   384  0000                     _PIE1bits	set	3997
   385  0000                     _PIR1bits	set	3998
   386  0000                     _TMR2	set	4028
   387  0000                     _PR2	set	4027
   388  0000                     _T2CON	set	4026
   389  0000                     _PIR2bits	set	4001
   390  0000                     _EEDATA	set	4008
   391  0000                     _EEADR	set	4009
   392  0000                     _EEADRH	set	4010
   393  0000                     _EECON2	set	4007
   394  0000                     _EECON1bits	set	4006
   395  0000                     _INTCONbits	set	4082
   396  0000                     _TABLAT	set	4085
   397  0000                     _TBLPTRL	set	4086
   398  0000                     _TBLPTRH	set	4087
   399  0000                     _TBLPTRU	set	4088
   400  0000                     _LATD0	set	31840
   401  0000                     _LATD1	set	31841
   402  0000                     _LATD2	set	31842
   403  0000                     _LATD3	set	31843
   404  0000                     _LATA5	set	31821
   405  0000                     _LATE1	set	31849
   406  0000                     _LATE0	set	31848
   407  0000                     _LATD7	set	31847
   408  0000                     _LATA0	set	31816
   409  0000                     _LATC5	set	31837
   410  0000                     _LATD4	set	31844
   411  0000                     _IPEN	set	32391
   412                           
   413                           	psect	cinit
   414  003590                     __pcinit:
   415                           	opt stack 0
   416  003590                     start_initialization:
   417                           	opt stack 0
   418  003590                     __initialization:
   419                           	opt stack 0
   420                           
   421                           ; Initialize objects allocated to COMRAM (2 bytes)
   422                           ; load TBLPTR registers with __pidataCOMRAM
   423  003590  0E4E               	movlw	low __pidataCOMRAM
   424  003592  6EF6               	movwf	tblptrl,c
   425  003594  0E41               	movlw	high __pidataCOMRAM
   426  003596  6EF7               	movwf	tblptrh,c
   427  003598  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   428  00359A  6EF8               	movwf	tblptru,c
   429  00359C  0009               	tblrd		*+	;fetch initializer
   430  00359E  CFF5 F04D          	movff	tablat,__pdataCOMRAM
   431  0035A2  0009               	tblrd		*+	;fetch initializer
   432  0035A4  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
   433                           
   434                           ; Clear objects allocated to BANK5 (160 bytes)
   435  0035A8  EE05  F000         	lfsr	0,__pbssBANK5
   436  0035AC  0EA0               	movlw	160
   437  0035AE                     clear_0:
   438  0035AE  6AEE               	clrf	postinc0,c
   439  0035B0  06E8               	decf	wreg,f,c
   440  0035B2  E1FD               	bnz	clear_0
   441                           
   442                           ; Clear objects allocated to BANK4 (160 bytes)
   443  0035B4  EE04  F000         	lfsr	0,__pbssBANK4
   444  0035B8  0EA0               	movlw	160
   445  0035BA                     clear_1:
   446  0035BA  6AEE               	clrf	postinc0,c
   447  0035BC  06E8               	decf	wreg,f,c
   448  0035BE  E1FD               	bnz	clear_1
   449                           
   450                           ; Clear objects allocated to BANK3 (130 bytes)
   451  0035C0  EE03  F000         	lfsr	0,__pbssBANK3
   452  0035C4  0E82               	movlw	130
   453  0035C6                     clear_2:
   454  0035C6  6AEE               	clrf	postinc0,c
   455  0035C8  06E8               	decf	wreg,f,c
   456  0035CA  E1FD               	bnz	clear_2
   457                           
   458                           ; Clear objects allocated to BANK2 (194 bytes)
   459  0035CC  EE02  F000         	lfsr	0,__pbssBANK2
   460  0035D0  0EC2               	movlw	194
   461  0035D2                     clear_3:
   462  0035D2  6AEE               	clrf	postinc0,c
   463  0035D4  06E8               	decf	wreg,f,c
   464  0035D6  E1FD               	bnz	clear_3
   465                           
   466                           ; Clear objects allocated to BANK1 (225 bytes)
   467  0035D8  EE01  F000         	lfsr	0,__pbssBANK1
   468  0035DC  0EE1               	movlw	225
   469  0035DE                     clear_4:
   470  0035DE  6AEE               	clrf	postinc0,c
   471  0035E0  06E8               	decf	wreg,f,c
   472  0035E2  E1FD               	bnz	clear_4
   473                           
   474                           ; Clear objects allocated to BANK0 (122 bytes)
   475  0035E4  EE00  F060         	lfsr	0,__pbssBANK0
   476  0035E8  0E7A               	movlw	122
   477  0035EA                     clear_5:
   478  0035EA  6AEE               	clrf	postinc0,c
   479  0035EC  06E8               	decf	wreg,f,c
   480  0035EE  E1FD               	bnz	clear_5
   481                           
   482                           ; Clear objects allocated to COMRAM (14 bytes)
   483  0035F0  EE00  F03F         	lfsr	0,__pbssCOMRAM
   484  0035F4  0E0E               	movlw	14
   485  0035F6                     clear_6:
   486  0035F6  6AEE               	clrf	postinc0,c
   487  0035F8  06E8               	decf	wreg,f,c
   488  0035FA  E1FD               	bnz	clear_6
   489  0035FC                     end_of_initialization:
   490                           	opt stack 0
   491  0035FC                     __end_of__initialization:
   492                           	opt stack 0
   493  0035FC  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   494  0035FE  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   495  003600  0100               	movlb	0
   496  003602  EF0C  F020         	goto	_main	;jump to C main() function
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           
   504                           	psect	bssCOMRAM
   505  00003F                     __pbssCOMRAM:
   506                           	opt stack 0
   507  00003F                     _i2c_index:
   508                           	opt stack 0
   509  00003F                     	ds	2
   510  000041                     _I2C_QueueOutPointer:
   511                           	opt stack 0
   512  000041                     	ds	1
   513  000042                     _I2C_QueueInPointer:
   514                           	opt stack 0
   515  000042                     	ds	1
   516  000043                     _uart_data_pending:
   517                           	opt stack 0
   518  000043                     	ds	1
   519  000044                     _UART_QueueOutPointer:
   520                           	opt stack 0
   521  000044                     	ds	1
   522  000045                     _UART_QueueInPointer:
   523                           	opt stack 0
   524  000045                     	ds	1
   525  000046                     _MotorTimerTicked:
   526                           	opt stack 0
   527  000046                     	ds	1
   528  000047                     _messageForMe:
   529                           	opt stack 0
   530  000047                     	ds	1
   531  000048                     _eusart1RxCount:
   532                           	opt stack 0
   533  000048                     	ds	1
   534  000049                     _eusart1RxTail:
   535                           	opt stack 0
   536  000049                     	ds	1
   537  00004A                     _eusart1RxHead:
   538                           	opt stack 0
   539  00004A                     	ds	1
   540  00004B                     _eusart1TxTail:
   541                           	opt stack 0
   542  00004B                     	ds	1
   543  00004C                     _eusart1TxHead:
   544                           	opt stack 0
   545  00004C                     	ds	1
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553                           	psect	dataCOMRAM
   554  00004D                     __pdataCOMRAM:
   555                           	opt stack 0
   556  00004D                     _I2C1_targetAddress:
   557                           	opt stack 0
   558  00004D                     	ds	1
   559  00004E                     _I2C1_slaveWriteData:
   560                           	opt stack 0
   561  00004E                     	ds	1
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           
   569                           	psect	bssBANK0
   570  000060                     __pbssBANK0:
   571                           	opt stack 0
   572  000060                     _eusart1TxBuffer:
   573                           	opt stack 0
   574  000060                     	ds	64
   575  0000A0                     _i2c_Paquete:
   576                           	opt stack 0
   577  0000A0                     	ds	15
   578  0000AF                     _uart_Paquete:
   579                           	opt stack 0
   580  0000AF                     	ds	15
   581  0000BE                     _errno:
   582                           	opt stack 0
   583  0000BE                     	ds	2
   584  0000C0                     _uart_index:
   585                           	opt stack 0
   586  0000C0                     	ds	2
   587  0000C2                     Timer4Tick@led_toggle_counter:
   588                           	opt stack 0
   589  0000C2                     	ds	2
   590  0000C4                     _I2CMsgTimeout:
   591                           	opt stack 0
   592  0000C4                     	ds	2
   593  0000C6                     _DividerTaskCounter:
   594                           	opt stack 0
   595  0000C6                     	ds	2
   596  0000C8                     _i2c_data_pending:
   597                           	opt stack 0
   598  0000C8                     	ds	1
   599  0000C9                     _DelayTimerTicked:
   600                           	opt stack 0
   601  0000C9                     	ds	1
   602  0000CA                     Send_Status@msg:
   603                           	opt stack 0
   604  0000CA                     	ds	16
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           
   612                           	psect	bssBANK1
   613  000100                     __pbssBANK1:
   614                           	opt stack 0
   615  000100                     _Me:
   616                           	opt stack 0
   617  000100                     	ds	225
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           
   625                           	psect	bssBANK2
   626  000200                     __pbssBANK2:
   627                           	opt stack 0
   628  000200                     _I2C_Input:
   629                           	opt stack 0
   630  000200                     	ds	130
   631  000282                     _eusart1RxBuffer:
   632                           	opt stack 0
   633  000282                     	ds	64
   634                           tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           
   641                           	psect	bssBANK3
   642  000300                     __pbssBANK3:
   643                           	opt stack 0
   644  000300                     _I2C_Output:
   645                           	opt stack 0
   646  000300                     	ds	130
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           
   654                           	psect	bssBANK4
   655  000400                     __pbssBANK4:
   656                           	opt stack 0
   657  000400                     _UARTQueue:
   658                           	opt stack 0
   659  000400                     	ds	160
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           wreg	equ	0xFE8
   666                           
   667                           	psect	bssBANK5
   668  000500                     __pbssBANK5:
   669                           	opt stack 0
   670  000500                     _I2CQueue:
   671                           	opt stack 0
   672  000500                     	ds	160
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           
   680                           	psect	cstackBANK1
   681  0001E1                     __pcstackBANK1:
   682                           	opt stack 0
   683  0001E1                     Process4TO20Transmitter@result:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x0
   687  0001E1                     	ds	1
   688  0001E2                     _Process4TO20Transmitter$6380:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x1
   692  0001E2                     	ds	3
   693  0001E5                     Process4TO20Transmitter@Data_Received:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0x4
   697  0001E5                     	ds	2
   698  0001E7                     Process4TO20Transmitter@PWM_Duty:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x6
   702  0001E7                     	ds	2
   703  0001E9                     Process4TO20Transmitter@Online_data:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x8
   707  0001E9                     	ds	3
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           
   715                           	psect	cstackBANK0
   716  0000DA                     __pcstackBANK0:
   717                           	opt stack 0
   718  0000DA                     ?___ftneg:
   719                           	opt stack 0
   720  0000DA                     LCD_WriteInt@number:
   721                           	opt stack 0
   722  0000DA                     ___ftneg@f1:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x0
   726  0000DA                     	ds	2
   727  0000DC                     LCD_WriteInt@digitos:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x2
   731  0000DC                     	ds	1
   732  0000DD                     ?___ftadd:
   733                           	opt stack 0
   734  0000DD                     LCD_WriteInt@linea:
   735                           	opt stack 0
   736  0000DD                     ___ftadd@f1:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x3
   740  0000DD                     	ds	1
   741  0000DE                     LCD_WriteInt@offset:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x4
   745  0000DE                     	ds	1
   746  0000DF                     LCD_WriteInt@decmiles:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x5
   750  0000DF                     	ds	1
   751  0000E0                     ___ftadd@f2:
   752                           	opt stack 0
   753  0000E0                     LCD_WriteInt@string:
   754                           	opt stack 0
   755                           
   756                           ; 6 bytes @ 0x6
   757  0000E0                     	ds	3
   758  0000E3                     ??___ftadd:
   759                           
   760                           ; 1 bytes @ 0x9
   761  0000E3                     	ds	3
   762  0000E6                     LCD_WriteInt@miles:
   763                           	opt stack 0
   764  0000E6                     ___ftadd@sign:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0xC
   768  0000E6                     	ds	1
   769  0000E7                     LCD_WriteInt@centenas:
   770                           	opt stack 0
   771  0000E7                     ___ftadd@exp2:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0xD
   775  0000E7                     	ds	1
   776  0000E8                     LCD_WriteInt@decenas:
   777                           	opt stack 0
   778  0000E8                     ___ftadd@exp1:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xE
   782  0000E8                     	ds	1
   783  0000E9                     ?_round:
   784                           	opt stack 0
   785  0000E9                     LCD_WriteInt@unidades:
   786                           	opt stack 0
   787  0000E9                     round@x:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0xF
   791  0000E9                     	ds	1
   792  0000EA                     LCD_WriteInt@i:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x10
   796  0000EA                     	ds	1
   797  0000EB                     ProcessDevice@msg:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x11
   801  0000EB                     	ds	1
   802  0000EC                     round@f:
   803                           	opt stack 0
   804                           
   805                           ; 3 bytes @ 0x12
   806  0000EC                     	ds	1
   807  0000ED                     ??_ProcessDevice:
   808                           
   809                           ; 1 bytes @ 0x13
   810  0000ED                     	ds	2
   811  0000EF                     EPWM1_LoadDutyValue@dutyValue:
   812                           	opt stack 0
   813  0000EF                     EPWM3_LoadDutyValue@dutyValue:
   814                           	opt stack 0
   815  0000EF                     PWM4_LoadDutyValue@dutyValue:
   816                           	opt stack 0
   817  0000EF                     PWM5_LoadDutyValue@dutyValue:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x15
   821  0000EF                     	ds	2
   822  0000F1                     Process4TO20Transmitter@msg:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x17
   826  0000F1                     	ds	2
   827  0000F3                     ??_Process4TO20Transmitter:
   828  0000F3                     ProcessDevice@Result:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x19
   832  0000F3                     	ds	1
   833  0000F4                     ProcessDevice@k:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x1A
   837  0000F4                     	ds	3
   838  0000F7                     I2C_ProcessPacket@msg:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x1D
   842  0000F7                     	ds	2
   843  0000F9                     I2C_ProcessPacket@result:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x1F
   847  0000F9                     	ds	1
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           tblptrl	equ	0xFF6
   851                           tablat	equ	0xFF5
   852                           postinc0	equ	0xFEE
   853                           wreg	equ	0xFE8
   854                           
   855                           	psect	cstackCOMRAM
   856  000001                     __pcstackCOMRAM:
   857                           	opt stack 0
   858  000001                     I2C1_StatusCallback@i2c_bus_state:
   859                           	opt stack 0
   860                           
   861                           ; 1 bytes @ 0x0
   862  000001                     	ds	1
   863  000002                     I2C1_ISR@i2c_data:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x1
   867  000002                     	ds	1
   868  000003                     ??_INTERRUPT_InterruptManager:
   869                           
   870                           ; 1 bytes @ 0x2
   871  000003                     	ds	14
   872  000011                     ?___awmod:
   873                           	opt stack 0
   874  000011                     ?___ftpack:
   875                           	opt stack 0
   876  000011                     EUSART1_Write@txData:
   877                           	opt stack 0
   878  000011                     i2c_getch@character:
   879                           	opt stack 0
   880  000011                     i2c_putch@character:
   881                           	opt stack 0
   882  000011                     DATAEE_WriteByte@bAdd:
   883                           	opt stack 0
   884  000011                     DATAEE_ReadByte@bAdd:
   885                           	opt stack 0
   886  000011                     TMR2_SetInterruptHandler@InterruptHandler:
   887                           	opt stack 0
   888  000011                     TMR4_SetInterruptHandler@InterruptHandler:
   889                           	opt stack 0
   890  000011                     Delay@Timeout:
   891                           	opt stack 0
   892  000011                     UART_Checksum@msg:
   893                           	opt stack 0
   894  000011                     I2C_FillPacket@msg:
   895                           	opt stack 0
   896  000011                     ___awmod@dividend:
   897                           	opt stack 0
   898  000011                     ___ftpack@arg:
   899                           	opt stack 0
   900  000011                     ___ftge@ff1:
   901                           	opt stack 0
   902  000011                     frexp@value:
   903                           	opt stack 0
   904                           
   905                           ; 3 bytes @ 0x10
   906  000011                     	ds	1
   907  000012                     putch@txData:
   908                           	opt stack 0
   909  000012                     I2C_Send@msg:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x11
   913  000012                     	ds	1
   914  000013                     ??_I2C_FillPacket:
   915  000013                     DATAEE_WriteByte@bData:
   916                           	opt stack 0
   917  000013                     lcd_write_4@theByte:
   918                           	opt stack 0
   919  000013                     UART_Checksum@msg_size:
   920                           	opt stack 0
   921  000013                     ___awmod@divisor:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0x12
   925  000013                     	ds	1
   926  000014                     ??_I2C_Send:
   927  000014                     ??_UART_Checksum:
   928  000014                     DATAEE_WriteByte@GIEBitValue:
   929                           	opt stack 0
   930  000014                     lcd_write_character_4d@theData:
   931                           	opt stack 0
   932  000014                     lcd_write_instruction_4d@theInstruction:
   933                           	opt stack 0
   934  000014                     ___ftpack@exp:
   935                           	opt stack 0
   936  000014                     frexp@eptr:
   937                           	opt stack 0
   938  000014                     ___ftge@ff2:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x13
   942  000014                     	ds	1
   943  000015                     SaveClass@class:
   944                           	opt stack 0
   945  000015                     SaveID@id:
   946                           	opt stack 0
   947  000015                     LCD_WriteChar@linea:
   948                           	opt stack 0
   949  000015                     ___awmod@counter:
   950                           	opt stack 0
   951  000015                     ___ftpack@sign:
   952                           	opt stack 0
   953  000015                     lcd_write_string_4d@theString:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x14
   957  000015                     	ds	1
   958  000016                     ??___ftpack:
   959  000016                     ??_frexp:
   960  000016                     LCD_WriteChar@offset:
   961                           	opt stack 0
   962  000016                     ___awmod@sign:
   963                           	opt stack 0
   964  000016                     I2C_FillPacket@j:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x15
   968  000016                     	ds	1
   969  000017                     ??_lcd_write_string_4d:
   970  000017                     ??___ftge:
   971  000017                     LCD_WriteChar@character:
   972                           	opt stack 0
   973  000017                     I2C_Send@i:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x16
   977  000017                     	ds	1
   978  000018                     LCD_WriteChar@dlinea:
   979                           	opt stack 0
   980  000018                     UART_Send@msg:
   981                           	opt stack 0
   982  000018                     I2C_FillPacket@i:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x17
   986  000018                     	ds	1
   987  000019                     ?___ftmul:
   988                           	opt stack 0
   989  000019                     ?___lwtoft:
   990                           	opt stack 0
   991  000019                     lcd_write_string_4d@i:
   992                           	opt stack 0
   993  000019                     ___lwtoft@c:
   994                           	opt stack 0
   995  000019                     ___ftmul@f1:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x18
   999  000019                     	ds	1
  1000  00001A                     ??_I2C_GetNewMessages:
  1001  00001A                     ??_UART_Send:
  1002                           
  1003                           ; 1 bytes @ 0x19
  1004  00001A                     	ds	1
  1005  00001B                     LCD_Write@string:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x1A
  1009  00001B                     	ds	1
  1010  00001C                     ?___fttol:
  1011                           	opt stack 0
  1012  00001C                     ___ftmul@f2:
  1013                           	opt stack 0
  1014  00001C                     ___fttol@f1:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x1B
  1018  00001C                     	ds	1
  1019  00001D                     LCD_Write@linea:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x1C
  1023  00001D                     	ds	1
  1024  00001E                     LCD_Write@offset:
  1025                           	opt stack 0
  1026  00001E                     UART_Send@packet:
  1027                           	opt stack 0
  1028                           
  1029                           ; 15 bytes @ 0x1D
  1030  00001E                     	ds	1
  1031  00001F                     ??___ftmul:
  1032  00001F                     LCD_Write@dlinea:
  1033                           	opt stack 0
  1034  00001F                     I2C_GetNewMessages@msg:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x1E
  1038  00001F                     	ds	1
  1039  000020                     ??___fttol:
  1040                           
  1041                           ; 1 bytes @ 0x1F
  1042  000020                     	ds	1
  1043  000021                     I2C_GetNewMessages@i2c_lastCharRead:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x20
  1047  000021                     	ds	1
  1048  000022                     ___ftmul@exp:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x21
  1052  000022                     	ds	1
  1053  000023                     ___ftmul@f3_as_product:
  1054                           	opt stack 0
  1055                           
  1056                           ; 3 bytes @ 0x22
  1057  000023                     	ds	2
  1058  000025                     ___fttol@sign1:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x24
  1062  000025                     	ds	1
  1063  000026                     ___ftmul@cntr:
  1064                           	opt stack 0
  1065  000026                     ___fttol@lval:
  1066                           	opt stack 0
  1067                           
  1068                           ; 4 bytes @ 0x25
  1069  000026                     	ds	1
  1070  000027                     ___ftmul@sign:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x26
  1074  000027                     	ds	1
  1075  000028                     ?___ftdiv:
  1076                           	opt stack 0
  1077  000028                     ___ftdiv@f1:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x27
  1081  000028                     	ds	2
  1082  00002A                     ___fttol@exp1:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x29
  1086  00002A                     	ds	1
  1087  00002B                     ?___wmul:
  1088                           	opt stack 0
  1089  00002B                     ?___altoft:
  1090                           	opt stack 0
  1091  00002B                     ___wmul@multiplier:
  1092                           	opt stack 0
  1093  00002B                     ___ftdiv@f2:
  1094                           	opt stack 0
  1095  00002B                     ___altoft@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x2A
  1099  00002B                     	ds	2
  1100  00002D                     UART_Send@msg_size:
  1101                           	opt stack 0
  1102  00002D                     ___wmul@multiplicand:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2C
  1106  00002D                     	ds	1
  1107  00002E                     ??___ftdiv:
  1108  00002E                     UART_Send@i:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x2D
  1112  00002E                     	ds	1
  1113  00002F                     ??___altoft:
  1114  00002F                     ___wmul@product:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x2E
  1118  00002F                     	ds	1
  1119  000030                     Send@msg:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x2F
  1123  000030                     	ds	1
  1124  000031                     ?___lwdiv:
  1125                           	opt stack 0
  1126  000031                     ___ftdiv@cntr:
  1127                           	opt stack 0
  1128  000031                     ___lwdiv@dividend:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x30
  1132  000031                     	ds	1
  1133  000032                     Send_ACK@msg:
  1134                           	opt stack 0
  1135  000032                     Send_NAK@msg:
  1136                           	opt stack 0
  1137  000032                     Send_Firmware@msg:
  1138                           	opt stack 0
  1139  000032                     Send_Hardware@msg:
  1140                           	opt stack 0
  1141  000032                     ___ftdiv@f3:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x31
  1145  000032                     	ds	1
  1146  000033                     ___altoft@exp:
  1147                           	opt stack 0
  1148  000033                     ___lwdiv@divisor:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x32
  1152  000033                     	ds	1
  1153  000034                     ??_Send_Firmware:
  1154  000034                     ??_Send_Hardware:
  1155  000034                     Send_NAK@errCode:
  1156                           	opt stack 0
  1157  000034                     ___altoft@sign:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x33
  1161  000034                     	ds	1
  1162  000035                     ?_trunc:
  1163                           	opt stack 0
  1164  000035                     ___ftdiv@exp:
  1165                           	opt stack 0
  1166  000035                     ___lwdiv@counter:
  1167                           	opt stack 0
  1168  000035                     ProcessPaPReferencia@msg:
  1169                           	opt stack 0
  1170  000035                     ProcessCompuerta@msg:
  1171                           	opt stack 0
  1172  000035                     ProcessSensores@msg:
  1173                           	opt stack 0
  1174  000035                     ProcessBotones@msg:
  1175                           	opt stack 0
  1176  000035                     ProcessForward@msg:
  1177                           	opt stack 0
  1178  000035                     trunc@x:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x34
  1182  000035                     	ds	1
  1183  000036                     ___ftdiv@sign:
  1184                           	opt stack 0
  1185  000036                     Send_Firmware@i:
  1186                           	opt stack 0
  1187  000036                     Send_Hardware@i:
  1188                           	opt stack 0
  1189  000036                     ___lwdiv@quotient:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x35
  1193  000036                     	ds	1
  1194  000037                     ProcessPaPReferencia@result:
  1195                           	opt stack 0
  1196  000037                     ProcessCompuerta@result:
  1197                           	opt stack 0
  1198  000037                     ProcessSensores@result:
  1199                           	opt stack 0
  1200  000037                     ProcessBotones@result:
  1201                           	opt stack 0
  1202  000037                     ProcessForward@result:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x36
  1206  000037                     	ds	1
  1207  000038                     ?___lwmod:
  1208                           	opt stack 0
  1209  000038                     ___lwmod@dividend:
  1210                           	opt stack 0
  1211  000038                     trunc@i:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x37
  1215  000038                     	ds	2
  1216  00003A                     ___lwmod@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x39
  1220  00003A                     	ds	1
  1221  00003B                     trunc@expon:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x3A
  1225  00003B                     	ds	1
  1226  00003C                     ___lwmod@counter:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x3B
  1230  00003C                     	ds	1
  1231  00003D                     ??_LCD_WriteInt:
  1232  00003D                     ??_EPWM1_LoadDutyValue:
  1233  00003D                     ??_EPWM3_LoadDutyValue:
  1234  00003D                     ??_PWM4_LoadDutyValue:
  1235  00003D                     ??_PWM5_LoadDutyValue:
  1236  00003D                     
  1237                           ; 1 bytes @ 0x3C
  1238  00003D                     	ds	2
  1239  00003F                     tblptru	equ	0xFF8
  1240                           tblptrh	equ	0xFF7
  1241                           tblptrl	equ	0xFF6
  1242                           tablat	equ	0xFF5
  1243                           postinc0	equ	0xFEE
  1244                           wreg	equ	0xFE8
  1245                           
  1246                           ; 1 bytes @ 0x3E
  1247 ;;
  1248 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1249 ;;
  1250 ;; *************** function _main *****************
  1251 ;; Defined at:
  1252 ;;		line 21 in file "main.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;		None
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;		None
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1270 ;;Total ram usage:        0 bytes
  1271 ;; Hardware stack levels required when called:   14
  1272 ;; This function calls:
  1273 ;;		_I2C_GetNewMessages
  1274 ;;		_I2C_ProcessMessages
  1275 ;;		_InitTasks
  1276 ;;		_MainTask
  1277 ;;		_SYSTEM_Initialize
  1278 ;; This function is called by:
  1279 ;;		Startup code after reset
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text0
  1284  004018                     __ptext0:
  1285                           	opt stack 0
  1286  004018                     _main:
  1287                           	opt stack 17
  1288                           
  1289                           ;main.c: 36: SYSTEM_Initialize();
  1290                           
  1291                           ;incstack = 0
  1292  004018  EC91  F01D         	call	_SYSTEM_Initialize	;wreg free
  1293                           
  1294                           ;main.c: 37: InitTasks();
  1295  00401C  ECAC  F01B         	call	_InitTasks	;wreg free
  1296  004020                     l7482:
  1297                           
  1298                           ;main.c: 45: {
  1299                           ;main.c: 46: I2C_GetNewMessages();
  1300  004020  EC1E  F013         	call	_I2C_GetNewMessages	;wreg free
  1301                           
  1302                           ;main.c: 47: I2C_ProcessMessages();
  1303  004024  ECCB  F01C         	call	_I2C_ProcessMessages	;wreg free
  1304                           
  1305                           ;main.c: 53: MainTask();
  1306  004028  ECA8  F020         	call	_MainTask	;wreg free
  1307  00402C  D7F9               	goto	l7482
  1308  00402E                     __end_of_main:
  1309                           	opt stack 0
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           
  1317 ;; *************** function _SYSTEM_Initialize *****************
  1318 ;; Defined at:
  1319 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;		None
  1322 ;; Auto vars:     Size  Location     Type
  1323 ;;		None
  1324 ;; Return value:  Size  Location     Type
  1325 ;;                  1    wreg      void 
  1326 ;; Registers used:
  1327 ;;		wreg, status,2, status,0, cstack
  1328 ;; Tracked objects:
  1329 ;;		On entry : 0/0
  1330 ;;		On exit  : 0/0
  1331 ;;		Unchanged: 0/0
  1332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1337 ;;Total ram usage:        0 bytes
  1338 ;; Hardware stack levels used:    1
  1339 ;; Hardware stack levels required when called:    6
  1340 ;; This function calls:
  1341 ;;		_ADC_Initialize
  1342 ;;		_EPWM1_Initialize
  1343 ;;		_EPWM2_Initialize
  1344 ;;		_EPWM3_Initialize
  1345 ;;		_EUSART1_Initialize
  1346 ;;		_I2C1_Initialize
  1347 ;;		_INTERRUPT_Initialize
  1348 ;;		_OSCILLATOR_Initialize
  1349 ;;		_PIN_MANAGER_Initialize
  1350 ;;		_PWM4_Initialize
  1351 ;;		_PWM5_Initialize
  1352 ;;		_TMR2_Initialize
  1353 ;;		_TMR4_Initialize
  1354 ;;		_TMR6_Initialize
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text1
  1361  003B22                     __ptext1:
  1362                           	opt stack 0
  1363  003B22                     _SYSTEM_Initialize:
  1364                           	opt stack 24
  1365                           
  1366                           ;mcc.c: 113: INTERRUPT_Initialize();
  1367                           
  1368                           ;incstack = 0
  1369  003B22  EC6F  F020         	call	_INTERRUPT_Initialize	;wreg free
  1370                           
  1371                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  1372  003B26  EC35  F01C         	call	_PIN_MANAGER_Initialize	;wreg free
  1373                           
  1374                           ;mcc.c: 115: OSCILLATOR_Initialize();
  1375  003B2A  EC68  F020         	call	_OSCILLATOR_Initialize	;wreg free
  1376                           
  1377                           ;mcc.c: 116: EUSART1_Initialize();
  1378  003B2E  ECCB  F01D         	call	_EUSART1_Initialize	;wreg free
  1379                           
  1380                           ;mcc.c: 117: TMR2_Initialize();
  1381  003B32  EC98  F01F         	call	_TMR2_Initialize	;wreg free
  1382                           
  1383                           ;mcc.c: 118: TMR4_Initialize();
  1384  003B36  ECDE  F01E         	call	_TMR4_Initialize	;wreg free
  1385                           
  1386                           ;mcc.c: 119: TMR6_Initialize();
  1387  003B3A  ECF4  F01F         	call	_TMR6_Initialize	;wreg free
  1388                           
  1389                           ;mcc.c: 120: EPWM1_Initialize();
  1390  003B3E  EC3E  F01F         	call	_EPWM1_Initialize	;wreg free
  1391                           
  1392                           ;mcc.c: 121: EPWM2_Initialize();
  1393  003B42  EC2C  F01F         	call	_EPWM2_Initialize	;wreg free
  1394                           
  1395                           ;mcc.c: 122: EPWM3_Initialize();
  1396  003B46  EC6A  F01E         	call	_EPWM3_Initialize	;wreg free
  1397                           
  1398                           ;mcc.c: 123: PWM4_Initialize();
  1399  003B4A  ECD8  F01F         	call	_PWM4_Initialize	;wreg free
  1400                           
  1401                           ;mcc.c: 124: PWM5_Initialize();
  1402  003B4E  ECC9  F01F         	call	_PWM5_Initialize	;wreg free
  1403                           
  1404                           ;mcc.c: 126: ADC_Initialize();
  1405  003B52  EC17  F020         	call	_ADC_Initialize	;wreg free
  1406                           
  1407                           ;mcc.c: 127: I2C1_Initialize();
  1408  003B56  EC06  F01F         	call	_I2C1_Initialize	;wreg free
  1409  003B5A  0012               	return		;funcret
  1410  003B5C                     __end_of_SYSTEM_Initialize:
  1411                           	opt stack 0
  1412                           tblptru	equ	0xFF8
  1413                           tblptrh	equ	0xFF7
  1414                           tblptrl	equ	0xFF6
  1415                           tablat	equ	0xFF5
  1416                           postinc0	equ	0xFEE
  1417                           wreg	equ	0xFE8
  1418                           
  1419 ;; *************** function _TMR6_Initialize *****************
  1420 ;; Defined at:
  1421 ;;		line 57 in file "mcc_generated_files/tmr6.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    5
  1442 ;; This function calls:
  1443 ;;		_TMR6_StartTimer
  1444 ;; This function is called by:
  1445 ;;		_SYSTEM_Initialize
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text2
  1450  003FE8                     __ptext2:
  1451                           	opt stack 0
  1452  003FE8                     _TMR6_Initialize:
  1453                           	opt stack 24
  1454                           
  1455                           ;tmr6.c: 62: T6CON = 0x00;
  1456                           
  1457                           ;incstack = 0
  1458  003FE8  0E00               	movlw	0
  1459  003FEA  010F               	movlb	15	; () banked
  1460  003FEC  6F4A               	movwf	74,b	;volatile
  1461                           
  1462                           ; BSR set to: 15
  1463                           ;tmr6.c: 65: PR6 = 0xFF;
  1464  003FEE  010F               	movlb	15	; () banked
  1465  003FF0  694B               	setf	75,b	;volatile
  1466                           
  1467                           ;tmr6.c: 68: TMR6 = 0x00;
  1468  003FF2  0E00               	movlw	0
  1469  003FF4  010F               	movlb	15	; () banked
  1470  003FF6  6F4C               	movwf	76,b	;volatile
  1471                           
  1472                           ; BSR set to: 15
  1473                           ;tmr6.c: 71: PIR5bits.TMR6IF = 0;
  1474  003FF8  947E               	bcf	3966,2,c	;volatile
  1475                           
  1476                           ; BSR set to: 15
  1477                           ;tmr6.c: 74: TMR6_StartTimer();
  1478  003FFA  EC9F  F020         	call	_TMR6_StartTimer	;wreg free
  1479  003FFE  0012               	return		;funcret
  1480  004000                     __end_of_TMR6_Initialize:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           
  1489 ;; *************** function _TMR6_StartTimer *****************
  1490 ;; Defined at:
  1491 ;;		line 77 in file "mcc_generated_files/tmr6.c"
  1492 ;; Parameters:    Size  Location     Type
  1493 ;;		None
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;		None
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		None
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;Total ram usage:        0 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; Hardware stack levels required when called:    4
  1512 ;; This function calls:
  1513 ;;		Nothing
  1514 ;; This function is called by:
  1515 ;;		_TMR6_Initialize
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text3
  1520  00413E                     __ptext3:
  1521                           	opt stack 0
  1522  00413E                     _TMR6_StartTimer:
  1523                           	opt stack 24
  1524                           
  1525                           ;tmr6.c: 80: T6CONbits.TMR6ON = 1;
  1526                           
  1527                           ;incstack = 0
  1528  00413E  010F               	movlb	15	; () banked
  1529  004140  854A               	bsf	74,2,b	;volatile
  1530                           
  1531                           ; BSR set to: 15
  1532  004142  0012               	return		;funcret
  1533  004144                     __end_of_TMR6_StartTimer:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           
  1542 ;; *************** function _TMR4_Initialize *****************
  1543 ;; Defined at:
  1544 ;;		line 57 in file "mcc_generated_files/tmr4.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;		None
  1547 ;; Auto vars:     Size  Location     Type
  1548 ;;		None
  1549 ;; Return value:  Size  Location     Type
  1550 ;;                  1    wreg      void 
  1551 ;; Registers used:
  1552 ;;		wreg, status,2, status,0, cstack
  1553 ;; Tracked objects:
  1554 ;;		On entry : 0/0
  1555 ;;		On exit  : 0/0
  1556 ;;		Unchanged: 0/0
  1557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1562 ;;Total ram usage:        0 bytes
  1563 ;; Hardware stack levels used:    1
  1564 ;; Hardware stack levels required when called:    5
  1565 ;; This function calls:
  1566 ;;		_TMR4_SetInterruptHandler
  1567 ;;		_TMR4_StartTimer
  1568 ;; This function is called by:
  1569 ;;		_SYSTEM_Initialize
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text4
  1574  003DBC                     __ptext4:
  1575                           	opt stack 0
  1576  003DBC                     _TMR4_Initialize:
  1577                           	opt stack 24
  1578                           
  1579                           ;tmr4.c: 62: T4CON = 0x79;
  1580                           
  1581                           ; BSR set to: 15
  1582                           ;incstack = 0
  1583  003DBC  0E79               	movlw	121
  1584  003DBE  010F               	movlb	15	; () banked
  1585  003DC0  6F51               	movwf	81,b	;volatile
  1586                           
  1587                           ;tmr4.c: 65: PR4 = 0xF9;
  1588  003DC2  0EF9               	movlw	249
  1589  003DC4  010F               	movlb	15	; () banked
  1590  003DC6  6F52               	movwf	82,b	;volatile
  1591                           
  1592                           ;tmr4.c: 68: TMR4 = 0x00;
  1593  003DC8  0E00               	movlw	0
  1594  003DCA  010F               	movlb	15	; () banked
  1595  003DCC  6F53               	movwf	83,b	;volatile
  1596                           
  1597                           ; BSR set to: 15
  1598                           ;tmr4.c: 71: PIR5bits.TMR4IF = 0;
  1599  003DCE  907E               	bcf	3966,0,c	;volatile
  1600                           
  1601                           ; BSR set to: 15
  1602                           ;tmr4.c: 74: PIE5bits.TMR4IE = 1;
  1603  003DD0  807D               	bsf	3965,0,c	;volatile
  1604                           
  1605                           ; BSR set to: 15
  1606                           ;tmr4.c: 77: TMR4_SetInterruptHandler(TMR4_DefaultInterruptHandler);
  1607  003DD2  0E52               	movlw	low _TMR4_DefaultInterruptHandler
  1608  003DD4  6E11               	movwf	TMR4_SetInterruptHandler@InterruptHandler,c
  1609  003DD6  0E41               	movlw	high _TMR4_DefaultInterruptHandler
  1610  003DD8  6E12               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1,c
  1611  003DDA  EC84  F020         	call	_TMR4_SetInterruptHandler	;wreg free
  1612                           
  1613                           ;tmr4.c: 80: TMR4_StartTimer();
  1614  003DDE  ECA2  F020         	call	_TMR4_StartTimer	;wreg free
  1615  003DE2  0012               	return		;funcret
  1616  003DE4                     __end_of_TMR4_Initialize:
  1617                           	opt stack 0
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           
  1625 ;; *************** function _TMR4_StartTimer *****************
  1626 ;; Defined at:
  1627 ;;		line 83 in file "mcc_generated_files/tmr4.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		None
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;Total ram usage:        0 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    4
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_TMR4_Initialize
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           	psect	text5
  1656  004144                     __ptext5:
  1657                           	opt stack 0
  1658  004144                     _TMR4_StartTimer:
  1659                           	opt stack 24
  1660                           
  1661                           ;tmr4.c: 86: T4CONbits.TMR4ON = 1;
  1662                           
  1663                           ;incstack = 0
  1664  004144  010F               	movlb	15	; () banked
  1665  004146  8551               	bsf	81,2,b	;volatile
  1666                           
  1667                           ; BSR set to: 15
  1668  004148  0012               	return		;funcret
  1669  00414A                     __end_of_TMR4_StartTimer:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           tblptrh	equ	0xFF7
  1673                           tblptrl	equ	0xFF6
  1674                           tablat	equ	0xFF5
  1675                           postinc0	equ	0xFEE
  1676                           wreg	equ	0xFE8
  1677                           
  1678 ;; *************** function _TMR2_Initialize *****************
  1679 ;; Defined at:
  1680 ;;		line 57 in file "mcc_generated_files/tmr2.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  1    wreg      void 
  1687 ;; Registers used:
  1688 ;;		wreg, status,2, status,0, cstack
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;Total ram usage:        0 bytes
  1699 ;; Hardware stack levels used:    1
  1700 ;; Hardware stack levels required when called:    5
  1701 ;; This function calls:
  1702 ;;		_TMR2_SetInterruptHandler
  1703 ;;		_TMR2_StartTimer
  1704 ;; This function is called by:
  1705 ;;		_SYSTEM_Initialize
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text6
  1710  003F30                     __ptext6:
  1711                           	opt stack 0
  1712  003F30                     _TMR2_Initialize:
  1713                           	opt stack 24
  1714                           
  1715                           ;tmr2.c: 62: T2CON = 0x01;
  1716                           
  1717                           ; BSR set to: 15
  1718                           ;incstack = 0
  1719  003F30  0E01               	movlw	1
  1720  003F32  6EBA               	movwf	4026,c	;volatile
  1721                           
  1722                           ;tmr2.c: 65: PR2 = 0x4A;
  1723  003F34  0E4A               	movlw	74
  1724  003F36  6EBB               	movwf	4027,c	;volatile
  1725                           
  1726                           ;tmr2.c: 68: TMR2 = 0x00;
  1727  003F38  0E00               	movlw	0
  1728  003F3A  6EBC               	movwf	4028,c	;volatile
  1729                           
  1730                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
  1731  003F3C  929E               	bcf	3998,1,c	;volatile
  1732                           
  1733                           ;tmr2.c: 74: PIE1bits.TMR2IE = 1;
  1734  003F3E  829D               	bsf	3997,1,c	;volatile
  1735                           
  1736                           ;tmr2.c: 77: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  1737  003F40  0E54               	movlw	low _TMR2_DefaultInterruptHandler
  1738  003F42  6E11               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
  1739  003F44  0E41               	movlw	high _TMR2_DefaultInterruptHandler
  1740  003F46  6E12               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
  1741  003F48  EC89  F020         	call	_TMR2_SetInterruptHandler	;wreg free
  1742                           
  1743                           ;tmr2.c: 80: TMR2_StartTimer();
  1744  003F4C  ECA5  F020         	call	_TMR2_StartTimer	;wreg free
  1745  003F50  0012               	return		;funcret
  1746  003F52                     __end_of_TMR2_Initialize:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           postinc0	equ	0xFEE
  1753                           wreg	equ	0xFE8
  1754                           
  1755 ;; *************** function _TMR2_StartTimer *****************
  1756 ;; Defined at:
  1757 ;;		line 83 in file "mcc_generated_files/tmr2.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;		None
  1762 ;; Return value:  Size  Location     Type
  1763 ;;                  1    wreg      void 
  1764 ;; Registers used:
  1765 ;;		None
  1766 ;; Tracked objects:
  1767 ;;		On entry : 0/0
  1768 ;;		On exit  : 0/0
  1769 ;;		Unchanged: 0/0
  1770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1775 ;;Total ram usage:        0 bytes
  1776 ;; Hardware stack levels used:    1
  1777 ;; Hardware stack levels required when called:    4
  1778 ;; This function calls:
  1779 ;;		Nothing
  1780 ;; This function is called by:
  1781 ;;		_TMR2_Initialize
  1782 ;; This function uses a non-reentrant model
  1783 ;;
  1784                           
  1785                           	psect	text7
  1786  00414A                     __ptext7:
  1787                           	opt stack 0
  1788  00414A                     _TMR2_StartTimer:
  1789                           	opt stack 24
  1790                           
  1791                           ;tmr2.c: 86: T2CONbits.TMR2ON = 1;
  1792                           
  1793                           ;incstack = 0
  1794  00414A  84BA               	bsf	4026,2,c	;volatile
  1795  00414C  0012               	return		;funcret
  1796  00414E                     __end_of_TMR2_StartTimer:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           
  1805 ;; *************** function _PWM5_Initialize *****************
  1806 ;; Defined at:
  1807 ;;		line 64 in file "pwm5.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;		None
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  2  252[None  ] int 
  1814 ;; Registers used:
  1815 ;;		wreg, status,2
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/0
  1818 ;;		On exit  : 0/0
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;Total ram usage:        0 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    4
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_SYSTEM_Initialize
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text8
  1836  003F92                     __ptext8:
  1837                           	opt stack 0
  1838  003F92                     _PWM5_Initialize:
  1839                           	opt stack 25
  1840                           
  1841                           ;pwm5.c: 69: CCP5CON = 0x0C;
  1842                           
  1843                           ;incstack = 0
  1844  003F92  0E0C               	movlw	12
  1845  003F94  010F               	movlb	15	; () banked
  1846  003F96  6F54               	movwf	84,b	;volatile
  1847                           
  1848                           ;pwm5.c: 72: CCPR5L = 0x00;
  1849  003F98  0E00               	movlw	0
  1850  003F9A  010F               	movlb	15	; () banked
  1851  003F9C  6F55               	movwf	85,b	;volatile
  1852                           
  1853                           ;pwm5.c: 75: CCPR5H = 0x00;
  1854  003F9E  0E00               	movlw	0
  1855  003FA0  010F               	movlb	15	; () banked
  1856  003FA2  6F56               	movwf	86,b	;volatile
  1857                           
  1858                           ;pwm5.c: 78: CCPTMRS1bits.C5TSEL = 0x2;
  1859  003FA4  010F               	movlb	15	; () banked
  1860  003FA6  5148               	movf	72,w,b	;volatile
  1861  003FA8  0BF3               	andlw	-13
  1862  003FAA  0908               	iorlw	8
  1863  003FAC  6F48               	movwf	72,b	;volatile
  1864                           
  1865                           ; BSR set to: 15
  1866  003FAE  0012               	return		;funcret
  1867  003FB0                     __end_of_PWM5_Initialize:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           
  1876 ;; *************** function _PWM4_Initialize *****************
  1877 ;; Defined at:
  1878 ;;		line 64 in file "pwm4.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  2  250[None  ] int 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    4
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_SYSTEM_Initialize
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text9
  1907  003FB0                     __ptext9:
  1908                           	opt stack 0
  1909  003FB0                     _PWM4_Initialize:
  1910                           	opt stack 25
  1911                           
  1912                           ;pwm4.c: 69: CCP4CON = 0x0C;
  1913                           
  1914                           ; BSR set to: 15
  1915                           ;incstack = 0
  1916  003FB0  0E0C               	movlw	12
  1917  003FB2  010F               	movlb	15	; () banked
  1918  003FB4  6F57               	movwf	87,b	;volatile
  1919                           
  1920                           ;pwm4.c: 72: CCPR4L = 0x00;
  1921  003FB6  0E00               	movlw	0
  1922  003FB8  010F               	movlb	15	; () banked
  1923  003FBA  6F58               	movwf	88,b	;volatile
  1924                           
  1925                           ;pwm4.c: 75: CCPR4H = 0x00;
  1926  003FBC  0E00               	movlw	0
  1927  003FBE  010F               	movlb	15	; () banked
  1928  003FC0  6F59               	movwf	89,b	;volatile
  1929                           
  1930                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x2;
  1931  003FC2  010F               	movlb	15	; () banked
  1932  003FC4  5148               	movf	72,w,b	;volatile
  1933  003FC6  0BFC               	andlw	-4
  1934  003FC8  0902               	iorlw	2
  1935  003FCA  6F48               	movwf	72,b	;volatile
  1936                           
  1937                           ; BSR set to: 15
  1938  003FCC  0012               	return		;funcret
  1939  003FCE                     __end_of_PWM4_Initialize:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           
  1948 ;; *************** function _PIN_MANAGER_Initialize *****************
  1949 ;; Defined at:
  1950 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    4
  1971 ;; This function calls:
  1972 ;;		Nothing
  1973 ;; This function is called by:
  1974 ;;		_SYSTEM_Initialize
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text10
  1979  00386A                     __ptext10:
  1980                           	opt stack 0
  1981  00386A                     _PIN_MANAGER_Initialize:
  1982                           	opt stack 25
  1983                           
  1984                           ;pin_manager.c: 51: LATB = 0x0;
  1985                           
  1986                           ; BSR set to: 15
  1987                           ;incstack = 0
  1988  00386A  0E00               	movlw	0
  1989  00386C  6E8A               	movwf	3978,c	;volatile
  1990                           
  1991                           ;pin_manager.c: 52: LATA = 0x0;
  1992  00386E  0E00               	movlw	0
  1993  003870  6E89               	movwf	3977,c	;volatile
  1994                           
  1995                           ;pin_manager.c: 53: ANSELE = 0x0;
  1996  003872  0E00               	movlw	0
  1997  003874  010F               	movlb	15	; () banked
  1998  003876  6F3C               	movwf	60,b	;volatile
  1999                           
  2000                           ;pin_manager.c: 54: LATE = 0x0;
  2001  003878  0E00               	movlw	0
  2002  00387A  6E8D               	movwf	3981,c	;volatile
  2003                           
  2004                           ;pin_manager.c: 55: LATD = 0x0;
  2005  00387C  0E00               	movlw	0
  2006  00387E  6E8C               	movwf	3980,c	;volatile
  2007                           
  2008                           ;pin_manager.c: 56: LATC = 0x0;
  2009  003880  0E00               	movlw	0
  2010  003882  6E8B               	movwf	3979,c	;volatile
  2011                           
  2012                           ;pin_manager.c: 57: ANSELA = 0x2;
  2013  003884  0E02               	movlw	2
  2014  003886  010F               	movlb	15	; () banked
  2015  003888  6F38               	movwf	56,b	;volatile
  2016                           
  2017                           ;pin_manager.c: 58: ANSELB = 0x0;
  2018  00388A  0E00               	movlw	0
  2019  00388C  010F               	movlb	15	; () banked
  2020  00388E  6F39               	movwf	57,b	;volatile
  2021                           
  2022                           ;pin_manager.c: 59: ANSELC = 0x0;
  2023  003890  0E00               	movlw	0
  2024  003892  010F               	movlb	15	; () banked
  2025  003894  6F3A               	movwf	58,b	;volatile
  2026                           
  2027                           ;pin_manager.c: 60: ANSELD = 0x0;
  2028  003896  0E00               	movlw	0
  2029  003898  010F               	movlb	15	; () banked
  2030  00389A  6F3B               	movwf	59,b	;volatile
  2031                           
  2032                           ;pin_manager.c: 61: WPUB = 0xFE;
  2033  00389C  0EFE               	movlw	254
  2034  00389E  6E61               	movwf	3937,c	;volatile
  2035                           
  2036                           ;pin_manager.c: 62: TRISD = 0x0;
  2037  0038A0  0E00               	movlw	0
  2038  0038A2  6E95               	movwf	3989,c	;volatile
  2039                           
  2040                           ;pin_manager.c: 63: TRISE = 0x0;
  2041  0038A4  0E00               	movlw	0
  2042  0038A6  6E96               	movwf	3990,c	;volatile
  2043                           
  2044                           ;pin_manager.c: 64: TRISB = 0x9E;
  2045  0038A8  0E9E               	movlw	158
  2046  0038AA  6E93               	movwf	3987,c	;volatile
  2047                           
  2048                           ;pin_manager.c: 65: TRISC = 0x98;
  2049  0038AC  0E98               	movlw	152
  2050  0038AE  6E94               	movwf	3988,c	;volatile
  2051                           
  2052                           ;pin_manager.c: 66: TRISA = 0xC2;
  2053  0038B0  0EC2               	movlw	194
  2054  0038B2  6E92               	movwf	3986,c	;volatile
  2055                           
  2056                           ; BSR set to: 15
  2057                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0b0;
  2058  0038B4  9EF1               	bcf	intcon2,7,c	;volatile
  2059                           
  2060                           ; BSR set to: 15
  2061  0038B6  0012               	return		;funcret
  2062  0038B8                     __end_of_PIN_MANAGER_Initialize:
  2063                           	opt stack 0
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           intcon2	equ	0xFF1
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           
  2072 ;; *************** function _OSCILLATOR_Initialize *****************
  2073 ;; Defined at:
  2074 ;;		line 132 in file "mcc_generated_files/mcc.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    4
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_SYSTEM_Initialize
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text11
  2103  0040D0                     __ptext11:
  2104                           	opt stack 0
  2105  0040D0                     _OSCILLATOR_Initialize:
  2106                           	opt stack 25
  2107                           
  2108                           ;mcc.c: 135: OSCCON = 0x70;
  2109                           
  2110                           ; BSR set to: 15
  2111                           ;incstack = 0
  2112  0040D0  0E70               	movlw	112
  2113  0040D2  6ED3               	movwf	4051,c	;volatile
  2114                           
  2115                           ;mcc.c: 137: OSCCON2 = 0x04;
  2116  0040D4  0E04               	movlw	4
  2117  0040D6  6ED2               	movwf	4050,c	;volatile
  2118                           
  2119                           ;mcc.c: 139: OSCTUNE = 0xC0;
  2120  0040D8  0EC0               	movlw	192
  2121  0040DA  6E9B               	movwf	3995,c	;volatile
  2122  0040DC  0012               	return		;funcret
  2123  0040DE                     __end_of_OSCILLATOR_Initialize:
  2124                           	opt stack 0
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           intcon2	equ	0xFF1
  2130                           postinc0	equ	0xFEE
  2131                           wreg	equ	0xFE8
  2132                           
  2133 ;; *************** function _INTERRUPT_Initialize *****************
  2134 ;; Defined at:
  2135 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		None
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;Total ram usage:        0 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    4
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_SYSTEM_Initialize
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text12
  2164  0040DE                     __ptext12:
  2165                           	opt stack 0
  2166  0040DE                     _INTERRUPT_Initialize:
  2167                           	opt stack 25
  2168                           
  2169                           ;interrupt_manager.c: 54: IPEN = 0;
  2170                           
  2171                           ;incstack = 0
  2172  0040DE  9ED0               	bcf	4048,7,c	;volatile
  2173                           
  2174                           ;interrupt_manager.c: 59: IPR1bits.SSP1IP = 0;
  2175  0040E0  969F               	bcf	3999,3,c	;volatile
  2176                           
  2177                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  2178  0040E2  989F               	bcf	3999,4,c	;volatile
  2179                           
  2180                           ;interrupt_manager.c: 65: IPR1bits.RC1IP = 0;
  2181  0040E4  9A9F               	bcf	3999,5,c	;volatile
  2182                           
  2183                           ;interrupt_manager.c: 68: IPR5bits.TMR4IP = 0;
  2184  0040E6  907F               	bcf	3967,0,c	;volatile
  2185                           
  2186                           ;interrupt_manager.c: 71: IPR1bits.TMR2IP = 0;
  2187  0040E8  929F               	bcf	3999,1,c	;volatile
  2188  0040EA  0012               	return		;funcret
  2189  0040EC                     __end_of_INTERRUPT_Initialize:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           intcon2	equ	0xFF1
  2196                           postinc0	equ	0xFEE
  2197                           wreg	equ	0xFE8
  2198                           
  2199 ;; *************** function _I2C1_Initialize *****************
  2200 ;; Defined at:
  2201 ;;		line 82 in file "mcc_generated_files/i2c1.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;		None
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;Total ram usage:        0 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    4
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		_SYSTEM_Initialize
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text13
  2230  003E0C                     __ptext13:
  2231                           	opt stack 0
  2232  003E0C                     _I2C1_Initialize:
  2233                           	opt stack 25
  2234                           
  2235                           ;i2c1.c: 85: I2C_Address = (((0x90 >> 1) + 0x04) << 1);
  2236                           
  2237                           ;incstack = 0
  2238  003E0C  0E98               	movlw	152
  2239  003E0E  0100               	movlb	0	; () banked
  2240  003E10  6FFE               	movwf	_I2C_Address& (0+255),b
  2241                           
  2242                           ;i2c1.c: 90: SSP1STAT = 0x00;
  2243  003E12  0E00               	movlw	0
  2244  003E14  6EC7               	movwf	4039,c	;volatile
  2245                           
  2246                           ;i2c1.c: 92: SSP1CON1 = 0x26;
  2247  003E16  0E26               	movlw	38
  2248  003E18  6EC6               	movwf	4038,c	;volatile
  2249                           
  2250                           ;i2c1.c: 94: SSP1CON2 = 0x00;
  2251  003E1A  0E00               	movlw	0
  2252  003E1C  6EC5               	movwf	4037,c	;volatile
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;i2c1.c: 95: SSP1CON2bits.SEN = 1;
  2256  003E1E  80C5               	bsf	4037,0,c	;volatile
  2257                           
  2258                           ;i2c1.c: 98: SSP1CON3 = 0x60;
  2259  003E20  0E60               	movlw	96
  2260  003E22  6ECB               	movwf	4043,c	;volatile
  2261                           
  2262                           ;i2c1.c: 100: SSP1MSK = (0xFF << 1);
  2263  003E24  0EFE               	movlw	254
  2264  003E26  6ECA               	movwf	4042,c	;volatile
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;i2c1.c: 102: SSP1ADD = I2C_Address;
  2268  003E28  C0FE  FFC8         	movff	_I2C_Address,4040	;volatile
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;i2c1.c: 105: PIR1bits.SSP1IF = 0;
  2272  003E2C  969E               	bcf	3998,3,c	;volatile
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;i2c1.c: 107: PIE1bits.SSP1IE = 1;
  2276  003E2E  869D               	bsf	3997,3,c	;volatile
  2277                           
  2278                           ; BSR set to: 0
  2279  003E30  0012               	return		;funcret
  2280  003E32                     __end_of_I2C1_Initialize:
  2281                           	opt stack 0
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           intcon2	equ	0xFF1
  2287                           postinc0	equ	0xFEE
  2288                           wreg	equ	0xFE8
  2289                           
  2290 ;; *************** function _EUSART1_Initialize *****************
  2291 ;; Defined at:
  2292 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;		None
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2310 ;;Total ram usage:        0 bytes
  2311 ;; Hardware stack levels used:    1
  2312 ;; Hardware stack levels required when called:    4
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_SYSTEM_Initialize
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text14
  2321  003B96                     __ptext14:
  2322                           	opt stack 0
  2323  003B96                     _EUSART1_Initialize:
  2324                           	opt stack 25
  2325                           
  2326                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;incstack = 0
  2330  003B96  9A9D               	bcf	3997,5,c	;volatile
  2331                           
  2332                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  2333  003B98  989D               	bcf	3997,4,c	;volatile
  2334                           
  2335                           ;eusart1.c: 84: BAUDCON1 = 0x08;
  2336  003B9A  0E08               	movlw	8
  2337  003B9C  6EB8               	movwf	4024,c	;volatile
  2338                           
  2339                           ;eusart1.c: 87: RCSTA1 = 0x90;
  2340  003B9E  0E90               	movlw	144
  2341  003BA0  6EAB               	movwf	4011,c	;volatile
  2342                           
  2343                           ;eusart1.c: 90: TXSTA1 = 0x24;
  2344  003BA2  0E24               	movlw	36
  2345  003BA4  6EAC               	movwf	4012,c	;volatile
  2346                           
  2347                           ;eusart1.c: 93: SPBRG1 = 0x82;
  2348  003BA6  0E82               	movlw	130
  2349  003BA8  6EAF               	movwf	4015,c	;volatile
  2350                           
  2351                           ;eusart1.c: 96: SPBRGH1 = 0x06;
  2352  003BAA  0E06               	movlw	6
  2353  003BAC  6EB0               	movwf	4016,c	;volatile
  2354                           
  2355                           ;eusart1.c: 100: eusart1TxHead = 0;
  2356  003BAE  0E00               	movlw	0
  2357  003BB0  6E4C               	movwf	_eusart1TxHead,c
  2358                           
  2359                           ;eusart1.c: 101: eusart1TxTail = 0;
  2360  003BB2  0E00               	movlw	0
  2361  003BB4  6E4B               	movwf	_eusart1TxTail,c
  2362                           
  2363                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  2364  003BB6  0E40               	movlw	64
  2365  003BB8  0100               	movlb	0	; () banked
  2366  003BBA  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  2367                           
  2368                           ;eusart1.c: 104: eusart1RxHead = 0;
  2369  003BBC  0E00               	movlw	0
  2370  003BBE  6E4A               	movwf	_eusart1RxHead,c
  2371                           
  2372                           ;eusart1.c: 105: eusart1RxTail = 0;
  2373  003BC0  0E00               	movlw	0
  2374  003BC2  6E49               	movwf	_eusart1RxTail,c
  2375                           
  2376                           ;eusart1.c: 106: eusart1RxCount = 0;
  2377  003BC4  0E00               	movlw	0
  2378  003BC6  6E48               	movwf	_eusart1RxCount,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
  2382  003BC8  8A9D               	bsf	3997,5,c	;volatile
  2383                           
  2384                           ; BSR set to: 0
  2385  003BCA  0012               	return		;funcret
  2386  003BCC                     __end_of_EUSART1_Initialize:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           intcon2	equ	0xFF1
  2393                           postinc0	equ	0xFEE
  2394                           wreg	equ	0xFE8
  2395                           
  2396 ;; *************** function _EPWM3_Initialize *****************
  2397 ;; Defined at:
  2398 ;;		line 64 in file "epwm3.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2  248[None  ] int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    4
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_SYSTEM_Initialize
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text15
  2427  003CD4                     __ptext15:
  2428                           	opt stack 0
  2429  003CD4                     _EPWM3_Initialize:
  2430                           	opt stack 25
  2431                           
  2432                           ;epwm3.c: 69: CCP3CON = 0x0C;
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;incstack = 0
  2436  003CD4  0E0C               	movlw	12
  2437  003CD6  010F               	movlb	15	; () banked
  2438  003CD8  6F5D               	movwf	93,b	;volatile
  2439                           
  2440                           ;epwm3.c: 72: ECCP3AS = 0x00;
  2441  003CDA  0E00               	movlw	0
  2442  003CDC  010F               	movlb	15	; () banked
  2443  003CDE  6F5B               	movwf	91,b	;volatile
  2444                           
  2445                           ;epwm3.c: 75: PWM3CON = 0x80;
  2446  003CE0  0E80               	movlw	128
  2447  003CE2  010F               	movlb	15	; () banked
  2448  003CE4  6F5C               	movwf	92,b	;volatile
  2449                           
  2450                           ;epwm3.c: 78: PSTR3CON = 0x01;
  2451  003CE6  0E01               	movlw	1
  2452  003CE8  010F               	movlb	15	; () banked
  2453  003CEA  6F5A               	movwf	90,b	;volatile
  2454                           
  2455                           ;epwm3.c: 81: CCPR3L = 0x00;
  2456  003CEC  0E00               	movlw	0
  2457  003CEE  010F               	movlb	15	; () banked
  2458  003CF0  6F5E               	movwf	94,b	;volatile
  2459                           
  2460                           ;epwm3.c: 84: CCPR3H = 0x00;
  2461  003CF2  0E00               	movlw	0
  2462  003CF4  010F               	movlb	15	; () banked
  2463  003CF6  6F5F               	movwf	95,b	;volatile
  2464                           
  2465                           ;epwm3.c: 88: CCPTMRS0bits.C3TSEL = 0x2;
  2466  003CF8  010F               	movlb	15	; () banked
  2467  003CFA  5149               	movf	73,w,b	;volatile
  2468  003CFC  0B3F               	andlw	-193
  2469  003CFE  0980               	iorlw	128
  2470  003D00  6F49               	movwf	73,b	;volatile
  2471                           
  2472                           ; BSR set to: 15
  2473  003D02  0012               	return		;funcret
  2474  003D04                     __end_of_EPWM3_Initialize:
  2475                           	opt stack 0
  2476                           tblptru	equ	0xFF8
  2477                           tblptrh	equ	0xFF7
  2478                           tblptrl	equ	0xFF6
  2479                           tablat	equ	0xFF5
  2480                           intcon2	equ	0xFF1
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           
  2484 ;; *************** function _EPWM2_Initialize *****************
  2485 ;; Defined at:
  2486 ;;		line 63 in file "mcc_generated_files/epwm2.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    4
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_SYSTEM_Initialize
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text16
  2515  003E58                     __ptext16:
  2516                           	opt stack 0
  2517  003E58                     _EPWM2_Initialize:
  2518                           	opt stack 25
  2519                           
  2520                           ;epwm2.c: 68: CCP2CON = 0x2C;
  2521                           
  2522                           ; BSR set to: 15
  2523                           ;incstack = 0
  2524  003E58  0E2C               	movlw	44
  2525  003E5A  6E66               	movwf	3942,c	;volatile
  2526                           
  2527                           ;epwm2.c: 71: ECCP2AS = 0x00;
  2528  003E5C  0E00               	movlw	0
  2529  003E5E  6E64               	movwf	3940,c	;volatile
  2530                           
  2531                           ;epwm2.c: 74: PWM2CON = 0x80;
  2532  003E60  0E80               	movlw	128
  2533  003E62  6E65               	movwf	3941,c	;volatile
  2534                           
  2535                           ;epwm2.c: 77: PSTR2CON = 0x00;
  2536  003E64  0E00               	movlw	0
  2537  003E66  6E63               	movwf	3939,c	;volatile
  2538                           
  2539                           ;epwm2.c: 80: CCPR2L = 0x08;
  2540  003E68  0E08               	movlw	8
  2541  003E6A  6E67               	movwf	3943,c	;volatile
  2542                           
  2543                           ;epwm2.c: 83: CCPR2H = 0x00;
  2544  003E6C  0E00               	movlw	0
  2545  003E6E  6E68               	movwf	3944,c	;volatile
  2546                           
  2547                           ;epwm2.c: 87: CCPTMRS0bits.C2TSEL = 0x2;
  2548  003E70  010F               	movlb	15	; () banked
  2549  003E72  5149               	movf	73,w,b	;volatile
  2550  003E74  0BE7               	andlw	-25
  2551  003E76  0910               	iorlw	16
  2552  003E78  6F49               	movwf	73,b	;volatile
  2553                           
  2554                           ; BSR set to: 15
  2555  003E7A  0012               	return		;funcret
  2556  003E7C                     __end_of_EPWM2_Initialize:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           intcon2	equ	0xFF1
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           
  2566 ;; *************** function _EPWM1_Initialize *****************
  2567 ;; Defined at:
  2568 ;;		line 63 in file "mcc_generated_files/epwm1.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;		None
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;		None
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:        0 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    4
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_SYSTEM_Initialize
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text17
  2597  003E7C                     __ptext17:
  2598                           	opt stack 0
  2599  003E7C                     _EPWM1_Initialize:
  2600                           	opt stack 25
  2601                           
  2602                           ;epwm1.c: 68: CCP1CON = 0x0C;
  2603                           
  2604                           ; BSR set to: 15
  2605                           ;incstack = 0
  2606  003E7C  0E0C               	movlw	12
  2607  003E7E  6EBD               	movwf	4029,c	;volatile
  2608                           
  2609                           ;epwm1.c: 71: ECCP1AS = 0x00;
  2610  003E80  0E00               	movlw	0
  2611  003E82  6EB6               	movwf	4022,c	;volatile
  2612                           
  2613                           ;epwm1.c: 74: PWM1CON = 0x80;
  2614  003E84  0E80               	movlw	128
  2615  003E86  6EB7               	movwf	4023,c	;volatile
  2616                           
  2617                           ;epwm1.c: 77: PSTR1CON = 0x01;
  2618  003E88  0E01               	movlw	1
  2619  003E8A  6EB9               	movwf	4025,c	;volatile
  2620                           
  2621                           ;epwm1.c: 80: CCPR1L = 0x00;
  2622  003E8C  0E00               	movlw	0
  2623  003E8E  6EBE               	movwf	4030,c	;volatile
  2624                           
  2625                           ;epwm1.c: 83: CCPR1H = 0x00;
  2626  003E90  0E00               	movlw	0
  2627  003E92  6EBF               	movwf	4031,c	;volatile
  2628                           
  2629                           ;epwm1.c: 87: CCPTMRS0bits.C1TSEL = 0x2;
  2630  003E94  010F               	movlb	15	; () banked
  2631  003E96  5149               	movf	73,w,b	;volatile
  2632  003E98  0BFC               	andlw	-4
  2633  003E9A  0902               	iorlw	2
  2634  003E9C  6F49               	movwf	73,b	;volatile
  2635                           
  2636                           ; BSR set to: 15
  2637  003E9E  0012               	return		;funcret
  2638  003EA0                     __end_of_EPWM1_Initialize:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           intcon2	equ	0xFF1
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           
  2648 ;; *************** function _ADC_Initialize *****************
  2649 ;; Defined at:
  2650 ;;		line 58 in file "mcc_generated_files/adc.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    4
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_SYSTEM_Initialize
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text18
  2679  00402E                     __ptext18:
  2680                           	opt stack 0
  2681  00402E                     _ADC_Initialize:
  2682                           	opt stack 25
  2683                           
  2684                           ;adc.c: 63: ADCON0 = 0x01;
  2685                           
  2686                           ; BSR set to: 15
  2687                           ;incstack = 0
  2688  00402E  0E01               	movlw	1
  2689  004030  6EC2               	movwf	4034,c	;volatile
  2690                           
  2691                           ;adc.c: 66: ADCON1 = 0x00;
  2692  004032  0E00               	movlw	0
  2693  004034  6EC1               	movwf	4033,c	;volatile
  2694                           
  2695                           ;adc.c: 69: ADCON2 = 0x06;
  2696  004036  0E06               	movlw	6
  2697  004038  6EC0               	movwf	4032,c	;volatile
  2698                           
  2699                           ;adc.c: 72: ADRESL = 0x00;
  2700  00403A  0E00               	movlw	0
  2701  00403C  6EC3               	movwf	4035,c	;volatile
  2702                           
  2703                           ;adc.c: 75: ADRESH = 0x00;
  2704  00403E  0E00               	movlw	0
  2705  004040  6EC4               	movwf	4036,c	;volatile
  2706  004042  0012               	return		;funcret
  2707  004044                     __end_of_ADC_Initialize:
  2708                           	opt stack 0
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           intcon2	equ	0xFF1
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           
  2717 ;; *************** function _MainTask *****************
  2718 ;; Defined at:
  2719 ;;		line 52 in file "tasks.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		None
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;Total ram usage:        0 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    4
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text19
  2748  004150                     __ptext19:
  2749                           	opt stack 0
  2750  004150                     _MainTask:
  2751                           	opt stack 26
  2752                           
  2753                           ;incstack = 0
  2754  004150  0012               	return		;funcret
  2755  004152                     __end_of_MainTask:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           tblptrh	equ	0xFF7
  2759                           tblptrl	equ	0xFF6
  2760                           tablat	equ	0xFF5
  2761                           intcon2	equ	0xFF1
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           
  2765 ;; *************** function _InitTasks *****************
  2766 ;; Defined at:
  2767 ;;		line 36 in file "tasks.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;		None
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;		None
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        0 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:   11
  2788 ;; This function calls:
  2789 ;;		_EPWM1_LoadDutyValue
  2790 ;;		_EPWM3_LoadDutyValue
  2791 ;;		_PWM4_LoadDutyValue
  2792 ;;		_PWM5_LoadDutyValue
  2793 ;;		_Setup_Display_LCD
  2794 ;;		_TC_Devices_Init
  2795 ;;		_TMR2_SetInterruptHandler
  2796 ;;		_TMR4_SetInterruptHandler
  2797 ;;		_UpdateID
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text20
  2804  003758                     __ptext20:
  2805                           	opt stack 0
  2806  003758                     _InitTasks:
  2807                           	opt stack 19
  2808                           
  2809                           ;tasks.c: 38: EPWM1_LoadDutyValue(0);
  2810                           
  2811                           ;incstack = 0
  2812  003758  0E00               	movlw	0
  2813  00375A  0100               	movlb	0	; () banked
  2814  00375C  6FF0               	movwf	(EPWM1_LoadDutyValue@dutyValue+1)& (0+255),b
  2815  00375E  0E00               	movlw	0
  2816  003760  6FEF               	movwf	EPWM1_LoadDutyValue@dutyValue& (0+255),b
  2817  003762  EC9A  F01E         	call	_EPWM1_LoadDutyValue	;wreg free
  2818                           
  2819                           ;tasks.c: 39: EPWM3_LoadDutyValue(0);
  2820  003766  0E00               	movlw	0
  2821  003768  0100               	movlb	0	; () banked
  2822  00376A  6FF0               	movwf	(EPWM3_LoadDutyValue@dutyValue+1)& (0+255),b
  2823  00376C  0E00               	movlw	0
  2824  00376E  6FEF               	movwf	EPWM3_LoadDutyValue@dutyValue& (0+255),b
  2825  003770  EC1C  F01E         	call	_EPWM3_LoadDutyValue	;wreg free
  2826                           
  2827                           ;tasks.c: 40: PWM4_LoadDutyValue(0);
  2828  003774  0E00               	movlw	0
  2829  003776  0100               	movlb	0	; () banked
  2830  003778  6FF0               	movwf	(PWM4_LoadDutyValue@dutyValue+1)& (0+255),b
  2831  00377A  0E00               	movlw	0
  2832  00377C  6FEF               	movwf	PWM4_LoadDutyValue@dutyValue& (0+255),b
  2833  00377E  EC01  F01E         	call	_PWM4_LoadDutyValue	;wreg free
  2834                           
  2835                           ;tasks.c: 41: PWM5_LoadDutyValue(0);
  2836  003782  0E00               	movlw	0
  2837  003784  0100               	movlb	0	; () banked
  2838  003786  6FF0               	movwf	(PWM5_LoadDutyValue@dutyValue+1)& (0+255),b
  2839  003788  0E00               	movlw	0
  2840  00378A  6FEF               	movwf	PWM5_LoadDutyValue@dutyValue& (0+255),b
  2841  00378C  ECE6  F01D         	call	_PWM5_LoadDutyValue	;wreg free
  2842                           
  2843                           ;tasks.c: 43: TMR2_SetInterruptHandler(Timer2Tick);
  2844  003790  0EBE               	movlw	low _Timer2Tick
  2845  003792  6E11               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
  2846  003794  0E40               	movlw	high _Timer2Tick
  2847  003796  6E12               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
  2848  003798  EC89  F020         	call	_TMR2_SetInterruptHandler	;wreg free
  2849                           
  2850                           ;tasks.c: 44: TMR4_SetInterruptHandler(Timer4Tick);
  2851  00379C  0E64               	movlw	low _Timer4Tick
  2852  00379E  6E11               	movwf	TMR4_SetInterruptHandler@InterruptHandler,c
  2853  0037A0  0E3D               	movlw	high _Timer4Tick
  2854  0037A2  6E12               	movwf	TMR4_SetInterruptHandler@InterruptHandler+1,c
  2855  0037A4  EC84  F020         	call	_TMR4_SetInterruptHandler	;wreg free
  2856                           
  2857                           ;tasks.c: 45: (INTCONbits.GIE = 1);
  2858  0037A8  8EF2               	bsf	intcon,7,c	;volatile
  2859                           
  2860                           ;tasks.c: 46: (INTCONbits.PEIE = 1);
  2861  0037AA  8CF2               	bsf	intcon,6,c	;volatile
  2862                           
  2863                           ;tasks.c: 48: TC_Devices_Init();
  2864  0037AC  EC53  F01D         	call	_TC_Devices_Init	;wreg free
  2865                           
  2866                           ;tasks.c: 49: Setup_Display_LCD();
  2867  0037B0  EC11  F01A         	call	_Setup_Display_LCD	;wreg free
  2868                           
  2869                           ;tasks.c: 50: UpdateID();
  2870  0037B4  ECA9  F01F         	call	_UpdateID	;wreg free
  2871  0037B8  0012               	return		;funcret
  2872  0037BA                     __end_of_InitTasks:
  2873                           	opt stack 0
  2874                           tblptru	equ	0xFF8
  2875                           tblptrh	equ	0xFF7
  2876                           tblptrl	equ	0xFF6
  2877                           tablat	equ	0xFF5
  2878                           intcon	equ	0xFF2
  2879                           intcon2	equ	0xFF1
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           
  2883 ;; *************** function _TMR4_SetInterruptHandler *****************
  2884 ;; Defined at:
  2885 ;;		line 136 in file "mcc_generated_files/tmr4.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  InterruptHan    2   16[COMRAM] PTR void 
  2888 ;;		 -> Timer4Tick(1), TMR4_DefaultInterruptHandler(1), 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  1    wreg      void 
  2893 ;; Registers used:
  2894 ;;		wreg, status,2, status,0
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:        2 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    4
  2907 ;; This function calls:
  2908 ;;		Nothing
  2909 ;; This function is called by:
  2910 ;;		_TMR4_Initialize
  2911 ;;		_InitTasks
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text21
  2916  004108                     __ptext21:
  2917                           	opt stack 0
  2918  004108                     _TMR4_SetInterruptHandler:
  2919                           	opt stack 24
  2920                           
  2921                           ;tmr4.c: 137: TMR4_InterruptHandler = InterruptHandler;
  2922                           
  2923                           ;incstack = 0
  2924  004108  C011  F0FA         	movff	TMR4_SetInterruptHandler@InterruptHandler,_TMR4_InterruptHandler
  2925  00410C  C012  F0FB         	movff	TMR4_SetInterruptHandler@InterruptHandler+1,_TMR4_InterruptHandler+1
  2926  004110  0012               	return		;funcret
  2927  004112                     __end_of_TMR4_SetInterruptHandler:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           intcon	equ	0xFF2
  2934                           intcon2	equ	0xFF1
  2935                           postinc0	equ	0xFEE
  2936                           wreg	equ	0xFE8
  2937                           
  2938 ;; *************** function _TMR2_SetInterruptHandler *****************
  2939 ;; Defined at:
  2940 ;;		line 136 in file "mcc_generated_files/tmr2.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  InterruptHan    2   16[COMRAM] PTR void 
  2943 ;;		 -> Timer2Tick(1), TMR2_DefaultInterruptHandler(1), 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;Total ram usage:        2 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    4
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_TMR2_Initialize
  2966 ;;		_InitTasks
  2967 ;; This function uses a non-reentrant model
  2968 ;;
  2969                           
  2970                           	psect	text22
  2971  004112                     __ptext22:
  2972                           	opt stack 0
  2973  004112                     _TMR2_SetInterruptHandler:
  2974                           	opt stack 24
  2975                           
  2976                           ;tmr2.c: 137: TMR2_InterruptHandler = InterruptHandler;
  2977                           
  2978                           ;incstack = 0
  2979  004112  C011  F0FC         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  2980  004116  C012  F0FD         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  2981  00411A  0012               	return		;funcret
  2982  00411C                     __end_of_TMR2_SetInterruptHandler:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           intcon	equ	0xFF2
  2989                           intcon2	equ	0xFF1
  2990                           postinc0	equ	0xFEE
  2991                           wreg	equ	0xFE8
  2992                           
  2993 ;; *************** function _TC_Devices_Init *****************
  2994 ;; Defined at:
  2995 ;;		line 44 in file "devices.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;		None
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;Total ram usage:        0 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    6
  3016 ;; This function calls:
  3017 ;;		_MemoryInit
  3018 ;;		_MemoryIsInit
  3019 ;;		_ReadClass
  3020 ;;		_ReadID
  3021 ;;		_SaveClass
  3022 ;;		_SaveID
  3023 ;; This function is called by:
  3024 ;;		_InitTasks
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text23
  3029  003AA6                     __ptext23:
  3030                           	opt stack 0
  3031  003AA6                     _TC_Devices_Init:
  3032                           	opt stack 23
  3033                           
  3034                           ;devices.c: 46: if (MemoryIsInit())
  3035                           
  3036                           ;incstack = 0
  3037  003AA6  ECE7  F01F         	call	_MemoryIsInit	;wreg free
  3038  003AAA  0900               	iorlw	0
  3039  003AAC  B4D8               	btfsc	status,2,c
  3040  003AAE  D009               	goto	l7304
  3041                           
  3042                           ;devices.c: 47: {
  3043                           ;devices.c: 49: Me.ID = ReadID();
  3044  003AB0  EC76  F020         	call	_ReadID	;wreg free
  3045  003AB4  0101               	movlb	1	; () banked
  3046  003AB6  6F01               	movwf	(_Me+1)& (0+255),b	;volatile
  3047                           
  3048                           ;devices.c: 50: Me.Class = ReadClass();
  3049  003AB8  EC7D  F020         	call	_ReadClass	;wreg free
  3050  003ABC  0101               	movlb	1	; () banked
  3051  003ABE  6F00               	movwf	_Me& (0+255),b	;volatile
  3052                           
  3053                           ;devices.c: 51: }
  3054  003AC0  0012               	return	
  3055  003AC2                     l7304:
  3056                           
  3057                           ;devices.c: 52: else
  3058                           ;devices.c: 53: {
  3059                           ;devices.c: 55: Me.Class = 'V';
  3060  003AC2  0E56               	movlw	86
  3061  003AC4  0101               	movlb	1	; () banked
  3062  003AC6  6F00               	movwf	_Me& (0+255),b	;volatile
  3063                           
  3064                           ;devices.c: 56: Me.ID = 1;
  3065  003AC8  0E01               	movlw	1
  3066  003ACA  0101               	movlb	1	; () banked
  3067  003ACC  6F01               	movwf	(_Me+1)& (0+255),b	;volatile
  3068                           
  3069                           ; BSR set to: 1
  3070                           ;devices.c: 58: SaveClass(Me.Class);
  3071  003ACE  0101               	movlb	1	; () banked
  3072  003AD0  5100               	movf	_Me& (0+255),w,b	;volatile
  3073  003AD2  EC42  F020         	call	_SaveClass
  3074                           
  3075                           ;devices.c: 59: SaveID(Me.ID);
  3076  003AD6  0101               	movlb	1	; () banked
  3077  003AD8  5101               	movf	(_Me+1)& (0+255),w,b	;volatile
  3078  003ADA  EC38  F020         	call	_SaveID
  3079                           
  3080                           ;devices.c: 61: MemoryInit();
  3081  003ADE  EC56  F020         	call	_MemoryInit	;wreg free
  3082  003AE2  0012               	return	
  3083  003AE4                     __end_of_TC_Devices_Init:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           intcon	equ	0xFF2
  3090                           intcon2	equ	0xFF1
  3091                           postinc0	equ	0xFEE
  3092                           wreg	equ	0xFE8
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _ReadID *****************
  3096 ;; Defined at:
  3097 ;;		line 79 in file "properties.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      unsigned char 
  3104 ;; Registers used:
  3105 ;;		wreg, status,2, status,0, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 0/0
  3108 ;;		On exit  : 0/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;Total ram usage:        0 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    5
  3118 ;; This function calls:
  3119 ;;		_DATAEE_ReadByte
  3120 ;; This function is called by:
  3121 ;;		_TC_Devices_Init
  3122 ;; This function uses a non-reentrant model
  3123 ;;
  3124                           
  3125                           	psect	text24
  3126  0040EC                     __ptext24:
  3127                           	opt stack 0
  3128  0040EC                     _ReadID:
  3129                           	opt stack 23
  3130                           
  3131                           ;properties.c: 80: return DATAEE_ReadByte(0x100 + 1 + 1);
  3132                           
  3133                           ;incstack = 0
  3134  0040EC  0E01               	movlw	1
  3135  0040EE  6E12               	movwf	DATAEE_ReadByte@bAdd+1,c
  3136  0040F0  0E02               	movlw	2
  3137  0040F2  6E11               	movwf	DATAEE_ReadByte@bAdd,c
  3138  0040F4  EC00  F020         	call	_DATAEE_ReadByte	;wreg free
  3139  0040F8  0012               	return	
  3140  0040FA                     __end_of_ReadID:
  3141                           	opt stack 0
  3142                           tblptru	equ	0xFF8
  3143                           tblptrh	equ	0xFF7
  3144                           tblptrl	equ	0xFF6
  3145                           tablat	equ	0xFF5
  3146                           intcon	equ	0xFF2
  3147                           intcon2	equ	0xFF1
  3148                           postinc0	equ	0xFEE
  3149                           wreg	equ	0xFE8
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _ReadClass *****************
  3153 ;; Defined at:
  3154 ;;		line 76 in file "properties.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      unsigned char 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    5
  3175 ;; This function calls:
  3176 ;;		_DATAEE_ReadByte
  3177 ;; This function is called by:
  3178 ;;		_TC_Devices_Init
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text25
  3183  0040FA                     __ptext25:
  3184                           	opt stack 0
  3185  0040FA                     _ReadClass:
  3186                           	opt stack 23
  3187                           
  3188                           ;properties.c: 77: return DATAEE_ReadByte(0x100 + 1);
  3189                           
  3190                           ;incstack = 0
  3191  0040FA  0E01               	movlw	1
  3192  0040FC  6E12               	movwf	DATAEE_ReadByte@bAdd+1,c
  3193  0040FE  0E01               	movlw	1
  3194  004100  6E11               	movwf	DATAEE_ReadByte@bAdd,c
  3195  004102  EC00  F020         	call	_DATAEE_ReadByte	;wreg free
  3196  004106  0012               	return	
  3197  004108                     __end_of_ReadClass:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           intcon	equ	0xFF2
  3204                           intcon2	equ	0xFF1
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _MemoryIsInit *****************
  3210 ;; Defined at:
  3211 ;;		line 56 in file "properties.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      unsigned char 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;Total ram usage:        0 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    5
  3232 ;; This function calls:
  3233 ;;		_DATAEE_ReadByte
  3234 ;; This function is called by:
  3235 ;;		_TC_Devices_Init
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text26
  3240  003FCE                     __ptext26:
  3241                           	opt stack 0
  3242  003FCE                     _MemoryIsInit:
  3243                           	opt stack 23
  3244                           
  3245                           ;properties.c: 57: return (DATAEE_ReadByte(0x100) == 'Y');
  3246                           
  3247                           ;incstack = 0
  3248  003FCE  0E01               	movlw	1
  3249  003FD0  6E12               	movwf	DATAEE_ReadByte@bAdd+1,c
  3250  003FD2  0E00               	movlw	0
  3251  003FD4  6E11               	movwf	DATAEE_ReadByte@bAdd,c
  3252  003FD6  EC00  F020         	call	_DATAEE_ReadByte	;wreg free
  3253  003FDA  0A59               	xorlw	89
  3254  003FDC  A4D8               	btfss	status,2,c
  3255  003FDE  D002               	goto	u3190
  3256  003FE0  0E01               	movlw	1
  3257  003FE2  0012               	return	
  3258  003FE4                     u3190:
  3259  003FE4  0E00               	movlw	0
  3260  003FE6  0012               	return	
  3261  003FE8                     __end_of_MemoryIsInit:
  3262                           	opt stack 0
  3263                           tblptru	equ	0xFF8
  3264                           tblptrh	equ	0xFF7
  3265                           tblptrl	equ	0xFF6
  3266                           tablat	equ	0xFF5
  3267                           intcon	equ	0xFF2
  3268                           intcon2	equ	0xFF1
  3269                           postinc0	equ	0xFEE
  3270                           wreg	equ	0xFE8
  3271                           status	equ	0xFD8
  3272                           
  3273 ;; *************** function _DATAEE_ReadByte *****************
  3274 ;; Defined at:
  3275 ;;		line 188 in file "mcc_generated_files/memory.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  bAdd            2   16[COMRAM] unsigned int 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  1    wreg      unsigned char 
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        2 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    4
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_MemoryIsInit
  3300 ;;		_ReadClass
  3301 ;;		_ReadID
  3302 ;;		_ReadMotorType
  3303 ;;		_ReadTemperatureDuty
  3304 ;;		_ReadPos
  3305 ;;		_ReadOvershoot
  3306 ;;		_ReadDark
  3307 ;;		_ReadReference
  3308 ;;		_ReadProductStart
  3309 ;;		_ReadProductEnd
  3310 ;;		_ReadProductScanSpeed
  3311 ;;		_ReadHoldDutyRef
  3312 ;;		_ReadHoldDutyComp
  3313 ;;		_ReadPasosCompuerta
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text27
  3318  004000                     __ptext27:
  3319                           	opt stack 0
  3320  004000                     _DATAEE_ReadByte:
  3321                           	opt stack 23
  3322                           
  3323                           ;memory.c: 190: EEADRH = ((bAdd >> 8) & 0x03);
  3324                           
  3325                           ;incstack = 0
  3326  004000  5012               	movf	DATAEE_ReadByte@bAdd+1,w,c
  3327  004002  0B03               	andlw	3
  3328  004004  6EAA               	movwf	4010,c	;volatile
  3329                           
  3330                           ;memory.c: 191: EEADR = (bAdd & 0xFF);
  3331  004006  C011  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  3332                           
  3333                           ;memory.c: 192: EECON1bits.CFGS = 0;
  3334  00400A  9CA6               	bcf	4006,6,c	;volatile
  3335                           
  3336                           ;memory.c: 193: EECON1bits.EEPGD = 0;
  3337  00400C  9EA6               	bcf	4006,7,c	;volatile
  3338                           
  3339                           ;memory.c: 194: EECON1bits.RD = 1;
  3340  00400E  80A6               	bsf	4006,0,c	;volatile
  3341                           
  3342                           ;memory.c: 195: __nop();
  3343  004010  F000               	nop	
  3344                           
  3345                           ;memory.c: 196: __nop();
  3346  004012  F000               	nop	
  3347                           
  3348                           ;memory.c: 198: return (EEDATA);
  3349  004014  50A8               	movf	4008,w,c	;volatile
  3350  004016  0012               	return	
  3351  004018                     __end_of_DATAEE_ReadByte:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           intcon	equ	0xFF2
  3358                           intcon2	equ	0xFF1
  3359                           postinc0	equ	0xFEE
  3360                           wreg	equ	0xFE8
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _MemoryInit *****************
  3364 ;; Defined at:
  3365 ;;		line 59 in file "properties.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2, status,0, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;Total ram usage:        0 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    5
  3386 ;; This function calls:
  3387 ;;		_DATAEE_WriteByte
  3388 ;; This function is called by:
  3389 ;;		_TC_Devices_Init
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text28
  3394  0040AC                     __ptext28:
  3395                           	opt stack 0
  3396  0040AC                     _MemoryInit:
  3397                           	opt stack 23
  3398                           
  3399                           ;properties.c: 60: DATAEE_WriteByte(0x100, 'Y');
  3400                           
  3401                           ;incstack = 0
  3402  0040AC  0E01               	movlw	1
  3403  0040AE  6E12               	movwf	DATAEE_WriteByte@bAdd+1,c
  3404  0040B0  0E00               	movlw	0
  3405  0040B2  6E11               	movwf	DATAEE_WriteByte@bAdd,c
  3406  0040B4  0E59               	movlw	89
  3407  0040B6  6E13               	movwf	DATAEE_WriteByte@bData,c
  3408  0040B8  ECAE  F01D         	call	_DATAEE_WriteByte	;wreg free
  3409  0040BC  0012               	return		;funcret
  3410  0040BE                     __end_of_MemoryInit:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           intcon	equ	0xFF2
  3417                           intcon2	equ	0xFF1
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function _Setup_Display_LCD *****************
  3423 ;; Defined at:
  3424 ;;		line 64 in file "tasks.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;		None
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;Total ram usage:        0 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    9
  3445 ;; This function calls:
  3446 ;;		_LCD_Init
  3447 ;;		_LCD_Write
  3448 ;; This function is called by:
  3449 ;;		_InitTasks
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text29
  3454  003422                     __ptext29:
  3455                           	opt stack 0
  3456  003422                     _Setup_Display_LCD:
  3457                           	opt stack 20
  3458                           
  3459                           ;tasks.c: 66: LCD_Init();
  3460                           
  3461                           ;incstack = 0
  3462  003422  EC93  F020         	call	_LCD_Init	;wreg free
  3463                           
  3464                           ;tasks.c: 70: LCD_Write("FW: BF____ HW: ____ ", 1, 0);
  3465  003426  0E4A               	movlw	low STR_1
  3466  003428  6E1B               	movwf	LCD_Write@string,c
  3467  00342A  0E10               	movlw	high STR_1
  3468  00342C  6E1C               	movwf	LCD_Write@string+1,c
  3469  00342E  0E01               	movlw	1
  3470  003430  6E1D               	movwf	LCD_Write@linea,c
  3471  003432  0E00               	movlw	0
  3472  003434  6E1E               	movwf	LCD_Write@offset,c
  3473  003436  EC82  F01C         	call	_LCD_Write	;wreg free
  3474                           
  3475                           ;tasks.c: 71: LCD_Write("ID: __ Posicion: __ ", 2, 0);
  3476  00343A  0E20               	movlw	low STR_2
  3477  00343C  6E1B               	movwf	LCD_Write@string,c
  3478  00343E  0E10               	movlw	high STR_2
  3479  003440  6E1C               	movwf	LCD_Write@string+1,c
  3480  003442  0E02               	movlw	2
  3481  003444  6E1D               	movwf	LCD_Write@linea,c
  3482  003446  0E00               	movlw	0
  3483  003448  6E1E               	movwf	LCD_Write@offset,c
  3484  00344A  EC82  F01C         	call	_LCD_Write	;wreg free
  3485                           
  3486                           ;tasks.c: 72: LCD_Write("Pasos motor: _____  ", 3, 0);
  3487  00344E  0E0B               	movlw	low STR_3
  3488  003450  6E1B               	movwf	LCD_Write@string,c
  3489  003452  0E10               	movlw	high STR_3
  3490  003454  6E1C               	movwf	LCD_Write@string+1,c
  3491  003456  0E03               	movlw	3
  3492  003458  6E1D               	movwf	LCD_Write@linea,c
  3493  00345A  0E00               	movlw	0
  3494  00345C  6E1E               	movwf	LCD_Write@offset,c
  3495  00345E  EC82  F01C         	call	_LCD_Write	;wreg free
  3496                           
  3497                           ;tasks.c: 73: LCD_Write("SEN A: ____ B: ____ ", 4, 0);
  3498  003462  0E35               	movlw	low STR_4
  3499  003464  6E1B               	movwf	LCD_Write@string,c
  3500  003466  0E10               	movlw	high STR_4
  3501  003468  6E1C               	movwf	LCD_Write@string+1,c
  3502  00346A  0E04               	movlw	4
  3503  00346C  6E1D               	movwf	LCD_Write@linea,c
  3504  00346E  0E00               	movlw	0
  3505  003470  6E1E               	movwf	LCD_Write@offset,c
  3506  003472  EC82  F01C         	call	_LCD_Write	;wreg free
  3507                           
  3508                           ;tasks.c: 74: LCD_Write(VERSION_FIRMWARE, 1, 6);
  3509  003476  0E07               	movlw	low _VERSION_FIRMWARE
  3510  003478  6E1B               	movwf	LCD_Write@string,c
  3511  00347A  0E10               	movlw	high _VERSION_FIRMWARE
  3512  00347C  6E1C               	movwf	LCD_Write@string+1,c
  3513  00347E  0E01               	movlw	1
  3514  003480  6E1D               	movwf	LCD_Write@linea,c
  3515  003482  0E06               	movlw	6
  3516  003484  6E1E               	movwf	LCD_Write@offset,c
  3517  003486  EC82  F01C         	call	_LCD_Write	;wreg free
  3518                           
  3519                           ;tasks.c: 75: LCD_Write(VERSION_HARDWARE, 1, 15);
  3520  00348A  0E01               	movlw	low _VERSION_HARDWARE
  3521  00348C  6E1B               	movwf	LCD_Write@string,c
  3522  00348E  0E10               	movlw	high _VERSION_HARDWARE
  3523  003490  6E1C               	movwf	LCD_Write@string+1,c
  3524  003492  0E01               	movlw	1
  3525  003494  6E1D               	movwf	LCD_Write@linea,c
  3526  003496  0E0F               	movlw	15
  3527  003498  6E1E               	movwf	LCD_Write@offset,c
  3528  00349A  EC82  F01C         	call	_LCD_Write	;wreg free
  3529  00349E  0012               	return		;funcret
  3530  0034A0                     __end_of_Setup_Display_LCD:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           intcon	equ	0xFF2
  3537                           intcon2	equ	0xFF1
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _LCD_Init *****************
  3543 ;; Defined at:
  3544 ;;		line 58 in file "displayLCD20x4.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      void 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    8
  3565 ;; This function calls:
  3566 ;;		_lcd_init_4d
  3567 ;; This function is called by:
  3568 ;;		_Setup_Display_LCD
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text30
  3573  004126                     __ptext30:
  3574                           	opt stack 0
  3575  004126                     _LCD_Init:
  3576                           	opt stack 20
  3577                           
  3578                           ;incstack = 0
  3579                           ;displayLCD20x4.c: 60: do { LATE0 = 1; } while(0);
  3580  004126  808D               	bsf	3981,0,c	;volatile
  3581                           
  3582                           ;displayLCD20x4.c: 63: lcd_init_4d();
  3583  004128  EC4E  F017         	call	_lcd_init_4d	;wreg free
  3584  00412C  0012               	return		;funcret
  3585  00412E                     __end_of_LCD_Init:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           intcon	equ	0xFF2
  3592                           intcon2	equ	0xFF1
  3593                           postinc0	equ	0xFEE
  3594                           wreg	equ	0xFE8
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _lcd_init_4d *****************
  3598 ;; Defined at:
  3599 ;;		line 143 in file "displayLCD20x4.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;		None
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;		None
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0, cstack
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;Total ram usage:        0 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    7
  3620 ;; This function calls:
  3621 ;;		_Delay
  3622 ;;		_lcd_write_4
  3623 ;;		_lcd_write_instruction_4d
  3624 ;; This function is called by:
  3625 ;;		_LCD_Init
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text31
  3630  002E9C                     __ptext31:
  3631                           	opt stack 0
  3632  002E9C                     _lcd_init_4d:
  3633                           	opt stack 20
  3634                           
  3635                           ;displayLCD20x4.c: 146: Delay(1 * ((unsigned long)(((unsigned long)(((unsigned long)(2))
      +                           * 10)) * 100)));
  3636                           
  3637                           ;incstack = 0
  3638  002E9C  0E07               	movlw	7
  3639  002E9E  6E12               	movwf	Delay@Timeout+1,c
  3640  002EA0  0ED0               	movlw	208
  3641  002EA2  6E11               	movwf	Delay@Timeout,c
  3642  002EA4  ECB9  F01F         	call	_Delay	;wreg free
  3643                           
  3644                           ;displayLCD20x4.c: 162: do { LATE1 = 0; } while(0);
  3645  002EA8  928D               	bcf	3981,1,c	;volatile
  3646                           
  3647                           ;displayLCD20x4.c: 163: do { LATA5 = 0; } while(0);
  3648  002EAA  9A89               	bcf	3977,5,c	;volatile
  3649                           
  3650                           ;displayLCD20x4.c: 166: lcd_write_4(0b00110000);
  3651  002EAC  0E30               	movlw	48
  3652  002EAE  ECA7  F01C         	call	_lcd_write_4
  3653                           
  3654                           ;displayLCD20x4.c: 167: Delay(10 * ((unsigned long)(((unsigned long)(2)) * 10)));
  3655  002EB2  0E00               	movlw	0
  3656  002EB4  6E12               	movwf	Delay@Timeout+1,c
  3657  002EB6  0EC8               	movlw	200
  3658  002EB8  6E11               	movwf	Delay@Timeout,c
  3659  002EBA  ECB9  F01F         	call	_Delay	;wreg free
  3660                           
  3661                           ;displayLCD20x4.c: 169: lcd_write_4(0b00110000);
  3662  002EBE  0E30               	movlw	48
  3663  002EC0  ECA7  F01C         	call	_lcd_write_4
  3664                           
  3665                           ;displayLCD20x4.c: 170: Delay(2 * ((unsigned long)(2)));
  3666  002EC4  0E00               	movlw	0
  3667  002EC6  6E12               	movwf	Delay@Timeout+1,c
  3668  002EC8  0E04               	movlw	4
  3669  002ECA  6E11               	movwf	Delay@Timeout,c
  3670  002ECC  ECB9  F01F         	call	_Delay	;wreg free
  3671                           
  3672                           ;displayLCD20x4.c: 172: lcd_write_4(0b00110000);
  3673  002ED0  0E30               	movlw	48
  3674  002ED2  ECA7  F01C         	call	_lcd_write_4
  3675                           
  3676                           ;displayLCD20x4.c: 173: Delay(1 * ((unsigned long)(2)));
  3677  002ED6  0E00               	movlw	0
  3678  002ED8  6E12               	movwf	Delay@Timeout+1,c
  3679  002EDA  0E02               	movlw	2
  3680  002EDC  6E11               	movwf	Delay@Timeout,c
  3681  002EDE  ECB9  F01F         	call	_Delay	;wreg free
  3682                           
  3683                           ;displayLCD20x4.c: 180: lcd_write_4(0b00101000);
  3684  002EE2  0E28               	movlw	40
  3685  002EE4  ECA7  F01C         	call	_lcd_write_4
  3686                           
  3687                           ;displayLCD20x4.c: 181: Delay(1 * ((unsigned long)(2)));
  3688  002EE8  0E00               	movlw	0
  3689  002EEA  6E12               	movwf	Delay@Timeout+1,c
  3690  002EEC  0E02               	movlw	2
  3691  002EEE  6E11               	movwf	Delay@Timeout,c
  3692  002EF0  ECB9  F01F         	call	_Delay	;wreg free
  3693                           
  3694                           ;displayLCD20x4.c: 184: lcd_write_instruction_4d(0b00101000);
  3695  002EF4  0E28               	movlw	40
  3696  002EF6  EC22  F020         	call	_lcd_write_instruction_4d
  3697                           
  3698                           ;displayLCD20x4.c: 185: Delay(1 * ((unsigned long)(2)));
  3699  002EFA  0E00               	movlw	0
  3700  002EFC  6E12               	movwf	Delay@Timeout+1,c
  3701  002EFE  0E02               	movlw	2
  3702  002F00  6E11               	movwf	Delay@Timeout,c
  3703  002F02  ECB9  F01F         	call	_Delay	;wreg free
  3704                           
  3705                           ;displayLCD20x4.c: 192: lcd_write_instruction_4d(0b00001000);
  3706  002F06  0E08               	movlw	8
  3707  002F08  EC22  F020         	call	_lcd_write_instruction_4d
  3708                           
  3709                           ;displayLCD20x4.c: 193: Delay(1 * ((unsigned long)(2)));
  3710  002F0C  0E00               	movlw	0
  3711  002F0E  6E12               	movwf	Delay@Timeout+1,c
  3712  002F10  0E02               	movlw	2
  3713  002F12  6E11               	movwf	Delay@Timeout,c
  3714  002F14  ECB9  F01F         	call	_Delay	;wreg free
  3715                           
  3716                           ;displayLCD20x4.c: 196: lcd_write_instruction_4d(0b00000001);
  3717  002F18  0E01               	movlw	1
  3718  002F1A  EC22  F020         	call	_lcd_write_instruction_4d
  3719                           
  3720                           ;displayLCD20x4.c: 197: Delay(2 * ((unsigned long)(((unsigned long)(2)) * 10)));
  3721  002F1E  0E00               	movlw	0
  3722  002F20  6E12               	movwf	Delay@Timeout+1,c
  3723  002F22  0E28               	movlw	40
  3724  002F24  6E11               	movwf	Delay@Timeout,c
  3725  002F26  ECB9  F01F         	call	_Delay	;wreg free
  3726                           
  3727                           ;displayLCD20x4.c: 200: lcd_write_instruction_4d(0b00000110);
  3728  002F2A  0E06               	movlw	6
  3729  002F2C  EC22  F020         	call	_lcd_write_instruction_4d
  3730                           
  3731                           ;displayLCD20x4.c: 201: Delay(1 * ((unsigned long)(2)));
  3732  002F30  0E00               	movlw	0
  3733  002F32  6E12               	movwf	Delay@Timeout+1,c
  3734  002F34  0E02               	movlw	2
  3735  002F36  6E11               	movwf	Delay@Timeout,c
  3736  002F38  ECB9  F01F         	call	_Delay	;wreg free
  3737                           
  3738                           ;displayLCD20x4.c: 207: lcd_write_instruction_4d(0b00001100);
  3739  002F3C  0E0C               	movlw	12
  3740  002F3E  EC22  F020         	call	_lcd_write_instruction_4d
  3741                           
  3742                           ;displayLCD20x4.c: 208: Delay(1 * ((unsigned long)(2)));
  3743  002F42  0E00               	movlw	0
  3744  002F44  6E12               	movwf	Delay@Timeout+1,c
  3745  002F46  0E02               	movlw	2
  3746  002F48  6E11               	movwf	Delay@Timeout,c
  3747  002F4A  ECB9  F01F         	call	_Delay	;wreg free
  3748  002F4E  0012               	return		;funcret
  3749  002F50                     __end_of_lcd_init_4d:
  3750                           	opt stack 0
  3751                           tblptru	equ	0xFF8
  3752                           tblptrh	equ	0xFF7
  3753                           tblptrl	equ	0xFF6
  3754                           tablat	equ	0xFF5
  3755                           intcon	equ	0xFF2
  3756                           intcon2	equ	0xFF1
  3757                           postinc0	equ	0xFEE
  3758                           wreg	equ	0xFE8
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _I2C_ProcessMessages *****************
  3762 ;; Defined at:
  3763 ;;		line 117 in file "I2C.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;Total ram usage:        0 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:   13
  3784 ;; This function calls:
  3785 ;;		_I2C_ProcessPacket
  3786 ;;		___awmod
  3787 ;; This function is called by:
  3788 ;;		_main
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text32
  3793  003996                     __ptext32:
  3794                           	opt stack 0
  3795  003996                     _I2C_ProcessMessages:
  3796                           	opt stack 17
  3797                           
  3798                           ;I2C.c: 120: while (I2C_QueueOutPointer != I2C_QueueInPointer)
  3799                           
  3800                           ;incstack = 0
  3801  003996  D01D               	goto	l7432
  3802  003998                     l7428:
  3803                           
  3804                           ;I2C.c: 121: {
  3805                           ;I2C.c: 122: if (I2C_ProcessPacket(&I2CQueue[I2C_QueueOutPointer]))
  3806  003998  5041               	movf	_I2C_QueueOutPointer,w,c
  3807  00399A  0D10               	mullw	16
  3808  00399C  0E00               	movlw	low _I2CQueue
  3809  00399E  24F3               	addwf	prodl,w,c
  3810  0039A0  0100               	movlb	0	; () banked
  3811  0039A2  6FF7               	movwf	I2C_ProcessPacket@msg& (0+255),b
  3812  0039A4  0E05               	movlw	high _I2CQueue
  3813  0039A6  20F4               	addwfc	prodh,w,c
  3814  0039A8  0100               	movlb	0	; () banked
  3815  0039AA  6FF8               	movwf	(I2C_ProcessPacket@msg+1)& (0+255),b
  3816  0039AC  EC0F  F016         	call	_I2C_ProcessPacket	;wreg free
  3817  0039B0  0900               	iorlw	0
  3818  0039B2  B4D8               	btfsc	status,2,c
  3819  0039B4  0012               	return	
  3820                           
  3821                           ;I2C.c: 123: {
  3822                           ;I2C.c: 125: I2C_QueueOutPointer = (I2C_QueueOutPointer + 1) % 10;
  3823  0039B6  0E01               	movlw	1
  3824  0039B8  2441               	addwf	_I2C_QueueOutPointer,w,c
  3825  0039BA  6E11               	movwf	___awmod@dividend,c
  3826  0039BC  6A12               	clrf	___awmod@dividend+1,c
  3827  0039BE  0E00               	movlw	0
  3828  0039C0  2212               	addwfc	___awmod@dividend+1,f,c
  3829  0039C2  0E00               	movlw	0
  3830  0039C4  6E14               	movwf	___awmod@divisor+1,c
  3831  0039C6  0E0A               	movlw	10
  3832  0039C8  6E13               	movwf	___awmod@divisor,c
  3833  0039CA  EC3D  F01B         	call	___awmod	;wreg free
  3834  0039CE  5011               	movf	?___awmod,w,c
  3835  0039D0  6E41               	movwf	_I2C_QueueOutPointer,c
  3836  0039D2                     l7432:
  3837  0039D2  5042               	movf	_I2C_QueueInPointer,w,c
  3838  0039D4  1841               	xorwf	_I2C_QueueOutPointer,w,c
  3839  0039D6  B4D8               	btfsc	status,2,c
  3840  0039D8  0012               	return	
  3841  0039DA  D7DE               	goto	l7428
  3842  0039DC                     __end_of_I2C_ProcessMessages:
  3843                           	opt stack 0
  3844                           tblptru	equ	0xFF8
  3845                           tblptrh	equ	0xFF7
  3846                           tblptrl	equ	0xFF6
  3847                           tablat	equ	0xFF5
  3848                           prodh	equ	0xFF4
  3849                           prodl	equ	0xFF3
  3850                           intcon	equ	0xFF2
  3851                           intcon2	equ	0xFF1
  3852                           postinc0	equ	0xFEE
  3853                           wreg	equ	0xFE8
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _I2C_ProcessPacket *****************
  3857 ;; Defined at:
  3858 ;;		line 223 in file "devices.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  msg             2   29[BANK0 ] PTR struct .
  3861 ;;		 -> I2CQueue(160), 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  result          1   31[BANK0 ] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      unsigned char 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;Total ram usage:        3 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:   12
  3880 ;; This function calls:
  3881 ;;		_Process4TO20Transmitter
  3882 ;;		_ProcessBotones
  3883 ;;		_ProcessCompuerta
  3884 ;;		_ProcessDevice
  3885 ;;		_ProcessForward
  3886 ;;		_ProcessPaPReferencia
  3887 ;;		_ProcessSensores
  3888 ;; This function is called by:
  3889 ;;		_I2C_ProcessMessages
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text33
  3894  002C1E                     __ptext33:
  3895                           	opt stack 0
  3896  002C1E                     _I2C_ProcessPacket:
  3897                           	opt stack 17
  3898                           
  3899                           ;devices.c: 225: unsigned char result = 1;
  3900                           
  3901                           ;incstack = 0
  3902  002C1E  0E01               	movlw	1
  3903  002C20  0100               	movlb	0	; () banked
  3904  002C22  6FF9               	movwf	I2C_ProcessPacket@result& (0+255),b
  3905                           
  3906                           ;devices.c: 227: switch (msg->Direction)
  3907  002C24  D057               	goto	l7366
  3908  002C26                     l7344:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;devices.c: 235: result = ProcessDevice(msg);
  3912  002C26  C0F7  F0EB         	movff	I2C_ProcessPacket@msg,ProcessDevice@msg
  3913  002C2A  C0F8  F0EC         	movff	I2C_ProcessPacket@msg+1,ProcessDevice@msg+1
  3914  002C2E  EC9A  F010         	call	_ProcessDevice	;wreg free
  3915  002C32  D04D               	goto	L6
  3916  002C34                     l7346:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;devices.c: 238: result = ProcessPaPReferencia(msg);
  3920  002C34  C0F7  F035         	movff	I2C_ProcessPacket@msg,ProcessPaPReferencia@msg
  3921  002C38  C0F8  F036         	movff	I2C_ProcessPacket@msg+1,ProcessPaPReferencia@msg+1
  3922  002C3C  EC94  F00F         	call	_ProcessPaPReferencia	;wreg free
  3923  002C40  D046               	goto	L6
  3924  002C42                     l7348:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;devices.c: 241: result = ProcessCompuerta(msg);
  3928  002C42  C0F7  F035         	movff	I2C_ProcessPacket@msg,ProcessCompuerta@msg
  3929  002C46  C0F8  F036         	movff	I2C_ProcessPacket@msg+1,ProcessCompuerta@msg+1
  3930  002C4A  EC26  F015         	call	_ProcessCompuerta	;wreg free
  3931  002C4E  D03F               	goto	L6
  3932  002C50                     l7350:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;devices.c: 244: result = ProcessSensores(msg);
  3936  002C50  C0F7  F035         	movff	I2C_ProcessPacket@msg,ProcessSensores@msg
  3937  002C54  C0F8  F036         	movff	I2C_ProcessPacket@msg+1,ProcessSensores@msg+1
  3938  002C58  EC81  F016         	call	_ProcessSensores	;wreg free
  3939  002C5C  D038               	goto	L6
  3940  002C5E                     l7352:
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;devices.c: 247: result = ProcessBotones(msg);
  3944  002C5E  C0F7  F035         	movff	I2C_ProcessPacket@msg,ProcessBotones@msg
  3945  002C62  C0F8  F036         	movff	I2C_ProcessPacket@msg+1,ProcessBotones@msg+1
  3946  002C66  EC03  F01B         	call	_ProcessBotones	;wreg free
  3947  002C6A  D031               	goto	L6
  3948  002C6C                     l7354:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;devices.c: 251: result = Process4TO20Transmitter(msg);
  3952  002C6C  C0F7  F0F1         	movff	I2C_ProcessPacket@msg,Process4TO20Transmitter@msg
  3953  002C70  C0F8  F0F2         	movff	I2C_ProcessPacket@msg+1,Process4TO20Transmitter@msg+1
  3954  002C74  EC30  F008         	call	_Process4TO20Transmitter	;wreg free
  3955  002C78  D02A               	goto	L6
  3956  002C7A                     l7358:
  3957                           
  3958                           ; BSR set to: 0
  3959  002C7A  0100               	movlb	0	; () banked
  3960  002C7C  EE20 F004          	lfsr	2,4
  3961  002C80  51F7               	movf	I2C_ProcessPacket@msg& (0+255),w,b
  3962  002C82  26D9               	addwf	fsr2l,f,c
  3963  002C84  51F8               	movf	(I2C_ProcessPacket@msg+1)& (0+255),w,b
  3964  002C86  22DA               	addwfc	fsr2h,f,c
  3965  002C88  50DF               	movf	indf2,w,c
  3966                           
  3967                           ; Switch size 1, requested type "space"
  3968                           ; Number of cases is 6, Range of values is 63 to 88
  3969                           ; switch strategies available:
  3970                           ; Name         Instructions Cycles
  3971                           ; simple_byte           19    10 (average)
  3972                           ;	Chosen strategy is simple_byte
  3973  002C8A  0A3F               	xorlw	63	; case 63
  3974  002C8C  B4D8               	btfsc	status,2,c
  3975  002C8E  D7CB               	goto	l7344
  3976  002C90  0A7D               	xorlw	125	; case 66
  3977  002C92  B4D8               	btfsc	status,2,c
  3978  002C94  D7E4               	goto	l7352
  3979  002C96  0A01               	xorlw	1	; case 67
  3980  002C98  B4D8               	btfsc	status,2,c
  3981  002C9A  D7D3               	goto	l7348
  3982  002C9C  0A11               	xorlw	17	; case 82
  3983  002C9E  B4D8               	btfsc	status,2,c
  3984  002CA0  D7C9               	goto	l7346
  3985  002CA2  0A01               	xorlw	1	; case 83
  3986  002CA4  B4D8               	btfsc	status,2,c
  3987  002CA6  D7D4               	goto	l7350
  3988  002CA8  0A0B               	xorlw	11	; case 88
  3989  002CAA  B4D8               	btfsc	status,2,c
  3990  002CAC  D7DF               	goto	l7354
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;devices.c: 257: break;
  3994  002CAE  D026               	goto	l7368
  3995  002CB0                     l7360:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;devices.c: 259: msg->Direction = 0x10;
  3999  002CB0  0100               	movlb	0	; () banked
  4000  002CB2  EE20 F001          	lfsr	2,1
  4001  002CB6  51F7               	movf	I2C_ProcessPacket@msg& (0+255),w,b
  4002  002CB8  26D9               	addwf	fsr2l,f,c
  4003  002CBA  51F8               	movf	(I2C_ProcessPacket@msg+1)& (0+255),w,b
  4004  002CBC  22DA               	addwfc	fsr2h,f,c
  4005  002CBE  0E10               	movlw	16
  4006  002CC0  6EDF               	movwf	indf2,c
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;devices.c: 260: result = ProcessForward(msg);
  4010  002CC2  C0F7  F035         	movff	I2C_ProcessPacket@msg,ProcessForward@msg
  4011  002CC6  C0F8  F036         	movff	I2C_ProcessPacket@msg+1,ProcessForward@msg+1
  4012  002CCA  ECEB  F016         	call	_ProcessForward	;wreg free
  4013  002CCE                     L6:
  4014  002CCE  0100               	movlb	0	; () banked
  4015  002CD0  6FF9               	movwf	I2C_ProcessPacket@result& (0+255),b
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;devices.c: 268: }
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;devices.c: 267: break;
  4022                           
  4023                           ;devices.c: 266: default:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;devices.c: 263: case 0x10:
  4027                           ;devices.c: 265: break;
  4028                           
  4029                           ; BSR set to: 0
  4030                           
  4031                           ;devices.c: 262: case 0x30:
  4032                           
  4033                           ;devices.c: 261: break;
  4034  002CD2  D014               	goto	l7368
  4035  002CD4                     l7366:
  4036                           
  4037                           ; BSR set to: 0
  4038  002CD4  0100               	movlb	0	; () banked
  4039  002CD6  EE20 F001          	lfsr	2,1
  4040  002CDA  51F7               	movf	I2C_ProcessPacket@msg& (0+255),w,b
  4041  002CDC  26D9               	addwf	fsr2l,f,c
  4042  002CDE  51F8               	movf	(I2C_ProcessPacket@msg+1)& (0+255),w,b
  4043  002CE0  22DA               	addwfc	fsr2h,f,c
  4044  002CE2  50DF               	movf	indf2,w,c
  4045                           
  4046                           ; Switch size 1, requested type "space"
  4047                           ; Number of cases is 4, Range of values is 16 to 64
  4048                           ; switch strategies available:
  4049                           ; Name         Instructions Cycles
  4050                           ; simple_byte           13     7 (average)
  4051                           ;	Chosen strategy is simple_byte
  4052  002CE4  0A10               	xorlw	16	; case 16
  4053  002CE6  B4D8               	btfsc	status,2,c
  4054  002CE8  D009               	goto	l7368
  4055  002CEA  0A30               	xorlw	48	; case 32
  4056  002CEC  B4D8               	btfsc	status,2,c
  4057  002CEE  D7C5               	goto	l7358
  4058  002CF0  0A10               	xorlw	16	; case 48
  4059  002CF2  B4D8               	btfsc	status,2,c
  4060  002CF4  D003               	goto	l7368
  4061  002CF6  0A70               	xorlw	112	; case 64
  4062  002CF8  B4D8               	btfsc	status,2,c
  4063  002CFA  D7DA               	goto	l7360
  4064  002CFC                     l7368:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;devices.c: 269: return result;
  4068  002CFC  0100               	movlb	0	; () banked
  4069  002CFE  51F9               	movf	I2C_ProcessPacket@result& (0+255),w,b
  4070  002D00  0012               	return	
  4071  002D02                     __end_of_I2C_ProcessPacket:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           intcon2	equ	0xFF1
  4081                           postinc0	equ	0xFEE
  4082                           wreg	equ	0xFE8
  4083                           indf2	equ	0xFDF
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _ProcessSensores *****************
  4089 ;; Defined at:
  4090 ;;		line 654 in file "devices.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  msg             2   52[COMRAM] PTR struct .
  4093 ;;		 -> I2CQueue(160), UARTQueue(160), 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  result          1   54[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      unsigned char 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;Total ram usage:        3 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    9
  4112 ;; This function calls:
  4113 ;;		_Send_NAK
  4114 ;; This function is called by:
  4115 ;;		_I2C_ProcessPacket
  4116 ;;		_UART_ProcessPacket
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text34
  4121  002D02                     __ptext34:
  4122                           	opt stack 0
  4123  002D02                     _ProcessSensores:
  4124                           	opt stack 19
  4125                           
  4126                           ;devices.c: 656: unsigned char result = 1;
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;incstack = 0
  4130  002D02  0E01               	movlw	1
  4131  002D04  6E37               	movwf	ProcessSensores@result,c
  4132                           
  4133                           ;devices.c: 659: switch (msg->CommandL)
  4134  002D06  D048               	goto	l7140
  4135  002D08                     l7122:
  4136                           
  4137                           ;devices.c: 662: Send_NAK(msg, '6');
  4138  002D08  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4139  002D0C  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4140  002D10  0E36               	movlw	54
  4141  002D12  6E34               	movwf	Send_NAK@errCode,c
  4142  002D14  EC75  F01B         	call	_Send_NAK	;wreg free
  4143                           
  4144                           ;devices.c: 663: break;
  4145  002D18  D05C               	goto	l7142
  4146  002D1A                     l7124:
  4147                           
  4148                           ;devices.c: 665: Send_NAK(msg, '6');
  4149  002D1A  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4150  002D1E  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4151  002D22  0E36               	movlw	54
  4152  002D24  6E34               	movwf	Send_NAK@errCode,c
  4153  002D26  EC75  F01B         	call	_Send_NAK	;wreg free
  4154                           
  4155                           ;devices.c: 666: break;
  4156  002D2A  D053               	goto	l7142
  4157  002D2C                     l7126:
  4158                           
  4159                           ;devices.c: 668: Send_NAK(msg, '6');
  4160  002D2C  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4161  002D30  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4162  002D34  0E36               	movlw	54
  4163  002D36  6E34               	movwf	Send_NAK@errCode,c
  4164  002D38  EC75  F01B         	call	_Send_NAK	;wreg free
  4165                           
  4166                           ;devices.c: 669: break;
  4167  002D3C  D04A               	goto	l7142
  4168  002D3E                     l7128:
  4169                           
  4170                           ;devices.c: 671: Send_NAK(msg, '6');
  4171  002D3E  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4172  002D42  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4173  002D46  0E36               	movlw	54
  4174  002D48  6E34               	movwf	Send_NAK@errCode,c
  4175  002D4A  EC75  F01B         	call	_Send_NAK	;wreg free
  4176                           
  4177                           ;devices.c: 672: break;
  4178  002D4E  D041               	goto	l7142
  4179  002D50                     l7130:
  4180                           
  4181                           ;devices.c: 674: Send_NAK(msg, '6');
  4182  002D50  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4183  002D54  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4184  002D58  0E36               	movlw	54
  4185  002D5A  6E34               	movwf	Send_NAK@errCode,c
  4186  002D5C  EC75  F01B         	call	_Send_NAK	;wreg free
  4187                           
  4188                           ;devices.c: 675: break;
  4189  002D60  D038               	goto	l7142
  4190  002D62                     l7132:
  4191                           
  4192                           ;devices.c: 677: Send_NAK(msg, '6');
  4193  002D62  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4194  002D66  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4195  002D6A  0E36               	movlw	54
  4196  002D6C  6E34               	movwf	Send_NAK@errCode,c
  4197  002D6E  EC75  F01B         	call	_Send_NAK	;wreg free
  4198                           
  4199                           ;devices.c: 678: break;
  4200  002D72  D02F               	goto	l7142
  4201  002D74                     l7134:
  4202                           
  4203                           ;devices.c: 680: Send_NAK(msg, '6');
  4204  002D74  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4205  002D78  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4206  002D7C  0E36               	movlw	54
  4207  002D7E  6E34               	movwf	Send_NAK@errCode,c
  4208  002D80  EC75  F01B         	call	_Send_NAK	;wreg free
  4209                           
  4210                           ;devices.c: 681: break;
  4211  002D84  D026               	goto	l7142
  4212  002D86                     l7136:
  4213                           
  4214                           ;devices.c: 683: Send_NAK(msg, '5');
  4215  002D86  C035  F032         	movff	ProcessSensores@msg,Send_NAK@msg
  4216  002D8A  C036  F033         	movff	ProcessSensores@msg+1,Send_NAK@msg+1
  4217  002D8E  0E35               	movlw	53
  4218  002D90  6E34               	movwf	Send_NAK@errCode,c
  4219  002D92  EC75  F01B         	call	_Send_NAK	;wreg free
  4220                           
  4221                           ;devices.c: 685: }
  4222                           
  4223                           ;devices.c: 684: break;
  4224  002D96  D01D               	goto	l7142
  4225  002D98                     l7140:
  4226  002D98  EE20 F005          	lfsr	2,5
  4227  002D9C  5035               	movf	ProcessSensores@msg,w,c
  4228  002D9E  26D9               	addwf	fsr2l,f,c
  4229  002DA0  5036               	movf	ProcessSensores@msg+1,w,c
  4230  002DA2  22DA               	addwfc	fsr2h,f,c
  4231  002DA4  50DF               	movf	indf2,w,c
  4232                           
  4233                           ; Switch size 1, requested type "space"
  4234                           ; Number of cases is 7, Range of values is 63 to 84
  4235                           ; switch strategies available:
  4236                           ; Name         Instructions Cycles
  4237                           ; simple_byte           22    12 (average)
  4238                           ;	Chosen strategy is simple_byte
  4239  002DA6  0A3F               	xorlw	63	; case 63
  4240  002DA8  B4D8               	btfsc	status,2,c
  4241  002DAA  D7AE               	goto	l7122
  4242  002DAC  0A7C               	xorlw	124	; case 67
  4243  002DAE  B4D8               	btfsc	status,2,c
  4244  002DB0  D7BD               	goto	l7126
  4245  002DB2  0A08               	xorlw	8	; case 75
  4246  002DB4  B4D8               	btfsc	status,2,c
  4247  002DB6  D7B1               	goto	l7124
  4248  002DB8  0A07               	xorlw	7	; case 76
  4249  002DBA  B4D8               	btfsc	status,2,c
  4250  002DBC  D7C0               	goto	l7128
  4251  002DBE  0A01               	xorlw	1	; case 77
  4252  002DC0  B4D8               	btfsc	status,2,c
  4253  002DC2  D7C6               	goto	l7130
  4254  002DC4  0A1F               	xorlw	31	; case 82
  4255  002DC6  B4D8               	btfsc	status,2,c
  4256  002DC8  D7CC               	goto	l7132
  4257  002DCA  0A06               	xorlw	6	; case 84
  4258  002DCC  B4D8               	btfsc	status,2,c
  4259  002DCE  D7D2               	goto	l7134
  4260  002DD0  D7DA               	goto	l7136
  4261  002DD2                     l7142:
  4262                           
  4263                           ;devices.c: 686: return result;
  4264  002DD2  5037               	movf	ProcessSensores@result,w,c
  4265  002DD4  0012               	return	
  4266  002DD6                     __end_of_ProcessSensores:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           prodh	equ	0xFF4
  4273                           prodl	equ	0xFF3
  4274                           intcon	equ	0xFF2
  4275                           intcon2	equ	0xFF1
  4276                           postinc0	equ	0xFEE
  4277                           wreg	equ	0xFE8
  4278                           indf2	equ	0xFDF
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _ProcessPaPReferencia *****************
  4284 ;; Defined at:
  4285 ;;		line 422 in file "devices.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;  msg             2   52[COMRAM] PTR struct .
  4288 ;;		 -> I2CQueue(160), UARTQueue(160), 
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;  result          1   54[COMRAM] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      unsigned char 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4304 ;;Total ram usage:        3 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    9
  4307 ;; This function calls:
  4308 ;;		_Send_NAK
  4309 ;; This function is called by:
  4310 ;;		_I2C_ProcessPacket
  4311 ;;		_UART_ProcessPacket
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text35
  4316  001F28                     __ptext35:
  4317                           	opt stack 0
  4318  001F28                     _ProcessPaPReferencia:
  4319                           	opt stack 19
  4320                           
  4321                           ;devices.c: 425: unsigned char result = 1;
  4322                           
  4323                           ;incstack = 0
  4324  001F28  0E01               	movlw	1
  4325  001F2A  6E37               	movwf	ProcessPaPReferencia@result,c
  4326                           
  4327                           ;devices.c: 427: switch (msg->CommandL)
  4328  001F2C  D0BD               	goto	l7086
  4329  001F2E                     l7042:
  4330                           
  4331                           ;devices.c: 430: Send_NAK(msg, '6');
  4332  001F2E  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4333  001F32  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4334  001F36  0E36               	movlw	54
  4335  001F38  6E34               	movwf	Send_NAK@errCode,c
  4336  001F3A  EC75  F01B         	call	_Send_NAK	;wreg free
  4337                           
  4338                           ;devices.c: 431: break;
  4339  001F3E  D0F8               	goto	l7088
  4340  001F40                     l7044:
  4341                           
  4342                           ;devices.c: 433: Send_NAK(msg, '6');
  4343  001F40  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4344  001F44  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4345  001F48  0E36               	movlw	54
  4346  001F4A  6E34               	movwf	Send_NAK@errCode,c
  4347  001F4C  EC75  F01B         	call	_Send_NAK	;wreg free
  4348                           
  4349                           ;devices.c: 434: break;
  4350  001F50  D0EF               	goto	l7088
  4351  001F52                     l7046:
  4352                           
  4353                           ;devices.c: 436: Send_NAK(msg, '6');
  4354  001F52  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4355  001F56  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4356  001F5A  0E36               	movlw	54
  4357  001F5C  6E34               	movwf	Send_NAK@errCode,c
  4358  001F5E  EC75  F01B         	call	_Send_NAK	;wreg free
  4359                           
  4360                           ;devices.c: 437: break;
  4361  001F62  D0E6               	goto	l7088
  4362  001F64                     l7048:
  4363                           
  4364                           ;devices.c: 439: Send_NAK(msg, '6');
  4365  001F64  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4366  001F68  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4367  001F6C  0E36               	movlw	54
  4368  001F6E  6E34               	movwf	Send_NAK@errCode,c
  4369  001F70  EC75  F01B         	call	_Send_NAK	;wreg free
  4370                           
  4371                           ;devices.c: 440: break;
  4372  001F74  D0DD               	goto	l7088
  4373  001F76                     l7050:
  4374                           
  4375                           ;devices.c: 442: Send_NAK(msg, '6');
  4376  001F76  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4377  001F7A  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4378  001F7E  0E36               	movlw	54
  4379  001F80  6E34               	movwf	Send_NAK@errCode,c
  4380  001F82  EC75  F01B         	call	_Send_NAK	;wreg free
  4381                           
  4382                           ;devices.c: 443: break;
  4383  001F86  D0D4               	goto	l7088
  4384  001F88                     l7052:
  4385                           
  4386                           ;devices.c: 445: Send_NAK(msg, '6');
  4387  001F88  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4388  001F8C  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4389  001F90  0E36               	movlw	54
  4390  001F92  6E34               	movwf	Send_NAK@errCode,c
  4391  001F94  EC75  F01B         	call	_Send_NAK	;wreg free
  4392                           
  4393                           ;devices.c: 446: break;
  4394  001F98  D0CB               	goto	l7088
  4395  001F9A                     l7054:
  4396                           
  4397                           ;devices.c: 448: Send_NAK(msg, '6');
  4398  001F9A  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4399  001F9E  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4400  001FA2  0E36               	movlw	54
  4401  001FA4  6E34               	movwf	Send_NAK@errCode,c
  4402  001FA6  EC75  F01B         	call	_Send_NAK	;wreg free
  4403                           
  4404                           ;devices.c: 449: break;
  4405  001FAA  D0C2               	goto	l7088
  4406  001FAC                     l7056:
  4407                           
  4408                           ;devices.c: 451: Send_NAK(msg, '6');
  4409  001FAC  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4410  001FB0  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4411  001FB4  0E36               	movlw	54
  4412  001FB6  6E34               	movwf	Send_NAK@errCode,c
  4413  001FB8  EC75  F01B         	call	_Send_NAK	;wreg free
  4414                           
  4415                           ;devices.c: 452: break;
  4416  001FBC  D0B9               	goto	l7088
  4417  001FBE                     l7058:
  4418                           
  4419                           ;devices.c: 454: Send_NAK(msg, '6');
  4420  001FBE  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4421  001FC2  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4422  001FC6  0E36               	movlw	54
  4423  001FC8  6E34               	movwf	Send_NAK@errCode,c
  4424  001FCA  EC75  F01B         	call	_Send_NAK	;wreg free
  4425                           
  4426                           ;devices.c: 455: break;
  4427  001FCE  D0B0               	goto	l7088
  4428  001FD0                     l7060:
  4429                           
  4430                           ;devices.c: 457: Send_NAK(msg, '6');
  4431  001FD0  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4432  001FD4  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4433  001FD8  0E36               	movlw	54
  4434  001FDA  6E34               	movwf	Send_NAK@errCode,c
  4435  001FDC  EC75  F01B         	call	_Send_NAK	;wreg free
  4436                           
  4437                           ;devices.c: 458: break;
  4438  001FE0  D0A7               	goto	l7088
  4439  001FE2                     l7062:
  4440                           
  4441                           ;devices.c: 460: Send_NAK(msg, '6');
  4442  001FE2  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4443  001FE6  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4444  001FEA  0E36               	movlw	54
  4445  001FEC  6E34               	movwf	Send_NAK@errCode,c
  4446  001FEE  EC75  F01B         	call	_Send_NAK	;wreg free
  4447                           
  4448                           ;devices.c: 461: break;
  4449  001FF2  D09E               	goto	l7088
  4450  001FF4                     l7064:
  4451                           
  4452                           ;devices.c: 463: Send_NAK(msg, '6');
  4453  001FF4  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4454  001FF8  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4455  001FFC  0E36               	movlw	54
  4456  001FFE  6E34               	movwf	Send_NAK@errCode,c
  4457  002000  EC75  F01B         	call	_Send_NAK	;wreg free
  4458                           
  4459                           ;devices.c: 464: break;
  4460  002004  D095               	goto	l7088
  4461  002006                     l7066:
  4462                           
  4463                           ;devices.c: 466: Send_NAK(msg, '6');
  4464  002006  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4465  00200A  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4466  00200E  0E36               	movlw	54
  4467  002010  6E34               	movwf	Send_NAK@errCode,c
  4468  002012  EC75  F01B         	call	_Send_NAK	;wreg free
  4469                           
  4470                           ;devices.c: 467: break;
  4471  002016  D08C               	goto	l7088
  4472  002018                     l7068:
  4473                           
  4474                           ;devices.c: 469: Send_NAK(msg, '6');
  4475  002018  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4476  00201C  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4477  002020  0E36               	movlw	54
  4478  002022  6E34               	movwf	Send_NAK@errCode,c
  4479  002024  EC75  F01B         	call	_Send_NAK	;wreg free
  4480                           
  4481                           ;devices.c: 470: break;
  4482  002028  D083               	goto	l7088
  4483  00202A                     l7070:
  4484                           
  4485                           ;devices.c: 472: Send_NAK(msg, '6');
  4486  00202A  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4487  00202E  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4488  002032  0E36               	movlw	54
  4489  002034  6E34               	movwf	Send_NAK@errCode,c
  4490  002036  EC75  F01B         	call	_Send_NAK	;wreg free
  4491                           
  4492                           ;devices.c: 473: break;
  4493  00203A  D07A               	goto	l7088
  4494  00203C                     l7072:
  4495                           
  4496                           ;devices.c: 475: Send_NAK(msg, '6');
  4497  00203C  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4498  002040  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4499  002044  0E36               	movlw	54
  4500  002046  6E34               	movwf	Send_NAK@errCode,c
  4501  002048  EC75  F01B         	call	_Send_NAK	;wreg free
  4502                           
  4503                           ;devices.c: 476: break;
  4504  00204C  D071               	goto	l7088
  4505  00204E                     l7074:
  4506                           
  4507                           ;devices.c: 478: Send_NAK(msg, '6');
  4508  00204E  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4509  002052  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4510  002056  0E36               	movlw	54
  4511  002058  6E34               	movwf	Send_NAK@errCode,c
  4512  00205A  EC75  F01B         	call	_Send_NAK	;wreg free
  4513                           
  4514                           ;devices.c: 479: break;
  4515  00205E  D068               	goto	l7088
  4516  002060                     l7076:
  4517                           
  4518                           ;devices.c: 481: Send_NAK(msg, '6');
  4519  002060  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4520  002064  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4521  002068  0E36               	movlw	54
  4522  00206A  6E34               	movwf	Send_NAK@errCode,c
  4523  00206C  EC75  F01B         	call	_Send_NAK	;wreg free
  4524                           
  4525                           ;devices.c: 482: break;
  4526  002070  D05F               	goto	l7088
  4527  002072                     l7078:
  4528                           
  4529                           ;devices.c: 484: Send_NAK(msg, '6');
  4530  002072  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4531  002076  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4532  00207A  0E36               	movlw	54
  4533  00207C  6E34               	movwf	Send_NAK@errCode,c
  4534  00207E  EC75  F01B         	call	_Send_NAK	;wreg free
  4535                           
  4536                           ;devices.c: 485: break;
  4537  002082  D056               	goto	l7088
  4538  002084                     l7080:
  4539                           
  4540                           ;devices.c: 487: Send_NAK(msg, '6');
  4541  002084  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4542  002088  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4543  00208C  0E36               	movlw	54
  4544  00208E  6E34               	movwf	Send_NAK@errCode,c
  4545  002090  EC75  F01B         	call	_Send_NAK	;wreg free
  4546                           
  4547                           ;devices.c: 488: break;
  4548  002094  D04D               	goto	l7088
  4549  002096                     l7082:
  4550                           
  4551                           ;devices.c: 490: Send_NAK(msg, '5');
  4552  002096  C035  F032         	movff	ProcessPaPReferencia@msg,Send_NAK@msg
  4553  00209A  C036  F033         	movff	ProcessPaPReferencia@msg+1,Send_NAK@msg+1
  4554  00209E  0E35               	movlw	53
  4555  0020A0  6E34               	movwf	Send_NAK@errCode,c
  4556  0020A2  EC75  F01B         	call	_Send_NAK	;wreg free
  4557                           
  4558                           ;devices.c: 492: }
  4559                           
  4560                           ;devices.c: 491: break;
  4561  0020A6  D044               	goto	l7088
  4562  0020A8                     l7086:
  4563  0020A8  EE20 F005          	lfsr	2,5
  4564  0020AC  5035               	movf	ProcessPaPReferencia@msg,w,c
  4565  0020AE  26D9               	addwf	fsr2l,f,c
  4566  0020B0  5036               	movf	ProcessPaPReferencia@msg+1,w,c
  4567  0020B2  22DA               	addwfc	fsr2h,f,c
  4568  0020B4  50DF               	movf	indf2,w,c
  4569                           
  4570                           ; Switch size 1, requested type "space"
  4571                           ; Number of cases is 20, Range of values is 37 to 100
  4572                           ; switch strategies available:
  4573                           ; Name         Instructions Cycles
  4574                           ; simple_byte           61    31 (average)
  4575                           ;	Chosen strategy is simple_byte
  4576  0020B6  0A25               	xorlw	37	; case 37
  4577  0020B8  B4D8               	btfsc	status,2,c
  4578  0020BA  D7AE               	goto	l7068
  4579  0020BC  0A15               	xorlw	21	; case 48
  4580  0020BE  B4D8               	btfsc	status,2,c
  4581  0020C0  D7C6               	goto	l7074
  4582  0020C2  0A01               	xorlw	1	; case 49
  4583  0020C4  B4D8               	btfsc	status,2,c
  4584  0020C6  D7CC               	goto	l7076
  4585  0020C8  0A03               	xorlw	3	; case 50
  4586  0020CA  B4D8               	btfsc	status,2,c
  4587  0020CC  D7D2               	goto	l7078
  4588  0020CE  0A01               	xorlw	1	; case 51
  4589  0020D0  B4D8               	btfsc	status,2,c
  4590  0020D2  D7D8               	goto	l7080
  4591  0020D4  0A0D               	xorlw	13	; case 62
  4592  0020D6  B4D8               	btfsc	status,2,c
  4593  0020D8  D733               	goto	l7044
  4594  0020DA  0A01               	xorlw	1	; case 63
  4595  0020DC  B4D8               	btfsc	status,2,c
  4596  0020DE  D727               	goto	l7042
  4597  0020E0  0A7E               	xorlw	126	; case 65
  4598  0020E2  B4D8               	btfsc	status,2,c
  4599  0020E4  D763               	goto	l7056
  4600  0020E6  0A03               	xorlw	3	; case 66
  4601  0020E8  B4D8               	btfsc	status,2,c
  4602  0020EA  D77B               	goto	l7062
  4603  0020EC  0A01               	xorlw	1	; case 67
  4604  0020EE  B4D8               	btfsc	status,2,c
  4605  0020F0  D79C               	goto	l7070
  4606  0020F2  0A07               	xorlw	7	; case 68
  4607  0020F4  B4D8               	btfsc	status,2,c
  4608  0020F6  D748               	goto	l7052
  4609  0020F8  0A02               	xorlw	2	; case 70
  4610  0020FA  B4D8               	btfsc	status,2,c
  4611  0020FC  D769               	goto	l7060
  4612  0020FE  0A01               	xorlw	1	; case 71
  4613  002100  B4D8               	btfsc	status,2,c
  4614  002102  D730               	goto	l7048
  4615  002104  0A0F               	xorlw	15	; case 72
  4616  002106  B4D8               	btfsc	status,2,c
  4617  002108  D724               	goto	l7046
  4618  00210A  0A07               	xorlw	7	; case 79
  4619  00210C  B4D8               	btfsc	status,2,c
  4620  00210E  D796               	goto	l7072
  4621  002110  0A1F               	xorlw	31	; case 80
  4622  002112  B4D8               	btfsc	status,2,c
  4623  002114  D730               	goto	l7050
  4624  002116  0A02               	xorlw	2	; case 82
  4625  002118  B4D8               	btfsc	status,2,c
  4626  00211A  D73F               	goto	l7054
  4627  00211C  0A01               	xorlw	1	; case 83
  4628  00211E  B4D8               	btfsc	status,2,c
  4629  002120  D769               	goto	l7064
  4630  002122  0A09               	xorlw	9	; case 90
  4631  002124  B4D8               	btfsc	status,2,c
  4632  002126  D74B               	goto	l7058
  4633  002128  0A3E               	xorlw	62	; case 100
  4634  00212A  B4D8               	btfsc	status,2,c
  4635  00212C  D76C               	goto	l7066
  4636  00212E  D7B3               	goto	l7082
  4637  002130                     l7088:
  4638                           
  4639                           ;devices.c: 493: return result;
  4640  002130  5037               	movf	ProcessPaPReferencia@result,w,c
  4641  002132  0012               	return	
  4642  002134                     __end_of_ProcessPaPReferencia:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           intcon2	equ	0xFF1
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           indf2	equ	0xFDF
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _ProcessForward *****************
  4660 ;; Defined at:
  4661 ;;		line 710 in file "devices.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  msg             2   52[COMRAM] PTR struct .
  4664 ;;		 -> I2CQueue(160), UARTQueue(160), 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;  result          1   54[COMRAM] unsigned char 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      unsigned char 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;Total ram usage:        3 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    9
  4683 ;; This function calls:
  4684 ;;		_Send
  4685 ;;		_Send_NAK
  4686 ;; This function is called by:
  4687 ;;		_I2C_ProcessPacket
  4688 ;;		_UART_ProcessPacket
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text36
  4693  002DD6                     __ptext36:
  4694                           	opt stack 0
  4695  002DD6                     _ProcessForward:
  4696                           	opt stack 19
  4697                           
  4698                           ;devices.c: 712: unsigned char result = 1;
  4699                           
  4700                           ;incstack = 0
  4701  002DD6  0E01               	movlw	1
  4702  002DD8  6E37               	movwf	ProcessForward@result,c
  4703                           
  4704                           ;devices.c: 713: switch(msg->IOInterface)
  4705  002DDA  D048               	goto	l7180
  4706  002DDC                     l7166:
  4707                           
  4708                           ;devices.c: 719: msg->Direction = 0x20;
  4709  002DDC  EE20 F001          	lfsr	2,1
  4710  002DE0  5035               	movf	ProcessForward@msg,w,c
  4711  002DE2  26D9               	addwf	fsr2l,f,c
  4712  002DE4  5036               	movf	ProcessForward@msg+1,w,c
  4713  002DE6  22DA               	addwfc	fsr2h,f,c
  4714  002DE8  0E20               	movlw	32
  4715  002DEA  6EDF               	movwf	indf2,c
  4716                           
  4717                           ;devices.c: 720: msg->IOInterface = 2;
  4718  002DEC  EE20 F00E          	lfsr	2,14
  4719  002DF0  5035               	movf	ProcessForward@msg,w,c
  4720  002DF2  26D9               	addwf	fsr2l,f,c
  4721  002DF4  5036               	movf	ProcessForward@msg+1,w,c
  4722  002DF6  22DA               	addwfc	fsr2h,f,c
  4723  002DF8  0E02               	movlw	2
  4724  002DFA  D036               	goto	L8
  4725  002DFC                     l7168:
  4726                           
  4727                           ;devices.c: 723: msg->Direction = 0x20;
  4728  002DFC  EE20 F001          	lfsr	2,1
  4729  002E00  5035               	movf	ProcessForward@msg,w,c
  4730  002E02  26D9               	addwf	fsr2l,f,c
  4731  002E04  5036               	movf	ProcessForward@msg+1,w,c
  4732  002E06  22DA               	addwfc	fsr2h,f,c
  4733  002E08  0E20               	movlw	32
  4734  002E0A  6EDF               	movwf	indf2,c
  4735                           
  4736                           ;devices.c: 724: msg->IOInterface = 3;
  4737  002E0C  EE20 F00E          	lfsr	2,14
  4738  002E10  5035               	movf	ProcessForward@msg,w,c
  4739  002E12  26D9               	addwf	fsr2l,f,c
  4740  002E14  5036               	movf	ProcessForward@msg+1,w,c
  4741  002E16  22DA               	addwfc	fsr2h,f,c
  4742  002E18  0E03               	movlw	3
  4743  002E1A  D026               	goto	L8
  4744  002E1C                     l7170:
  4745                           
  4746                           ;devices.c: 727: Send_NAK(msg, '1');
  4747  002E1C  C035  F032         	movff	ProcessForward@msg,Send_NAK@msg
  4748  002E20  C036  F033         	movff	ProcessForward@msg+1,Send_NAK@msg+1
  4749  002E24  0E31               	movlw	49
  4750  002E26  6E34               	movwf	Send_NAK@errCode,c
  4751  002E28  EC75  F01B         	call	_Send_NAK	;wreg free
  4752                           
  4753                           ;devices.c: 729: }
  4754                           
  4755                           ;devices.c: 728: break;
  4756  002E2C  D02F               	goto	l7182
  4757  002E2E                     l7174:
  4758  002E2E  EE20 F001          	lfsr	2,1
  4759  002E32  5035               	movf	ProcessForward@msg,w,c
  4760  002E34  26D9               	addwf	fsr2l,f,c
  4761  002E36  5036               	movf	ProcessForward@msg+1,w,c
  4762  002E38  22DA               	addwfc	fsr2h,f,c
  4763  002E3A  50DF               	movf	indf2,w,c
  4764                           
  4765                           ; Switch size 1, requested type "space"
  4766                           ; Number of cases is 2, Range of values is 48 to 64
  4767                           ; switch strategies available:
  4768                           ; Name         Instructions Cycles
  4769                           ; simple_byte            7     4 (average)
  4770                           ;	Chosen strategy is simple_byte
  4771  002E3C  0A30               	xorlw	48	; case 48
  4772  002E3E  B4D8               	btfsc	status,2,c
  4773  002E40  D7CD               	goto	l7166
  4774  002E42  0A70               	xorlw	112	; case 64
  4775  002E44  B4D8               	btfsc	status,2,c
  4776  002E46  D7DA               	goto	l7168
  4777  002E48  D7E9               	goto	l7170
  4778  002E4A                     l7176:
  4779                           
  4780                           ;devices.c: 732: case 3:
  4781                           ;devices.c: 733: msg->Direction = 0x10;
  4782  002E4A  EE20 F001          	lfsr	2,1
  4783  002E4E  5035               	movf	ProcessForward@msg,w,c
  4784  002E50  26D9               	addwf	fsr2l,f,c
  4785  002E52  5036               	movf	ProcessForward@msg+1,w,c
  4786  002E54  22DA               	addwfc	fsr2h,f,c
  4787  002E56  0E10               	movlw	16
  4788  002E58  6EDF               	movwf	indf2,c
  4789                           
  4790                           ;devices.c: 734: msg->IOInterface = 1;
  4791  002E5A  EE20 F00E          	lfsr	2,14
  4792  002E5E  5035               	movf	ProcessForward@msg,w,c
  4793  002E60  26D9               	addwf	fsr2l,f,c
  4794  002E62  5036               	movf	ProcessForward@msg+1,w,c
  4795  002E64  22DA               	addwfc	fsr2h,f,c
  4796  002E66  0E01               	movlw	1
  4797  002E68                     L8:
  4798  002E68  6EDF               	movwf	indf2,c
  4799                           
  4800                           ;devices.c: 736: }
  4801                           
  4802                           ;devices.c: 735: break;
  4803  002E6A  D010               	goto	l7182
  4804  002E6C                     l7180:
  4805  002E6C  EE20 F00E          	lfsr	2,14
  4806  002E70  5035               	movf	ProcessForward@msg,w,c
  4807  002E72  26D9               	addwf	fsr2l,f,c
  4808  002E74  5036               	movf	ProcessForward@msg+1,w,c
  4809  002E76  22DA               	addwfc	fsr2h,f,c
  4810  002E78  50DF               	movf	indf2,w,c
  4811                           
  4812                           ; Switch size 1, requested type "space"
  4813                           ; Number of cases is 3, Range of values is 1 to 3
  4814                           ; switch strategies available:
  4815                           ; Name         Instructions Cycles
  4816                           ; simple_byte           10     6 (average)
  4817                           ;	Chosen strategy is simple_byte
  4818  002E7A  0A01               	xorlw	1	; case 1
  4819  002E7C  B4D8               	btfsc	status,2,c
  4820  002E7E  D7D7               	goto	l7174
  4821  002E80  0A03               	xorlw	3	; case 2
  4822  002E82  B4D8               	btfsc	status,2,c
  4823  002E84  D7E2               	goto	l7176
  4824  002E86  0A01               	xorlw	1	; case 3
  4825  002E88  B4D8               	btfsc	status,2,c
  4826  002E8A  D7DF               	goto	l7176
  4827  002E8C                     l7182:
  4828                           
  4829                           ;devices.c: 737: Send(msg);
  4830  002E8C  C035  F030         	movff	ProcessForward@msg,Send@msg
  4831  002E90  C036  F031         	movff	ProcessForward@msg+1,Send@msg+1
  4832  002E94  EC5C  F01C         	call	_Send	;wreg free
  4833                           
  4834                           ;devices.c: 738: return result;
  4835  002E98  5037               	movf	ProcessForward@result,w,c
  4836  002E9A  0012               	return	
  4837  002E9C                     __end_of_ProcessForward:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           intcon2	equ	0xFF1
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           indf2	equ	0xFDF
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854 ;; *************** function _ProcessDevice *****************
  4855 ;; Defined at:
  4856 ;;		line 367 in file "devices.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;  msg             2   17[BANK0 ] PTR struct .
  4859 ;;		 -> I2CQueue(160), UARTQueue(160), 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  k               2   26[BANK0 ] int 
  4862 ;;  Result          1   25[BANK0 ] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      unsigned char 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4872 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;Total ram usage:       11 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:   11
  4879 ;; This function calls:
  4880 ;;		_SaveClass
  4881 ;;		_SaveID
  4882 ;;		_Send_ACK
  4883 ;;		_Send_Firmware
  4884 ;;		_Send_Hardware
  4885 ;;		_Send_NAK
  4886 ;;		_UpdateID
  4887 ;; This function is called by:
  4888 ;;		_I2C_ProcessPacket
  4889 ;;		_UART_ProcessPacket
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text37
  4894  002134                     __ptext37:
  4895                           	opt stack 0
  4896  002134                     _ProcessDevice:
  4897                           	opt stack 17
  4898                           
  4899                           ;devices.c: 370: unsigned char Result = 1;
  4900                           
  4901                           ;incstack = 0
  4902  002134  0E01               	movlw	1
  4903  002136  0100               	movlb	0	; () banked
  4904  002138  6FF3               	movwf	ProcessDevice@Result& (0+255),b
  4905                           
  4906                           ;devices.c: 372: switch (msg->CommandL)
  4907  00213A  D0BC               	goto	l7034
  4908  00213C                     l6986:
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;devices.c: 375: Send_ACK(msg);
  4912  00213C  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  4913  002140  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  4914  002144  ECDD  F01B         	call	_Send_ACK	;wreg free
  4915                           
  4916                           ;devices.c: 376: Send_Firmware(msg);
  4917  002148  C0EB  F032         	movff	ProcessDevice@msg,Send_Firmware@msg
  4918  00214C  C0EC  F033         	movff	ProcessDevice@msg+1,Send_Firmware@msg+1
  4919  002150  EC55  F018         	call	_Send_Firmware	;wreg free
  4920                           
  4921                           ;devices.c: 377: break;
  4922  002154  D0CD               	goto	l7036
  4923  002156                     l6990:
  4924                           
  4925                           ;devices.c: 379: Send_ACK(msg);
  4926  002156  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  4927  00215A  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  4928  00215E  ECDD  F01B         	call	_Send_ACK	;wreg free
  4929                           
  4930                           ;devices.c: 380: Send_Hardware(msg);
  4931  002162  C0EB  F032         	movff	ProcessDevice@msg,Send_Hardware@msg
  4932  002166  C0EC  F033         	movff	ProcessDevice@msg+1,Send_Hardware@msg+1
  4933  00216A  ECFF  F017         	call	_Send_Hardware	;wreg free
  4934                           
  4935                           ;devices.c: 381: break;
  4936  00216E  D0C0               	goto	l7036
  4937  002170                     l6994:
  4938                           
  4939                           ;devices.c: 383: if (Me.Class != msg->Params[0])
  4940  002170  0100               	movlb	0	; () banked
  4941  002172  EE20 F006          	lfsr	2,6
  4942  002176  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  4943  002178  26D9               	addwf	fsr2l,f,c
  4944  00217A  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  4945  00217C  22DA               	addwfc	fsr2h,f,c
  4946  00217E  0101               	movlb	1	; () banked
  4947  002180  5100               	movf	_Me& (0+255),w,b	;volatile
  4948  002182  18DE               	xorwf	postinc2,w,c
  4949  002184  B4D8               	btfsc	status,2,c
  4950  002186  D0B4               	goto	l7036
  4951                           
  4952                           ; BSR set to: 1
  4953                           ;devices.c: 384: {
  4954                           ;devices.c: 385: Send_ACK(msg);
  4955  002188  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  4956  00218C  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  4957  002190  ECDD  F01B         	call	_Send_ACK	;wreg free
  4958                           
  4959                           ;devices.c: 386: Me.Class = msg->Params[0];
  4960  002194  0100               	movlb	0	; () banked
  4961  002196  EE20 F006          	lfsr	2,6
  4962  00219A  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  4963  00219C  26D9               	addwf	fsr2l,f,c
  4964  00219E  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  4965  0021A0  22DA               	addwfc	fsr2h,f,c
  4966  0021A2  50DF               	movf	indf2,w,c
  4967  0021A4  0101               	movlb	1	; () banked
  4968  0021A6  6F00               	movwf	_Me& (0+255),b	;volatile
  4969                           
  4970                           ; BSR set to: 1
  4971                           ;devices.c: 387: SaveClass(Me.Class);
  4972  0021A8  0101               	movlb	1	; () banked
  4973  0021AA  5100               	movf	_Me& (0+255),w,b	;volatile
  4974  0021AC  EC42  F020         	call	_SaveClass
  4975                           
  4976                           ;devices.c: 388: }
  4977                           ;devices.c: 389: break;
  4978  0021B0  D09F               	goto	l7036
  4979  0021B2                     l7002:
  4980                           
  4981                           ;devices.c: 391: if (Me.ID != msg->Params[0] - '0')
  4982  0021B2  0101               	movlb	1	; () banked
  4983  0021B4  5101               	movf	(_Me+1)& (0+255),w,b	;volatile
  4984  0021B6  0100               	movlb	0	; () banked
  4985  0021B8  6FED               	movwf	??_ProcessDevice& (0+255),b
  4986  0021BA  6BEE               	clrf	(??_ProcessDevice+1)& (0+255),b
  4987  0021BC  0ED0               	movlw	208
  4988  0021BE  0100               	movlb	0	; () banked
  4989  0021C0  6FEF               	movwf	(??_ProcessDevice+2)& (0+255),b
  4990  0021C2  0EFF               	movlw	255
  4991  0021C4  0100               	movlb	0	; () banked
  4992  0021C6  6FF0               	movwf	(??_ProcessDevice+3)& (0+255),b
  4993  0021C8  0100               	movlb	0	; () banked
  4994  0021CA  EE20 F006          	lfsr	2,6
  4995  0021CE  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  4996  0021D0  26D9               	addwf	fsr2l,f,c
  4997  0021D2  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  4998  0021D4  22DA               	addwfc	fsr2h,f,c
  4999  0021D6  50DF               	movf	indf2,w,c
  5000  0021D8  0100               	movlb	0	; () banked
  5001  0021DA  6FF1               	movwf	(??_ProcessDevice+4)& (0+255),b
  5002  0021DC  6BF2               	clrf	(??_ProcessDevice+5)& (0+255),b
  5003  0021DE  0100               	movlb	0	; () banked
  5004  0021E0  51EF               	movf	(??_ProcessDevice+2)& (0+255),w,b
  5005  0021E2  0100               	movlb	0	; () banked
  5006  0021E4  27F1               	addwf	(??_ProcessDevice+4)& (0+255),f,b
  5007  0021E6  0100               	movlb	0	; () banked
  5008  0021E8  51F0               	movf	(??_ProcessDevice+3)& (0+255),w,b
  5009  0021EA  0100               	movlb	0	; () banked
  5010  0021EC  23F2               	addwfc	(??_ProcessDevice+5)& (0+255),f,b
  5011  0021EE  0100               	movlb	0	; () banked
  5012  0021F0  51ED               	movf	??_ProcessDevice& (0+255),w,b
  5013  0021F2  0100               	movlb	0	; () banked
  5014  0021F4  19F1               	xorwf	(??_ProcessDevice+4)& (0+255),w,b
  5015  0021F6  E106               	bnz	u5260
  5016  0021F8  0100               	movlb	0	; () banked
  5017  0021FA  51EE               	movf	(??_ProcessDevice+1)& (0+255),w,b
  5018  0021FC  0100               	movlb	0	; () banked
  5019  0021FE  19F2               	xorwf	(??_ProcessDevice+5)& (0+255),w,b
  5020  002200  B4D8               	btfsc	status,2,c
  5021  002202  D076               	goto	l7036
  5022  002204                     u5260:
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;devices.c: 392: {
  5026                           ;devices.c: 393: if (msg->Params[0] != '0')
  5027  002204  0100               	movlb	0	; () banked
  5028  002206  EE20 F006          	lfsr	2,6
  5029  00220A  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  5030  00220C  26D9               	addwf	fsr2l,f,c
  5031  00220E  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  5032  002210  22DA               	addwfc	fsr2h,f,c
  5033  002212  0E30               	movlw	48
  5034  002214  18DE               	xorwf	postinc2,w,c
  5035  002216  B4D8               	btfsc	status,2,c
  5036  002218  D018               	goto	l7014
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;devices.c: 394: {
  5040                           ;devices.c: 395: Send_ACK(msg);
  5041  00221A  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  5042  00221E  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  5043  002222  ECDD  F01B         	call	_Send_ACK	;wreg free
  5044                           
  5045                           ;devices.c: 396: Me.ID = msg->Params[0] - '0';
  5046  002226  0100               	movlb	0	; () banked
  5047  002228  EE20 F006          	lfsr	2,6
  5048  00222C  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  5049  00222E  26D9               	addwf	fsr2l,f,c
  5050  002230  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  5051  002232  22DA               	addwfc	fsr2h,f,c
  5052  002234  50DF               	movf	indf2,w,c
  5053  002236  0FD0               	addlw	208
  5054  002238  0101               	movlb	1	; () banked
  5055  00223A  6F01               	movwf	(_Me+1)& (0+255),b	;volatile
  5056                           
  5057                           ; BSR set to: 1
  5058                           ;devices.c: 397: SaveID(Me.ID);
  5059  00223C  0101               	movlb	1	; () banked
  5060  00223E  5101               	movf	(_Me+1)& (0+255),w,b	;volatile
  5061  002240  EC38  F020         	call	_SaveID
  5062                           
  5063                           ;devices.c: 398: UpdateID();
  5064  002244  ECA9  F01F         	call	_UpdateID	;wreg free
  5065                           
  5066                           ;devices.c: 399: }
  5067  002248  D053               	goto	l7036
  5068  00224A                     l7014:
  5069                           
  5070                           ;devices.c: 400: else
  5071                           ;devices.c: 401: {
  5072                           ;devices.c: 402: Send_NAK(msg, '7');
  5073  00224A  C0EB  F032         	movff	ProcessDevice@msg,Send_NAK@msg
  5074  00224E  C0EC  F033         	movff	ProcessDevice@msg+1,Send_NAK@msg+1
  5075  002252  0E37               	movlw	55
  5076  002254  6E34               	movwf	Send_NAK@errCode,c
  5077  002256  EC75  F01B         	call	_Send_NAK	;wreg free
  5078                           
  5079                           ;devices.c: 403: }
  5080                           ;devices.c: 404: }
  5081                           ;devices.c: 405: break;
  5082  00225A  D04A               	goto	l7036
  5083  00225C                     l7016:
  5084                           
  5085                           ;devices.c: 407: Send_ACK(msg);
  5086  00225C  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  5087  002260  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  5088  002264  ECDD  F01B         	call	_Send_ACK	;wreg free
  5089                           
  5090                           ;devices.c: 408: break;
  5091  002268  D043               	goto	l7036
  5092  00226A                     l7018:
  5093                           
  5094                           ;devices.c: 411: for (int k = 0; k < 10; k++) Send_ACK(msg);
  5095  00226A  0E00               	movlw	0
  5096  00226C  0100               	movlb	0	; () banked
  5097  00226E  6FF5               	movwf	(ProcessDevice@k+1)& (0+255),b
  5098  002270  0E00               	movlw	0
  5099  002272  6FF4               	movwf	ProcessDevice@k& (0+255),b
  5100  002274                     l7020:
  5101                           
  5102                           ; BSR set to: 0
  5103  002274  0100               	movlb	0	; () banked
  5104  002276  BFF5               	btfsc	(ProcessDevice@k+1)& (0+255),7,b
  5105  002278  D008               	goto	l7024
  5106  00227A  0100               	movlb	0	; () banked
  5107  00227C  51F5               	movf	(ProcessDevice@k+1)& (0+255),w,b
  5108  00227E  E138               	bnz	l7036
  5109  002280  0E0A               	movlw	10
  5110  002282  0100               	movlb	0	; () banked
  5111  002284  5DF4               	subwf	ProcessDevice@k& (0+255),w,b
  5112  002286  B0D8               	btfsc	status,0,c
  5113  002288  D033               	goto	l7036
  5114  00228A                     l7024:
  5115                           
  5116                           ; BSR set to: 0
  5117  00228A  C0EB  F032         	movff	ProcessDevice@msg,Send_ACK@msg
  5118  00228E  C0EC  F033         	movff	ProcessDevice@msg+1,Send_ACK@msg+1
  5119  002292  ECDD  F01B         	call	_Send_ACK	;wreg free
  5120  002296  0100               	movlb	0	; () banked
  5121  002298  4BF4               	infsnz	ProcessDevice@k& (0+255),f,b
  5122  00229A  2BF5               	incf	(ProcessDevice@k+1)& (0+255),f,b
  5123  00229C  D7EB               	goto	l7020
  5124  00229E                     l1058:
  5125                           
  5126                           ; BSR set to: 0
  5127  00229E  00FF               	reset		;# 
  5128                           
  5129                           ;devices.c: 415: break;
  5130  0022A0  D027               	goto	l7036
  5131  0022A2                     l7030:
  5132                           
  5133                           ;devices.c: 417: Send_NAK(msg, '5');
  5134  0022A2  C0EB  F032         	movff	ProcessDevice@msg,Send_NAK@msg
  5135  0022A6  C0EC  F033         	movff	ProcessDevice@msg+1,Send_NAK@msg+1
  5136  0022AA  0E35               	movlw	53
  5137  0022AC  6E34               	movwf	Send_NAK@errCode,c
  5138  0022AE  EC75  F01B         	call	_Send_NAK	;wreg free
  5139                           
  5140                           ;devices.c: 419: }
  5141                           
  5142                           ;devices.c: 418: break;
  5143  0022B2  D01E               	goto	l7036
  5144  0022B4                     l7034:
  5145  0022B4  0100               	movlb	0	; () banked
  5146  0022B6  EE20 F005          	lfsr	2,5
  5147  0022BA  51EB               	movf	ProcessDevice@msg& (0+255),w,b
  5148  0022BC  26D9               	addwf	fsr2l,f,c
  5149  0022BE  51EC               	movf	(ProcessDevice@msg+1)& (0+255),w,b
  5150  0022C0  22DA               	addwfc	fsr2h,f,c
  5151  0022C2  50DF               	movf	indf2,w,c
  5152                           
  5153                           ; Switch size 1, requested type "space"
  5154                           ; Number of cases is 7, Range of values is 63 to 114
  5155                           ; switch strategies available:
  5156                           ; Name         Instructions Cycles
  5157                           ; simple_byte           22    12 (average)
  5158                           ;	Chosen strategy is simple_byte
  5159  0022C4  0A3F               	xorlw	63	; case 63
  5160  0022C6  B4D8               	btfsc	status,2,c
  5161  0022C8  D7C9               	goto	l7016
  5162  0022CA  0A7C               	xorlw	124	; case 67
  5163  0022CC  B4D8               	btfsc	status,2,c
  5164  0022CE  D750               	goto	l6994
  5165  0022D0  0A05               	xorlw	5	; case 70
  5166  0022D2  B4D8               	btfsc	status,2,c
  5167  0022D4  D733               	goto	l6986
  5168  0022D6  0A0E               	xorlw	14	; case 72
  5169  0022D8  B4D8               	btfsc	status,2,c
  5170  0022DA  D73D               	goto	l6990
  5171  0022DC  0A01               	xorlw	1	; case 73
  5172  0022DE  B4D8               	btfsc	status,2,c
  5173  0022E0  D768               	goto	l7002
  5174  0022E2  0A2F               	xorlw	47	; case 102
  5175  0022E4  B4D8               	btfsc	status,2,c
  5176  0022E6  D7C1               	goto	l7018
  5177  0022E8  0A14               	xorlw	20	; case 114
  5178  0022EA  B4D8               	btfsc	status,2,c
  5179  0022EC  D7D8               	goto	l1058
  5180  0022EE  D7D9               	goto	l7030
  5181  0022F0                     l7036:
  5182                           
  5183                           ;devices.c: 420: return Result;
  5184  0022F0  0100               	movlb	0	; () banked
  5185  0022F2  51F3               	movf	ProcessDevice@Result& (0+255),w,b
  5186  0022F4  0012               	return	
  5187  0022F6                     __end_of_ProcessDevice:
  5188                           	opt stack 0
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           intcon2	equ	0xFF1
  5197                           postinc0	equ	0xFEE
  5198                           wreg	equ	0xFE8
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function _UpdateID *****************
  5206 ;; Defined at:
  5207 ;;		line 146 in file "tasks.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;Total ram usage:        0 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:   10
  5228 ;; This function calls:
  5229 ;;		_LCD_WriteInt
  5230 ;; This function is called by:
  5231 ;;		_InitTasks
  5232 ;;		_ProcessDevice
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text38
  5237  003F52                     __ptext38:
  5238                           	opt stack 0
  5239  003F52                     _UpdateID:
  5240                           	opt stack 19
  5241                           
  5242                           ;tasks.c: 148: LCD_WriteInt(Me.ID, 2, 2, 4);
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;incstack = 0
  5246  003F52  C101  F0DA         	movff	_Me+1,LCD_WriteInt@number	;volatile
  5247  003F56  0100               	movlb	0	; () banked
  5248  003F58  6BDB               	clrf	(LCD_WriteInt@number+1)& (0+255),b
  5249  003F5A  0E02               	movlw	2
  5250  003F5C  0100               	movlb	0	; () banked
  5251  003F5E  6FDC               	movwf	LCD_WriteInt@digitos& (0+255),b
  5252  003F60  0E02               	movlw	2
  5253  003F62  0100               	movlb	0	; () banked
  5254  003F64  6FDD               	movwf	LCD_WriteInt@linea& (0+255),b
  5255  003F66  0E04               	movlw	4
  5256  003F68  0100               	movlb	0	; () banked
  5257  003F6A  6FDE               	movwf	LCD_WriteInt@offset& (0+255),b
  5258  003F6C  EC65  F00E         	call	_LCD_WriteInt	;wreg free
  5259  003F70  0012               	return		;funcret
  5260  003F72                     __end_of_UpdateID:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           intcon2	equ	0xFF1
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           fsr2h	equ	0xFDA
  5275                           fsr2l	equ	0xFD9
  5276                           status	equ	0xFD8
  5277                           
  5278 ;; *************** function _LCD_WriteInt *****************
  5279 ;; Defined at:
  5280 ;;		line 114 in file "displayLCD20x4.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  number          2    0[BANK0 ] unsigned int 
  5283 ;;  digitos         1    2[BANK0 ] unsigned char 
  5284 ;;  linea           1    3[BANK0 ] unsigned char 
  5285 ;;  offset          1    4[BANK0 ] unsigned char 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  string          6    6[BANK0 ] unsigned char [6]
  5288 ;;  i               1   16[BANK0 ] unsigned char 
  5289 ;;  unidades        1   15[BANK0 ] unsigned char 
  5290 ;;  decenas         1   14[BANK0 ] unsigned char 
  5291 ;;  centenas        1   13[BANK0 ] unsigned char 
  5292 ;;  miles           1   12[BANK0 ] unsigned char 
  5293 ;;  decmiles        1    5[BANK0 ] unsigned char 
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5303 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Totals:         2      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;Total ram usage:       19 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    9
  5310 ;; This function calls:
  5311 ;;		_LCD_Write
  5312 ;;		___lwdiv
  5313 ;;		___lwmod
  5314 ;; This function is called by:
  5315 ;;		_UpdateID
  5316 ;;		_Update_Display_LCD
  5317 ;;		_UpdateMuxPos
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text39
  5322  001CCA                     __ptext39:
  5323                           	opt stack 0
  5324  001CCA                     _LCD_WriteInt:
  5325                           	opt stack 19
  5326                           
  5327                           ;displayLCD20x4.c: 116: unsigned char string[6];
  5328                           ;displayLCD20x4.c: 117: unsigned char unidades = (number % 10);
  5329                           
  5330                           ;incstack = 0
  5331  001CCA  C0DA  F038         	movff	LCD_WriteInt@number,___lwmod@dividend
  5332  001CCE  C0DB  F039         	movff	LCD_WriteInt@number+1,___lwmod@dividend+1
  5333  001CD2  0E00               	movlw	0
  5334  001CD4  6E3B               	movwf	___lwmod@divisor+1,c
  5335  001CD6  0E0A               	movlw	10
  5336  001CD8  6E3A               	movwf	___lwmod@divisor,c
  5337  001CDA  EC11  F01D         	call	___lwmod	;wreg free
  5338  001CDE  5038               	movf	?___lwmod,w,c
  5339  001CE0  0100               	movlb	0	; () banked
  5340  001CE2  6FE9               	movwf	LCD_WriteInt@unidades& (0+255),b
  5341                           
  5342                           ;displayLCD20x4.c: 118: unsigned char decenas = (((number - unidades) / 10) % 10);
  5343  001CE4  0E00               	movlw	0
  5344  001CE6  6E34               	movwf	___lwdiv@divisor+1,c
  5345  001CE8  0E0A               	movlw	10
  5346  001CEA  6E33               	movwf	___lwdiv@divisor,c
  5347  001CEC  0100               	movlb	0	; () banked
  5348  001CEE  51E9               	movf	LCD_WriteInt@unidades& (0+255),w,b
  5349  001CF0  6E3D               	movwf	??_LCD_WriteInt& (0+255),c
  5350  001CF2  6A3E               	clrf	(??_LCD_WriteInt+1)& (0+255),c
  5351  001CF4  1E3D               	comf	??_LCD_WriteInt,f,c
  5352  001CF6  1E3E               	comf	??_LCD_WriteInt+1,f,c
  5353  001CF8  4A3D               	infsnz	??_LCD_WriteInt,f,c
  5354  001CFA  2A3E               	incf	??_LCD_WriteInt+1,f,c
  5355  001CFC  0100               	movlb	0	; () banked
  5356  001CFE  51DA               	movf	LCD_WriteInt@number& (0+255),w,b
  5357  001D00  243D               	addwf	??_LCD_WriteInt,w,c
  5358  001D02  6E31               	movwf	___lwdiv@dividend,c
  5359  001D04  0100               	movlb	0	; () banked
  5360  001D06  51DB               	movf	(LCD_WriteInt@number+1)& (0+255),w,b
  5361  001D08  203E               	addwfc	??_LCD_WriteInt+1,w,c
  5362  001D0A  6E32               	movwf	___lwdiv@dividend+1,c
  5363  001D0C  EC0C  F01C         	call	___lwdiv	;wreg free
  5364  001D10  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  5365  001D14  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  5366  001D18  0E00               	movlw	0
  5367  001D1A  6E3B               	movwf	___lwmod@divisor+1,c
  5368  001D1C  0E0A               	movlw	10
  5369  001D1E  6E3A               	movwf	___lwmod@divisor,c
  5370  001D20  EC11  F01D         	call	___lwmod	;wreg free
  5371  001D24  5038               	movf	?___lwmod,w,c
  5372  001D26  0100               	movlb	0	; () banked
  5373  001D28  6FE8               	movwf	LCD_WriteInt@decenas& (0+255),b
  5374                           
  5375                           ;displayLCD20x4.c: 119: unsigned char centenas = (((number - unidades - decenas) / 100) 
      +                          % 10);
  5376  001D2A  0E00               	movlw	0
  5377  001D2C  6E34               	movwf	___lwdiv@divisor+1,c
  5378  001D2E  0E64               	movlw	100
  5379  001D30  6E33               	movwf	___lwdiv@divisor,c
  5380  001D32  0100               	movlb	0	; () banked
  5381  001D34  51E8               	movf	LCD_WriteInt@decenas& (0+255),w,b
  5382  001D36  C0E9  F03D         	movff	LCD_WriteInt@unidades,??_LCD_WriteInt
  5383  001D3A  6A3E               	clrf	(??_LCD_WriteInt+1)& (0+255),c
  5384  001D3C  263D               	addwf	??_LCD_WriteInt,f,c
  5385  001D3E  0E00               	movlw	0
  5386  001D40  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5387  001D42  1E3D               	comf	??_LCD_WriteInt,f,c
  5388  001D44  1E3E               	comf	??_LCD_WriteInt+1,f,c
  5389  001D46  4A3D               	infsnz	??_LCD_WriteInt,f,c
  5390  001D48  2A3E               	incf	??_LCD_WriteInt+1,f,c
  5391  001D4A  0100               	movlb	0	; () banked
  5392  001D4C  51DA               	movf	LCD_WriteInt@number& (0+255),w,b
  5393  001D4E  243D               	addwf	??_LCD_WriteInt,w,c
  5394  001D50  6E31               	movwf	___lwdiv@dividend,c
  5395  001D52  0100               	movlb	0	; () banked
  5396  001D54  51DB               	movf	(LCD_WriteInt@number+1)& (0+255),w,b
  5397  001D56  203E               	addwfc	??_LCD_WriteInt+1,w,c
  5398  001D58  6E32               	movwf	___lwdiv@dividend+1,c
  5399  001D5A  EC0C  F01C         	call	___lwdiv	;wreg free
  5400  001D5E  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  5401  001D62  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  5402  001D66  0E00               	movlw	0
  5403  001D68  6E3B               	movwf	___lwmod@divisor+1,c
  5404  001D6A  0E0A               	movlw	10
  5405  001D6C  6E3A               	movwf	___lwmod@divisor,c
  5406  001D6E  EC11  F01D         	call	___lwmod	;wreg free
  5407  001D72  5038               	movf	?___lwmod,w,c
  5408  001D74  0100               	movlb	0	; () banked
  5409  001D76  6FE7               	movwf	LCD_WriteInt@centenas& (0+255),b
  5410                           
  5411                           ;displayLCD20x4.c: 120: unsigned char miles = (((number - unidades - decenas - centenas)
      +                           / 1000) % 10);
  5412  001D78  0E03               	movlw	3
  5413  001D7A  6E34               	movwf	___lwdiv@divisor+1,c
  5414  001D7C  0EE8               	movlw	232
  5415  001D7E  6E33               	movwf	___lwdiv@divisor,c
  5416  001D80  0100               	movlb	0	; () banked
  5417  001D82  51E8               	movf	LCD_WriteInt@decenas& (0+255),w,b
  5418  001D84  C0E9  F03D         	movff	LCD_WriteInt@unidades,??_LCD_WriteInt
  5419  001D88  6A3E               	clrf	(??_LCD_WriteInt+1)& (0+255),c
  5420  001D8A  263D               	addwf	??_LCD_WriteInt,f,c
  5421  001D8C  0E00               	movlw	0
  5422  001D8E  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5423  001D90  0100               	movlb	0	; () banked
  5424  001D92  51E7               	movf	LCD_WriteInt@centenas& (0+255),w,b
  5425  001D94  263D               	addwf	??_LCD_WriteInt,f,c
  5426  001D96  0E00               	movlw	0
  5427  001D98  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5428  001D9A  1E3D               	comf	??_LCD_WriteInt,f,c
  5429  001D9C  1E3E               	comf	??_LCD_WriteInt+1,f,c
  5430  001D9E  4A3D               	infsnz	??_LCD_WriteInt,f,c
  5431  001DA0  2A3E               	incf	??_LCD_WriteInt+1,f,c
  5432  001DA2  0100               	movlb	0	; () banked
  5433  001DA4  51DA               	movf	LCD_WriteInt@number& (0+255),w,b
  5434  001DA6  243D               	addwf	??_LCD_WriteInt,w,c
  5435  001DA8  6E31               	movwf	___lwdiv@dividend,c
  5436  001DAA  0100               	movlb	0	; () banked
  5437  001DAC  51DB               	movf	(LCD_WriteInt@number+1)& (0+255),w,b
  5438  001DAE  203E               	addwfc	??_LCD_WriteInt+1,w,c
  5439  001DB0  6E32               	movwf	___lwdiv@dividend+1,c
  5440  001DB2  EC0C  F01C         	call	___lwdiv	;wreg free
  5441  001DB6  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  5442  001DBA  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  5443  001DBE  0E00               	movlw	0
  5444  001DC0  6E3B               	movwf	___lwmod@divisor+1,c
  5445  001DC2  0E0A               	movlw	10
  5446  001DC4  6E3A               	movwf	___lwmod@divisor,c
  5447  001DC6  EC11  F01D         	call	___lwmod	;wreg free
  5448  001DCA  5038               	movf	?___lwmod,w,c
  5449  001DCC  0100               	movlb	0	; () banked
  5450  001DCE  6FE6               	movwf	LCD_WriteInt@miles& (0+255),b
  5451                           
  5452                           ;displayLCD20x4.c: 121: unsigned char decmiles = (((number - unidades - decenas - centen
      +                          as - miles) / 10000) % 10);
  5453  001DD0  0E27               	movlw	39
  5454  001DD2  6E34               	movwf	___lwdiv@divisor+1,c
  5455  001DD4  0E10               	movlw	16
  5456  001DD6  6E33               	movwf	___lwdiv@divisor,c
  5457  001DD8  0100               	movlb	0	; () banked
  5458  001DDA  51E8               	movf	LCD_WriteInt@decenas& (0+255),w,b
  5459  001DDC  C0E9  F03D         	movff	LCD_WriteInt@unidades,??_LCD_WriteInt
  5460  001DE0  6A3E               	clrf	(??_LCD_WriteInt+1)& (0+255),c
  5461  001DE2  263D               	addwf	??_LCD_WriteInt,f,c
  5462  001DE4  0E00               	movlw	0
  5463  001DE6  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5464  001DE8  0100               	movlb	0	; () banked
  5465  001DEA  51E7               	movf	LCD_WriteInt@centenas& (0+255),w,b
  5466  001DEC  263D               	addwf	??_LCD_WriteInt,f,c
  5467  001DEE  0E00               	movlw	0
  5468  001DF0  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5469  001DF2  0100               	movlb	0	; () banked
  5470  001DF4  51E6               	movf	LCD_WriteInt@miles& (0+255),w,b
  5471  001DF6  263D               	addwf	??_LCD_WriteInt,f,c
  5472  001DF8  0E00               	movlw	0
  5473  001DFA  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5474  001DFC  1E3D               	comf	??_LCD_WriteInt,f,c
  5475  001DFE  1E3E               	comf	??_LCD_WriteInt+1,f,c
  5476  001E00  4A3D               	infsnz	??_LCD_WriteInt,f,c
  5477  001E02  2A3E               	incf	??_LCD_WriteInt+1,f,c
  5478  001E04  0100               	movlb	0	; () banked
  5479  001E06  51DA               	movf	LCD_WriteInt@number& (0+255),w,b
  5480  001E08  243D               	addwf	??_LCD_WriteInt,w,c
  5481  001E0A  6E31               	movwf	___lwdiv@dividend,c
  5482  001E0C  0100               	movlb	0	; () banked
  5483  001E0E  51DB               	movf	(LCD_WriteInt@number+1)& (0+255),w,b
  5484  001E10  203E               	addwfc	??_LCD_WriteInt+1,w,c
  5485  001E12  6E32               	movwf	___lwdiv@dividend+1,c
  5486  001E14  EC0C  F01C         	call	___lwdiv	;wreg free
  5487  001E18  C031  F038         	movff	?___lwdiv,___lwmod@dividend
  5488  001E1C  C032  F039         	movff	?___lwdiv+1,___lwmod@dividend+1
  5489  001E20  0E00               	movlw	0
  5490  001E22  6E3B               	movwf	___lwmod@divisor+1,c
  5491  001E24  0E0A               	movlw	10
  5492  001E26  6E3A               	movwf	___lwmod@divisor,c
  5493  001E28  EC11  F01D         	call	___lwmod	;wreg free
  5494  001E2C  5038               	movf	?___lwmod,w,c
  5495  001E2E  0100               	movlb	0	; () banked
  5496  001E30  6FDF               	movwf	LCD_WriteInt@decmiles& (0+255),b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;displayLCD20x4.c: 123: if (digitos > 5) digitos = 5;
  5500  001E32  0E05               	movlw	5
  5501  001E34  0100               	movlb	0	; () banked
  5502  001E36  65DC               	cpfsgt	LCD_WriteInt@digitos& (0+255),b
  5503  001E38  D003               	goto	l1322
  5504                           
  5505                           ; BSR set to: 0
  5506  001E3A  0E05               	movlw	5
  5507  001E3C  0100               	movlb	0	; () banked
  5508  001E3E  6FDC               	movwf	LCD_WriteInt@digitos& (0+255),b
  5509  001E40                     l1322:
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;displayLCD20x4.c: 125: unsigned char i = 0;
  5513  001E40  0E00               	movlw	0
  5514  001E42  0100               	movlb	0	; () banked
  5515  001E44  6FEA               	movwf	LCD_WriteInt@i& (0+255),b
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;displayLCD20x4.c: 126: string[i++] = '0' + decmiles;
  5519  001E46  0100               	movlb	0	; () banked
  5520  001E48  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5521  001E4A  0D01               	mullw	1
  5522  001E4C  0EE0               	movlw	low LCD_WriteInt@string
  5523  001E4E  24F3               	addwf	prodl,w,c
  5524  001E50  6ED9               	movwf	fsr2l,c
  5525  001E52  0E00               	movlw	high LCD_WriteInt@string
  5526  001E54  20F4               	addwfc	prodh,w,c
  5527  001E56  6EDA               	movwf	fsr2h,c
  5528  001E58  0100               	movlb	0	; () banked
  5529  001E5A  51DF               	movf	LCD_WriteInt@decmiles& (0+255),w,b
  5530  001E5C  0F30               	addlw	48
  5531  001E5E  6EDF               	movwf	indf2,c
  5532                           
  5533                           ; BSR set to: 0
  5534  001E60  0100               	movlb	0	; () banked
  5535  001E62  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;displayLCD20x4.c: 127: string[i++] = '0' + miles;
  5539  001E64  0100               	movlb	0	; () banked
  5540  001E66  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5541  001E68  0D01               	mullw	1
  5542  001E6A  0EE0               	movlw	low LCD_WriteInt@string
  5543  001E6C  24F3               	addwf	prodl,w,c
  5544  001E6E  6ED9               	movwf	fsr2l,c
  5545  001E70  0E00               	movlw	high LCD_WriteInt@string
  5546  001E72  20F4               	addwfc	prodh,w,c
  5547  001E74  6EDA               	movwf	fsr2h,c
  5548  001E76  0100               	movlb	0	; () banked
  5549  001E78  51E6               	movf	LCD_WriteInt@miles& (0+255),w,b
  5550  001E7A  0F30               	addlw	48
  5551  001E7C  6EDF               	movwf	indf2,c
  5552                           
  5553                           ; BSR set to: 0
  5554  001E7E  0100               	movlb	0	; () banked
  5555  001E80  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;displayLCD20x4.c: 128: string[i++] = '0' + centenas;
  5559  001E82  0100               	movlb	0	; () banked
  5560  001E84  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5561  001E86  0D01               	mullw	1
  5562  001E88  0EE0               	movlw	low LCD_WriteInt@string
  5563  001E8A  24F3               	addwf	prodl,w,c
  5564  001E8C  6ED9               	movwf	fsr2l,c
  5565  001E8E  0E00               	movlw	high LCD_WriteInt@string
  5566  001E90  20F4               	addwfc	prodh,w,c
  5567  001E92  6EDA               	movwf	fsr2h,c
  5568  001E94  0100               	movlb	0	; () banked
  5569  001E96  51E7               	movf	LCD_WriteInt@centenas& (0+255),w,b
  5570  001E98  0F30               	addlw	48
  5571  001E9A  6EDF               	movwf	indf2,c
  5572                           
  5573                           ; BSR set to: 0
  5574  001E9C  0100               	movlb	0	; () banked
  5575  001E9E  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;displayLCD20x4.c: 129: string[i++] = '0' + decenas;
  5579  001EA0  0100               	movlb	0	; () banked
  5580  001EA2  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5581  001EA4  0D01               	mullw	1
  5582  001EA6  0EE0               	movlw	low LCD_WriteInt@string
  5583  001EA8  24F3               	addwf	prodl,w,c
  5584  001EAA  6ED9               	movwf	fsr2l,c
  5585  001EAC  0E00               	movlw	high LCD_WriteInt@string
  5586  001EAE  20F4               	addwfc	prodh,w,c
  5587  001EB0  6EDA               	movwf	fsr2h,c
  5588  001EB2  0100               	movlb	0	; () banked
  5589  001EB4  51E8               	movf	LCD_WriteInt@decenas& (0+255),w,b
  5590  001EB6  0F30               	addlw	48
  5591  001EB8  6EDF               	movwf	indf2,c
  5592                           
  5593                           ; BSR set to: 0
  5594  001EBA  0100               	movlb	0	; () banked
  5595  001EBC  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;displayLCD20x4.c: 130: string[i++] = '0' + unidades;
  5599  001EBE  0100               	movlb	0	; () banked
  5600  001EC0  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5601  001EC2  0D01               	mullw	1
  5602  001EC4  0EE0               	movlw	low LCD_WriteInt@string
  5603  001EC6  24F3               	addwf	prodl,w,c
  5604  001EC8  6ED9               	movwf	fsr2l,c
  5605  001ECA  0E00               	movlw	high LCD_WriteInt@string
  5606  001ECC  20F4               	addwfc	prodh,w,c
  5607  001ECE  6EDA               	movwf	fsr2h,c
  5608  001ED0  0100               	movlb	0	; () banked
  5609  001ED2  51E9               	movf	LCD_WriteInt@unidades& (0+255),w,b
  5610  001ED4  0F30               	addlw	48
  5611  001ED6  6EDF               	movwf	indf2,c
  5612                           
  5613                           ; BSR set to: 0
  5614  001ED8  0100               	movlb	0	; () banked
  5615  001EDA  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;displayLCD20x4.c: 131: string[i++] = '\0';
  5619  001EDC  0100               	movlb	0	; () banked
  5620  001EDE  51EA               	movf	LCD_WriteInt@i& (0+255),w,b
  5621  001EE0  0D01               	mullw	1
  5622  001EE2  0EE0               	movlw	low LCD_WriteInt@string
  5623  001EE4  24F3               	addwf	prodl,w,c
  5624  001EE6  6ED9               	movwf	fsr2l,c
  5625  001EE8  0E00               	movlw	high LCD_WriteInt@string
  5626  001EEA  20F4               	addwfc	prodh,w,c
  5627  001EEC  6EDA               	movwf	fsr2h,c
  5628  001EEE  0E00               	movlw	0
  5629  001EF0  6EDF               	movwf	indf2,c
  5630                           
  5631                           ; BSR set to: 0
  5632  001EF2  0100               	movlb	0	; () banked
  5633  001EF4  2BEA               	incf	LCD_WriteInt@i& (0+255),f,b
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;displayLCD20x4.c: 132: LCD_Write(string + (5 - digitos), linea, offset);
  5637  001EF6  0100               	movlb	0	; () banked
  5638  001EF8  51DC               	movf	LCD_WriteInt@digitos& (0+255),w,b
  5639  001EFA  6E3D               	movwf	??_LCD_WriteInt& (0+255),c
  5640  001EFC  6A3E               	clrf	(??_LCD_WriteInt+1)& (0+255),c
  5641  001EFE  1E3D               	comf	??_LCD_WriteInt,f,c
  5642  001F00  1E3E               	comf	??_LCD_WriteInt+1,f,c
  5643  001F02  4A3D               	infsnz	??_LCD_WriteInt,f,c
  5644  001F04  2A3E               	incf	??_LCD_WriteInt+1,f,c
  5645  001F06  0E05               	movlw	5
  5646  001F08  263D               	addwf	??_LCD_WriteInt,f,c
  5647  001F0A  0E00               	movlw	0
  5648  001F0C  223E               	addwfc	??_LCD_WriteInt+1,f,c
  5649  001F0E  0EE0               	movlw	low LCD_WriteInt@string
  5650  001F10  243D               	addwf	??_LCD_WriteInt,w,c
  5651  001F12  6E1B               	movwf	LCD_Write@string,c
  5652  001F14  0E00               	movlw	high LCD_WriteInt@string
  5653  001F16  203E               	addwfc	??_LCD_WriteInt+1,w,c
  5654  001F18  6E1C               	movwf	LCD_Write@string+1,c
  5655  001F1A  C0DD  F01D         	movff	LCD_WriteInt@linea,LCD_Write@linea
  5656  001F1E  C0DE  F01E         	movff	LCD_WriteInt@offset,LCD_Write@offset
  5657  001F22  EC82  F01C         	call	_LCD_Write	;wreg free
  5658  001F26  0012               	return		;funcret
  5659  001F28                     __end_of_LCD_WriteInt:
  5660                           	opt stack 0
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           intcon	equ	0xFF2
  5668                           intcon2	equ	0xFF1
  5669                           postinc0	equ	0xFEE
  5670                           wreg	equ	0xFE8
  5671                           indf2	equ	0xFDF
  5672                           postinc2	equ	0xFDE
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function ___lwmod *****************
  5678 ;; Defined at:
  5679 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  dividend        2   55[COMRAM] unsigned int 
  5682 ;;  divisor         2   57[COMRAM] unsigned int 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  counter         1   59[COMRAM] unsigned char 
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  2   55[COMRAM] unsigned int 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;Total ram usage:        5 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    4
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_LCD_WriteInt
  5705 ;; This function uses a non-reentrant model
  5706 ;;
  5707                           
  5708                           	psect	text40
  5709  003A22                     __ptext40:
  5710                           	opt stack 0
  5711  003A22                     ___lwmod:
  5712                           	opt stack 23
  5713                           
  5714                           ;incstack = 0
  5715  003A22  503A               	movf	___lwmod@divisor,w,c
  5716  003A24  103B               	iorwf	___lwmod@divisor+1,w,c
  5717  003A26  B4D8               	btfsc	status,2,c
  5718  003A28  D018               	goto	l1943
  5719  003A2A  0E01               	movlw	1
  5720  003A2C  6E3C               	movwf	___lwmod@counter,c
  5721  003A2E  D004               	goto	l6602
  5722  003A30                     l6600:
  5723  003A30  90D8               	bcf	status,0,c
  5724  003A32  363A               	rlcf	___lwmod@divisor,f,c
  5725  003A34  363B               	rlcf	___lwmod@divisor+1,f,c
  5726  003A36  2A3C               	incf	___lwmod@counter,f,c
  5727  003A38                     l6602:
  5728  003A38  AE3B               	btfss	___lwmod@divisor+1,7,c
  5729  003A3A  D7FA               	goto	l6600
  5730  003A3C                     l6604:
  5731  003A3C  503A               	movf	___lwmod@divisor,w,c
  5732  003A3E  5C38               	subwf	___lwmod@dividend,w,c
  5733  003A40  503B               	movf	___lwmod@divisor+1,w,c
  5734  003A42  5839               	subwfb	___lwmod@dividend+1,w,c
  5735  003A44  A0D8               	btfss	status,0,c
  5736  003A46  D004               	goto	l6608
  5737  003A48  503A               	movf	___lwmod@divisor,w,c
  5738  003A4A  5E38               	subwf	___lwmod@dividend,f,c
  5739  003A4C  503B               	movf	___lwmod@divisor+1,w,c
  5740  003A4E  5A39               	subwfb	___lwmod@dividend+1,f,c
  5741  003A50                     l6608:
  5742  003A50  90D8               	bcf	status,0,c
  5743  003A52  323B               	rrcf	___lwmod@divisor+1,f,c
  5744  003A54  323A               	rrcf	___lwmod@divisor,f,c
  5745  003A56  2E3C               	decfsz	___lwmod@counter,f,c
  5746  003A58  D7F1               	goto	l6604
  5747  003A5A                     l1943:
  5748  003A5A  C038  F038         	movff	___lwmod@dividend,?___lwmod
  5749  003A5E  C039  F039         	movff	___lwmod@dividend+1,?___lwmod+1
  5750  003A62  0012               	return		;funcret
  5751  003A64                     __end_of___lwmod:
  5752                           	opt stack 0
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           intcon	equ	0xFF2
  5760                           intcon2	equ	0xFF1
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           indf2	equ	0xFDF
  5764                           postinc2	equ	0xFDE
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function _LCD_Write *****************
  5770 ;; Defined at:
  5771 ;;		line 66 in file "displayLCD20x4.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  string          2   26[COMRAM] PTR const unsigned char 
  5774 ;;		 -> LCD_WriteInt@string(6), VERSION_HARDWARE(6), VERSION_FIRMWARE(4), STR_4(21), 
  5775 ;;		 -> STR_3(21), STR_2(21), STR_1(21), 
  5776 ;;  linea           1   28[COMRAM] unsigned char 
  5777 ;;  offset          1   29[COMRAM] unsigned char 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  dlinea          1   30[COMRAM] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5793 ;;Total ram usage:        5 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    8
  5796 ;; This function calls:
  5797 ;;		_lcd_write_instruction_4d
  5798 ;;		_lcd_write_string_4d
  5799 ;; This function is called by:
  5800 ;;		_Setup_Display_LCD
  5801 ;;		_LCD_WriteInt
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text41
  5806  003904                     __ptext41:
  5807                           	opt stack 0
  5808  003904                     _LCD_Write:
  5809                           	opt stack 19
  5810                           
  5811                           ;displayLCD20x4.c: 68: unsigned char dlinea = 0x00;
  5812                           
  5813                           ;incstack = 0
  5814  003904  0E00               	movlw	0
  5815  003906  6E1F               	movwf	LCD_Write@dlinea,c
  5816                           
  5817                           ;displayLCD20x4.c: 71: switch(linea)
  5818  003908  D009               	goto	l6458
  5819  00390A                     l6448:
  5820                           
  5821                           ;displayLCD20x4.c: 74: dlinea = 0x00;
  5822  00390A  0E00               	movlw	0
  5823  00390C  D005               	goto	L11
  5824  00390E                     l6450:
  5825                           
  5826                           ;displayLCD20x4.c: 77: dlinea = 0x40;
  5827  00390E  0E40               	movlw	64
  5828  003910  D003               	goto	L11
  5829  003912                     l6452:
  5830                           
  5831                           ;displayLCD20x4.c: 80: dlinea = 0x14;
  5832  003912  0E14               	movlw	20
  5833  003914  D001               	goto	L11
  5834  003916                     l6454:
  5835                           
  5836                           ;displayLCD20x4.c: 83: dlinea = 0x54;
  5837  003916  0E54               	movlw	84
  5838  003918                     L11:
  5839  003918  6E1F               	movwf	LCD_Write@dlinea,c
  5840                           
  5841                           ;displayLCD20x4.c: 85: }
  5842                           
  5843                           ;displayLCD20x4.c: 84: break;
  5844  00391A  D00D               	goto	l6460
  5845  00391C                     l6458:
  5846  00391C  501D               	movf	LCD_Write@linea,w,c
  5847                           
  5848                           ; Switch size 1, requested type "space"
  5849                           ; Number of cases is 4, Range of values is 1 to 4
  5850                           ; switch strategies available:
  5851                           ; Name         Instructions Cycles
  5852                           ; simple_byte           13     7 (average)
  5853                           ;	Chosen strategy is simple_byte
  5854  00391E  0A01               	xorlw	1	; case 1
  5855  003920  B4D8               	btfsc	status,2,c
  5856  003922  D7F3               	goto	l6448
  5857  003924  0A03               	xorlw	3	; case 2
  5858  003926  B4D8               	btfsc	status,2,c
  5859  003928  D7F2               	goto	l6450
  5860  00392A  0A01               	xorlw	1	; case 3
  5861  00392C  B4D8               	btfsc	status,2,c
  5862  00392E  D7F1               	goto	l6452
  5863  003930  0A07               	xorlw	7	; case 4
  5864  003932  B4D8               	btfsc	status,2,c
  5865  003934  D7F0               	goto	l6454
  5866  003936                     l6460:
  5867                           
  5868                           ;displayLCD20x4.c: 87: lcd_write_instruction_4d(0b10000000 | dlinea + offset);
  5869  003936  501F               	movf	LCD_Write@dlinea,w,c
  5870  003938  241E               	addwf	LCD_Write@offset,w,c
  5871  00393A  0980               	iorlw	128
  5872  00393C  EC22  F020         	call	_lcd_write_instruction_4d
  5873                           
  5874                           ;displayLCD20x4.c: 88: lcd_write_string_4d(string);
  5875  003940  C01B  F015         	movff	LCD_Write@string,lcd_write_string_4d@theString
  5876  003944  C01C  F016         	movff	LCD_Write@string+1,lcd_write_string_4d@theString+1
  5877  003948  EC8F  F019         	call	_lcd_write_string_4d	;wreg free
  5878  00394C  0012               	return		;funcret
  5879  00394E                     __end_of_LCD_Write:
  5880                           	opt stack 0
  5881                           tblptru	equ	0xFF8
  5882                           tblptrh	equ	0xFF7
  5883                           tblptrl	equ	0xFF6
  5884                           tablat	equ	0xFF5
  5885                           prodh	equ	0xFF4
  5886                           prodl	equ	0xFF3
  5887                           intcon	equ	0xFF2
  5888                           intcon2	equ	0xFF1
  5889                           postinc0	equ	0xFEE
  5890                           wreg	equ	0xFE8
  5891                           indf2	equ	0xFDF
  5892                           postinc2	equ	0xFDE
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _lcd_write_string_4d *****************
  5898 ;; Defined at:
  5899 ;;		line 218 in file "displayLCD20x4.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  theString       2   20[COMRAM] PTR const unsigned char 
  5902 ;;		 -> LCD_WriteInt@string(6), VERSION_HARDWARE(6), VERSION_FIRMWARE(4), STR_4(21), 
  5903 ;;		 -> STR_3(21), STR_2(21), STR_1(21), 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  i               2   24[COMRAM] volatile int 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5915 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;Total ram usage:        6 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    7
  5922 ;; This function calls:
  5923 ;;		_Delay
  5924 ;;		_lcd_write_character_4d
  5925 ;; This function is called by:
  5926 ;;		_LCD_Write
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text42
  5931  00331E                     __ptext42:
  5932                           	opt stack 0
  5933  00331E                     _lcd_write_string_4d:
  5934                           	opt stack 19
  5935                           
  5936                           ;displayLCD20x4.c: 220: volatile int i = 0;
  5937                           
  5938                           ;incstack = 0
  5939  00331E  0E00               	movlw	0
  5940  003320  6E1A               	movwf	lcd_write_string_4d@i+1,c	;volatile
  5941  003322  0E00               	movlw	0
  5942  003324  6E19               	movwf	lcd_write_string_4d@i,c	;volatile
  5943                           
  5944                           ;displayLCD20x4.c: 221: while (theString[i] != 0)
  5945  003326  D021               	goto	l6406
  5946  003328                     l6400:
  5947                           
  5948                           ;displayLCD20x4.c: 222: {
  5949                           ;displayLCD20x4.c: 223: lcd_write_character_4d(theString[i]);
  5950  003328  5019               	movf	lcd_write_string_4d@i,w,c	;volatile
  5951  00332A  2415               	addwf	lcd_write_string_4d@theString,w,c
  5952  00332C  6E17               	movwf	??_lcd_write_string_4d& (0+255),c
  5953  00332E  501A               	movf	lcd_write_string_4d@i+1,w,c	;volatile
  5954  003330  2016               	addwfc	lcd_write_string_4d@theString+1,w,c
  5955  003332  6E18               	movwf	(??_lcd_write_string_4d+1)& (0+255),c
  5956  003334  C017  FFF6         	movff	??_lcd_write_string_4d,tblptrl
  5957  003338  C018  FFF7         	movff	??_lcd_write_string_4d+1,tblptrh
  5958  00333C  0E00               	movlw	low (__smallconst shr (0+16))
  5959  00333E  6EF8               	movwf	tblptru,c
  5960  003340  0E0F               	movlw	(high __ramtop+-1)
  5961  003342  64F7               	cpfsgt	tblptrh,c
  5962  003344  D003               	bra	u4487
  5963  003346  0008               	tblrd		*
  5964  003348  50F5               	movf	tablat,w,c
  5965  00334A  D005               	bra	u4480
  5966  00334C                     u4487:
  5967  00334C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5968  003350  CFF7 FFEA          	movff	tblptrh,fsr0h
  5969  003354  50EF               	movf	indf0,w,c
  5970  003356                     u4480:
  5971  003356  EC2D  F020         	call	_lcd_write_character_4d
  5972                           
  5973                           ;displayLCD20x4.c: 224: Delay(1 * ((unsigned long)(2)));
  5974  00335A  0E00               	movlw	0
  5975  00335C  6E12               	movwf	Delay@Timeout+1,c
  5976  00335E  0E02               	movlw	2
  5977  003360  6E11               	movwf	Delay@Timeout,c
  5978  003362  ECB9  F01F         	call	_Delay	;wreg free
  5979                           
  5980                           ;displayLCD20x4.c: 225: i++;
  5981  003366  4A19               	infsnz	lcd_write_string_4d@i,f,c	;volatile
  5982  003368  2A1A               	incf	lcd_write_string_4d@i+1,f,c	;volatile
  5983  00336A                     l6406:
  5984  00336A  5019               	movf	lcd_write_string_4d@i,w,c	;volatile
  5985  00336C  2415               	addwf	lcd_write_string_4d@theString,w,c
  5986  00336E  6E17               	movwf	??_lcd_write_string_4d& (0+255),c
  5987  003370  501A               	movf	lcd_write_string_4d@i+1,w,c	;volatile
  5988  003372  2016               	addwfc	lcd_write_string_4d@theString+1,w,c
  5989  003374  6E18               	movwf	(??_lcd_write_string_4d+1)& (0+255),c
  5990  003376  C017  FFF6         	movff	??_lcd_write_string_4d,tblptrl
  5991  00337A  C018  FFF7         	movff	??_lcd_write_string_4d+1,tblptrh
  5992  00337E  0E00               	movlw	low (__smallconst shr (0+16))
  5993  003380  6EF8               	movwf	tblptru,c
  5994  003382  0E0F               	movlw	(high __ramtop+-1)
  5995  003384  64F7               	cpfsgt	tblptrh,c
  5996  003386  D003               	bra	u4497
  5997  003388  0008               	tblrd		*
  5998  00338A  50F5               	movf	tablat,w,c
  5999  00338C  D005               	bra	u4490
  6000  00338E                     u4497:
  6001  00338E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6002  003392  CFF7 FFEA          	movff	tblptrh,fsr0h
  6003  003396  50EF               	movf	indf0,w,c
  6004  003398                     u4490:
  6005  003398  0900               	iorlw	0
  6006  00339A  B4D8               	btfsc	status,2,c
  6007  00339C  0012               	return	
  6008  00339E  D7C4               	goto	l6400
  6009  0033A0                     __end_of_lcd_write_string_4d:
  6010                           	opt stack 0
  6011                           tblptru	equ	0xFF8
  6012                           tblptrh	equ	0xFF7
  6013                           tblptrl	equ	0xFF6
  6014                           tablat	equ	0xFF5
  6015                           prodh	equ	0xFF4
  6016                           prodl	equ	0xFF3
  6017                           intcon	equ	0xFF2
  6018                           intcon2	equ	0xFF1
  6019                           indf0	equ	0xFEF
  6020                           postinc0	equ	0xFEE
  6021                           fsr0h	equ	0xFEA
  6022                           fsr0l	equ	0xFE9
  6023                           wreg	equ	0xFE8
  6024                           indf2	equ	0xFDF
  6025                           postinc2	equ	0xFDE
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _Send_Hardware *****************
  6031 ;; Defined at:
  6032 ;;		line 140 in file "devices.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  msg             2   49[COMRAM] PTR struct .
  6035 ;;		 -> I2CQueue(160), UARTQueue(160), 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  i               2   53[COMRAM] int 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6047 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;Total ram usage:        6 bytes
  6052 ;; Hardware stack levels used:    1
  6053 ;; Hardware stack levels required when called:    8
  6054 ;; This function calls:
  6055 ;;		_Send
  6056 ;; This function is called by:
  6057 ;;		_ProcessDevice
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text43
  6062  002FFE                     __ptext43:
  6063                           	opt stack 0
  6064  002FFE                     _Send_Hardware:
  6065                           	opt stack 19
  6066                           
  6067                           ;devices.c: 142: msg->Class = Me.Class;
  6068                           
  6069                           ;incstack = 0
  6070  002FFE  EE20 F002          	lfsr	2,2
  6071  003002  5032               	movf	Send_Hardware@msg,w,c
  6072  003004  26D9               	addwf	fsr2l,f,c
  6073  003006  5033               	movf	Send_Hardware@msg+1,w,c
  6074  003008  22DA               	addwfc	fsr2h,f,c
  6075  00300A  C100  FFDF         	movff	_Me,indf2	;volatile
  6076                           
  6077                           ;devices.c: 143: msg->ID = Me.ID;
  6078  00300E  EE20 F003          	lfsr	2,3
  6079  003012  5032               	movf	Send_Hardware@msg,w,c
  6080  003014  26D9               	addwf	fsr2l,f,c
  6081  003016  5033               	movf	Send_Hardware@msg+1,w,c
  6082  003018  22DA               	addwfc	fsr2h,f,c
  6083  00301A  C101  FFDF         	movff	_Me+1,indf2	;volatile
  6084                           
  6085                           ;devices.c: 144: msg->CommandH = '?';
  6086  00301E  EE20 F004          	lfsr	2,4
  6087  003022  5032               	movf	Send_Hardware@msg,w,c
  6088  003024  26D9               	addwf	fsr2l,f,c
  6089  003026  5033               	movf	Send_Hardware@msg+1,w,c
  6090  003028  22DA               	addwfc	fsr2h,f,c
  6091  00302A  0E3F               	movlw	63
  6092  00302C  6EDF               	movwf	indf2,c
  6093                           
  6094                           ;devices.c: 145: msg->CommandL = 'H';
  6095  00302E  EE20 F005          	lfsr	2,5
  6096  003032  5032               	movf	Send_Hardware@msg,w,c
  6097  003034  26D9               	addwf	fsr2l,f,c
  6098  003036  5033               	movf	Send_Hardware@msg+1,w,c
  6099  003038  22DA               	addwfc	fsr2h,f,c
  6100  00303A  0E48               	movlw	72
  6101  00303C  6EDF               	movwf	indf2,c
  6102                           
  6103                           ;devices.c: 146: for (int i = 0; i < 4; i++)
  6104  00303E  0E00               	movlw	0
  6105  003040  6E37               	movwf	Send_Hardware@i+1,c
  6106  003042  0E00               	movlw	0
  6107  003044  6E36               	movwf	Send_Hardware@i,c
  6108  003046                     l6830:
  6109  003046  BE37               	btfsc	Send_Hardware@i+1,7,c
  6110  003048  D006               	goto	l6834
  6111  00304A  5037               	movf	Send_Hardware@i+1,w,c
  6112  00304C  E11F               	bnz	l6840
  6113  00304E  0E04               	movlw	4
  6114  003050  5C36               	subwf	Send_Hardware@i,w,c
  6115  003052  B0D8               	btfsc	status,0,c
  6116  003054  D01B               	goto	l6840
  6117  003056                     l6834:
  6118                           
  6119                           ;devices.c: 147: msg->Params[i] = VERSION_HARDWARE[i];
  6120  003056  0E01               	movlw	low _VERSION_HARDWARE
  6121  003058  2436               	addwf	Send_Hardware@i,w,c
  6122  00305A  6EF6               	movwf	tblptrl,c
  6123  00305C  0E10               	movlw	high _VERSION_HARDWARE
  6124  00305E  2037               	addwfc	Send_Hardware@i+1,w,c
  6125  003060  6EF7               	movwf	tblptrh,c
  6126  003062                     	if	1	;There are 3 active tblptr bytes
  6127  003062  6AF8               	clrf	tblptru,c
  6128  003064  0E00               	movlw	low (__mediumconst shr (0+16))
  6129  003066  22F8               	addwfc	tblptru,f,c
  6130  003068                     	endif
  6131  003068  0E06               	movlw	6
  6132  00306A  2436               	addwf	Send_Hardware@i,w,c
  6133  00306C  6E34               	movwf	??_Send_Hardware& (0+255),c
  6134  00306E  0E00               	movlw	0
  6135  003070  2037               	addwfc	Send_Hardware@i+1,w,c
  6136  003072  6E35               	movwf	(??_Send_Hardware+1)& (0+255),c
  6137  003074  5034               	movf	??_Send_Hardware,w,c
  6138  003076  2432               	addwf	Send_Hardware@msg,w,c
  6139  003078  6ED9               	movwf	fsr2l,c
  6140  00307A  5035               	movf	??_Send_Hardware+1,w,c
  6141  00307C  2033               	addwfc	Send_Hardware@msg+1,w,c
  6142  00307E  6EDA               	movwf	fsr2h,c
  6143  003080  0008               	tblrd		*
  6144  003082  CFF5 FFDF          	movff	tablat,indf2
  6145  003086  4A36               	infsnz	Send_Hardware@i,f,c
  6146  003088  2A37               	incf	Send_Hardware@i+1,f,c
  6147  00308A  D7DD               	goto	l6830
  6148  00308C                     l6840:
  6149                           
  6150                           ;devices.c: 148: msg->ParamCount = 4;
  6151  00308C  EE20 F00D          	lfsr	2,13
  6152  003090  5032               	movf	Send_Hardware@msg,w,c
  6153  003092  26D9               	addwf	fsr2l,f,c
  6154  003094  5033               	movf	Send_Hardware@msg+1,w,c
  6155  003096  22DA               	addwfc	fsr2h,f,c
  6156  003098  0E04               	movlw	4
  6157  00309A  6EDF               	movwf	indf2,c
  6158                           
  6159                           ;devices.c: 149: Send(msg);
  6160  00309C  C032  F030         	movff	Send_Hardware@msg,Send@msg
  6161  0030A0  C033  F031         	movff	Send_Hardware@msg+1,Send@msg+1
  6162  0030A4  EC5C  F01C         	call	_Send	;wreg free
  6163  0030A8  0012               	return		;funcret
  6164  0030AA                     __end_of_Send_Hardware:
  6165                           	opt stack 0
  6166                           tblptru	equ	0xFF8
  6167                           tblptrh	equ	0xFF7
  6168                           tblptrl	equ	0xFF6
  6169                           tablat	equ	0xFF5
  6170                           prodh	equ	0xFF4
  6171                           prodl	equ	0xFF3
  6172                           intcon	equ	0xFF2
  6173                           intcon2	equ	0xFF1
  6174                           indf0	equ	0xFEF
  6175                           postinc0	equ	0xFEE
  6176                           fsr0h	equ	0xFEA
  6177                           fsr0l	equ	0xFE9
  6178                           wreg	equ	0xFE8
  6179                           indf2	equ	0xFDF
  6180                           postinc2	equ	0xFDE
  6181                           fsr2h	equ	0xFDA
  6182                           fsr2l	equ	0xFD9
  6183                           status	equ	0xFD8
  6184                           
  6185 ;; *************** function _Send_Firmware *****************
  6186 ;; Defined at:
  6187 ;;		line 129 in file "devices.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  msg             2   49[COMRAM] PTR struct .
  6190 ;;		 -> I2CQueue(160), UARTQueue(160), 
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  i               2   53[COMRAM] int 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      void 
  6195 ;; Registers used:
  6196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6205 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6206 ;;Total ram usage:        6 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    8
  6209 ;; This function calls:
  6210 ;;		_Send
  6211 ;; This function is called by:
  6212 ;;		_ProcessDevice
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text44
  6217  0030AA                     __ptext44:
  6218                           	opt stack 0
  6219  0030AA                     _Send_Firmware:
  6220                           	opt stack 19
  6221                           
  6222                           ;devices.c: 131: msg->Class = Me.Class;
  6223                           
  6224                           ;incstack = 0
  6225  0030AA  EE20 F002          	lfsr	2,2
  6226  0030AE  5032               	movf	Send_Firmware@msg,w,c
  6227  0030B0  26D9               	addwf	fsr2l,f,c
  6228  0030B2  5033               	movf	Send_Firmware@msg+1,w,c
  6229  0030B4  22DA               	addwfc	fsr2h,f,c
  6230  0030B6  C100  FFDF         	movff	_Me,indf2	;volatile
  6231                           
  6232                           ;devices.c: 132: msg->ID = Me.ID;
  6233  0030BA  EE20 F003          	lfsr	2,3
  6234  0030BE  5032               	movf	Send_Firmware@msg,w,c
  6235  0030C0  26D9               	addwf	fsr2l,f,c
  6236  0030C2  5033               	movf	Send_Firmware@msg+1,w,c
  6237  0030C4  22DA               	addwfc	fsr2h,f,c
  6238  0030C6  C101  FFDF         	movff	_Me+1,indf2	;volatile
  6239                           
  6240                           ;devices.c: 133: msg->CommandH = '?';
  6241  0030CA  EE20 F004          	lfsr	2,4
  6242  0030CE  5032               	movf	Send_Firmware@msg,w,c
  6243  0030D0  26D9               	addwf	fsr2l,f,c
  6244  0030D2  5033               	movf	Send_Firmware@msg+1,w,c
  6245  0030D4  22DA               	addwfc	fsr2h,f,c
  6246  0030D6  0E3F               	movlw	63
  6247  0030D8  6EDF               	movwf	indf2,c
  6248                           
  6249                           ;devices.c: 134: msg->CommandL = 'F';
  6250  0030DA  EE20 F005          	lfsr	2,5
  6251  0030DE  5032               	movf	Send_Firmware@msg,w,c
  6252  0030E0  26D9               	addwf	fsr2l,f,c
  6253  0030E2  5033               	movf	Send_Firmware@msg+1,w,c
  6254  0030E4  22DA               	addwfc	fsr2h,f,c
  6255  0030E6  0E46               	movlw	70
  6256  0030E8  6EDF               	movwf	indf2,c
  6257                           
  6258                           ;devices.c: 135: for (int i = 0; i < 4; i++)
  6259  0030EA  0E00               	movlw	0
  6260  0030EC  6E37               	movwf	Send_Firmware@i+1,c
  6261  0030EE  0E00               	movlw	0
  6262  0030F0  6E36               	movwf	Send_Firmware@i,c
  6263  0030F2                     l6812:
  6264  0030F2  BE37               	btfsc	Send_Firmware@i+1,7,c
  6265  0030F4  D006               	goto	l6816
  6266  0030F6  5037               	movf	Send_Firmware@i+1,w,c
  6267  0030F8  E11F               	bnz	l6822
  6268  0030FA  0E04               	movlw	4
  6269  0030FC  5C36               	subwf	Send_Firmware@i,w,c
  6270  0030FE  B0D8               	btfsc	status,0,c
  6271  003100  D01B               	goto	l6822
  6272  003102                     l6816:
  6273                           
  6274                           ;devices.c: 136: msg->Params[i] = VERSION_FIRMWARE[i];
  6275  003102  0E07               	movlw	low _VERSION_FIRMWARE
  6276  003104  2436               	addwf	Send_Firmware@i,w,c
  6277  003106  6EF6               	movwf	tblptrl,c
  6278  003108  0E10               	movlw	high _VERSION_FIRMWARE
  6279  00310A  2037               	addwfc	Send_Firmware@i+1,w,c
  6280  00310C  6EF7               	movwf	tblptrh,c
  6281  00310E                     	if	1	;There are 3 active tblptr bytes
  6282  00310E  6AF8               	clrf	tblptru,c
  6283  003110  0E00               	movlw	low (__mediumconst shr (0+16))
  6284  003112  22F8               	addwfc	tblptru,f,c
  6285  003114                     	endif
  6286  003114  0E06               	movlw	6
  6287  003116  2436               	addwf	Send_Firmware@i,w,c
  6288  003118  6E34               	movwf	??_Send_Firmware& (0+255),c
  6289  00311A  0E00               	movlw	0
  6290  00311C  2037               	addwfc	Send_Firmware@i+1,w,c
  6291  00311E  6E35               	movwf	(??_Send_Firmware+1)& (0+255),c
  6292  003120  5034               	movf	??_Send_Firmware,w,c
  6293  003122  2432               	addwf	Send_Firmware@msg,w,c
  6294  003124  6ED9               	movwf	fsr2l,c
  6295  003126  5035               	movf	??_Send_Firmware+1,w,c
  6296  003128  2033               	addwfc	Send_Firmware@msg+1,w,c
  6297  00312A  6EDA               	movwf	fsr2h,c
  6298  00312C  0008               	tblrd		*
  6299  00312E  CFF5 FFDF          	movff	tablat,indf2
  6300  003132  4A36               	infsnz	Send_Firmware@i,f,c
  6301  003134  2A37               	incf	Send_Firmware@i+1,f,c
  6302  003136  D7DD               	goto	l6812
  6303  003138                     l6822:
  6304                           
  6305                           ;devices.c: 137: msg->ParamCount = 4;
  6306  003138  EE20 F00D          	lfsr	2,13
  6307  00313C  5032               	movf	Send_Firmware@msg,w,c
  6308  00313E  26D9               	addwf	fsr2l,f,c
  6309  003140  5033               	movf	Send_Firmware@msg+1,w,c
  6310  003142  22DA               	addwfc	fsr2h,f,c
  6311  003144  0E04               	movlw	4
  6312  003146  6EDF               	movwf	indf2,c
  6313                           
  6314                           ;devices.c: 138: Send(msg);
  6315  003148  C032  F030         	movff	Send_Firmware@msg,Send@msg
  6316  00314C  C033  F031         	movff	Send_Firmware@msg+1,Send@msg+1
  6317  003150  EC5C  F01C         	call	_Send	;wreg free
  6318  003154  0012               	return		;funcret
  6319  003156                     __end_of_Send_Firmware:
  6320                           	opt stack 0
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           intcon	equ	0xFF2
  6328                           intcon2	equ	0xFF1
  6329                           indf0	equ	0xFEF
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function _Send_ACK *****************
  6341 ;; Defined at:
  6342 ;;		line 110 in file "devices.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  msg             2   49[COMRAM] PTR struct .
  6345 ;;		 -> I2CQueue(160), UARTQueue(160), 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;		None
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      void 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;Total ram usage:        2 bytes
  6362 ;; Hardware stack levels used:    1
  6363 ;; Hardware stack levels required when called:    8
  6364 ;; This function calls:
  6365 ;;		_Send
  6366 ;; This function is called by:
  6367 ;;		_ProcessDevice
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text45
  6372  0037BA                     __ptext45:
  6373                           	opt stack 0
  6374  0037BA                     _Send_ACK:
  6375                           	opt stack 19
  6376                           
  6377                           ;devices.c: 112: msg->Class = Me.Class;
  6378                           
  6379                           ;incstack = 0
  6380  0037BA  EE20 F002          	lfsr	2,2
  6381  0037BE  5032               	movf	Send_ACK@msg,w,c
  6382  0037C0  26D9               	addwf	fsr2l,f,c
  6383  0037C2  5033               	movf	Send_ACK@msg+1,w,c
  6384  0037C4  22DA               	addwfc	fsr2h,f,c
  6385  0037C6  C100  FFDF         	movff	_Me,indf2	;volatile
  6386                           
  6387                           ;devices.c: 113: msg->ID = Me.ID;
  6388  0037CA  EE20 F003          	lfsr	2,3
  6389  0037CE  5032               	movf	Send_ACK@msg,w,c
  6390  0037D0  26D9               	addwf	fsr2l,f,c
  6391  0037D2  5033               	movf	Send_ACK@msg+1,w,c
  6392  0037D4  22DA               	addwfc	fsr2h,f,c
  6393  0037D6  C101  FFDF         	movff	_Me+1,indf2	;volatile
  6394                           
  6395                           ;devices.c: 114: msg->CommandH = 0x06;
  6396  0037DA  EE20 F004          	lfsr	2,4
  6397  0037DE  5032               	movf	Send_ACK@msg,w,c
  6398  0037E0  26D9               	addwf	fsr2l,f,c
  6399  0037E2  5033               	movf	Send_ACK@msg+1,w,c
  6400  0037E4  22DA               	addwfc	fsr2h,f,c
  6401  0037E6  0E06               	movlw	6
  6402  0037E8  6EDF               	movwf	indf2,c
  6403                           
  6404                           ;devices.c: 115: msg->CommandL = 0x06;
  6405  0037EA  EE20 F005          	lfsr	2,5
  6406  0037EE  5032               	movf	Send_ACK@msg,w,c
  6407  0037F0  26D9               	addwf	fsr2l,f,c
  6408  0037F2  5033               	movf	Send_ACK@msg+1,w,c
  6409  0037F4  22DA               	addwfc	fsr2h,f,c
  6410  0037F6  0E06               	movlw	6
  6411  0037F8  6EDF               	movwf	indf2,c
  6412                           
  6413                           ;devices.c: 116: msg->ParamCount = 0;
  6414  0037FA  EE20 F00D          	lfsr	2,13
  6415  0037FE  5032               	movf	Send_ACK@msg,w,c
  6416  003800  26D9               	addwf	fsr2l,f,c
  6417  003802  5033               	movf	Send_ACK@msg+1,w,c
  6418  003804  22DA               	addwfc	fsr2h,f,c
  6419  003806  0E00               	movlw	0
  6420  003808  6EDF               	movwf	indf2,c
  6421                           
  6422                           ;devices.c: 117: Send(msg);
  6423  00380A  C032  F030         	movff	Send_ACK@msg,Send@msg
  6424  00380E  C033  F031         	movff	Send_ACK@msg+1,Send@msg+1
  6425  003812  EC5C  F01C         	call	_Send	;wreg free
  6426  003816  0012               	return		;funcret
  6427  003818                     __end_of_Send_ACK:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           intcon	equ	0xFF2
  6436                           intcon2	equ	0xFF1
  6437                           indf0	equ	0xFEF
  6438                           postinc0	equ	0xFEE
  6439                           fsr0h	equ	0xFEA
  6440                           fsr0l	equ	0xFE9
  6441                           wreg	equ	0xFE8
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function _SaveID *****************
  6449 ;; Defined at:
  6450 ;;		line 66 in file "properties.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  id              1    wreg     unsigned char 
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;  id              1   20[COMRAM] unsigned char 
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, status,2, status,0, cstack
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;Total ram usage:        1 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    5
  6471 ;; This function calls:
  6472 ;;		_DATAEE_WriteByte
  6473 ;; This function is called by:
  6474 ;;		_TC_Devices_Init
  6475 ;;		_ProcessDevice
  6476 ;; This function uses a non-reentrant model
  6477 ;;
  6478                           
  6479                           	psect	text46
  6480  004070                     __ptext46:
  6481                           	opt stack 0
  6482  004070                     _SaveID:
  6483                           	opt stack 23
  6484                           
  6485                           ;incstack = 0
  6486                           ;SaveID@id stored from wreg
  6487  004070  6E15               	movwf	SaveID@id,c
  6488                           
  6489                           ;properties.c: 67: DATAEE_WriteByte(0x100 + 1 + 1, id);
  6490  004072  0E01               	movlw	1
  6491  004074  6E12               	movwf	DATAEE_WriteByte@bAdd+1,c
  6492  004076  0E02               	movlw	2
  6493  004078  6E11               	movwf	DATAEE_WriteByte@bAdd,c
  6494  00407A  C015  F013         	movff	SaveID@id,DATAEE_WriteByte@bData
  6495  00407E  ECAE  F01D         	call	_DATAEE_WriteByte	;wreg free
  6496  004082  0012               	return		;funcret
  6497  004084                     __end_of_SaveID:
  6498                           	opt stack 0
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           indf0	equ	0xFEF
  6508                           postinc0	equ	0xFEE
  6509                           fsr0h	equ	0xFEA
  6510                           fsr0l	equ	0xFE9
  6511                           wreg	equ	0xFE8
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           fsr2h	equ	0xFDA
  6515                           fsr2l	equ	0xFD9
  6516                           status	equ	0xFD8
  6517                           
  6518 ;; *************** function _SaveClass *****************
  6519 ;; Defined at:
  6520 ;;		line 63 in file "properties.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;  class           1    wreg     unsigned char 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  class           1   20[COMRAM] unsigned char 
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  1    wreg      void 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2, status,0, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;Total ram usage:        1 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    5
  6541 ;; This function calls:
  6542 ;;		_DATAEE_WriteByte
  6543 ;; This function is called by:
  6544 ;;		_TC_Devices_Init
  6545 ;;		_ProcessDevice
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text47
  6550  004084                     __ptext47:
  6551                           	opt stack 0
  6552  004084                     _SaveClass:
  6553                           	opt stack 23
  6554                           
  6555                           ;incstack = 0
  6556                           ;SaveClass@class stored from wreg
  6557  004084  6E15               	movwf	SaveClass@class,c
  6558                           
  6559                           ;properties.c: 64: DATAEE_WriteByte(0x100 + 1, class);
  6560  004086  0E01               	movlw	1
  6561  004088  6E12               	movwf	DATAEE_WriteByte@bAdd+1,c
  6562  00408A  0E01               	movlw	1
  6563  00408C  6E11               	movwf	DATAEE_WriteByte@bAdd,c
  6564  00408E  C015  F013         	movff	SaveClass@class,DATAEE_WriteByte@bData
  6565  004092  ECAE  F01D         	call	_DATAEE_WriteByte	;wreg free
  6566  004096  0012               	return		;funcret
  6567  004098                     __end_of_SaveClass:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           intcon	equ	0xFF2
  6576                           intcon2	equ	0xFF1
  6577                           indf0	equ	0xFEF
  6578                           postinc0	equ	0xFEE
  6579                           fsr0h	equ	0xFEA
  6580                           fsr0l	equ	0xFE9
  6581                           wreg	equ	0xFE8
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _DATAEE_WriteByte *****************
  6589 ;; Defined at:
  6590 ;;		line 165 in file "mcc_generated_files/memory.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;  bAdd            2   16[COMRAM] unsigned int 
  6593 ;;  bData           1   18[COMRAM] unsigned char 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  GIEBitValue     1   19[COMRAM] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;                  1    wreg      void 
  6598 ;; Registers used:
  6599 ;;		wreg, status,2, status,0
  6600 ;; Tracked objects:
  6601 ;;		On entry : 0/0
  6602 ;;		On exit  : 0/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6605 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6609 ;;Total ram usage:        4 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    4
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_MemoryInit
  6616 ;;		_SaveClass
  6617 ;;		_SaveID
  6618 ;;		_SaveMotorType
  6619 ;;		_SaveTemperatureDuty
  6620 ;;		_SavePos
  6621 ;;		_SaveOvershoot
  6622 ;;		_SaveDark
  6623 ;;		_SaveReference
  6624 ;;		_SaveProductStart
  6625 ;;		_SaveProductEnd
  6626 ;;		_SaveProductScanSpeed
  6627 ;;		_SaveHoldDutyRef
  6628 ;;		_SaveHoldDutyComp
  6629 ;;		_SavePasosCompuerta
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text48
  6634  003B5C                     __ptext48:
  6635                           	opt stack 0
  6636  003B5C                     _DATAEE_WriteByte:
  6637                           	opt stack 23
  6638                           
  6639                           ;memory.c: 167: uint8_t GIEBitValue = INTCONbits.GIE;
  6640                           
  6641                           ;incstack = 0
  6642  003B5C  0E00               	movlw	0
  6643  003B5E  BEF2               	btfsc	intcon,7,c	;volatile
  6644  003B60  0E01               	movlw	1
  6645  003B62  6E14               	movwf	DATAEE_WriteByte@GIEBitValue,c
  6646                           
  6647                           ;memory.c: 169: EEADRH = ((bAdd >> 8) & 0x03);
  6648  003B64  5012               	movf	DATAEE_WriteByte@bAdd+1,w,c
  6649  003B66  0B03               	andlw	3
  6650  003B68  6EAA               	movwf	4010,c	;volatile
  6651                           
  6652                           ;memory.c: 170: EEADR = (bAdd & 0xFF);
  6653  003B6A  C011  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  6654                           
  6655                           ;memory.c: 171: EEDATA = bData;
  6656  003B6E  C013  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  6657                           
  6658                           ;memory.c: 172: EECON1bits.EEPGD = 0;
  6659  003B72  9EA6               	bcf	4006,7,c	;volatile
  6660                           
  6661                           ;memory.c: 173: EECON1bits.CFGS = 0;
  6662  003B74  9CA6               	bcf	4006,6,c	;volatile
  6663                           
  6664                           ;memory.c: 174: EECON1bits.WREN = 1;
  6665  003B76  84A6               	bsf	4006,2,c	;volatile
  6666                           
  6667                           ;memory.c: 175: INTCONbits.GIE = 0;
  6668  003B78  9EF2               	bcf	intcon,7,c	;volatile
  6669                           
  6670                           ;memory.c: 176: EECON2 = 0x55;
  6671  003B7A  0E55               	movlw	85
  6672  003B7C  6EA7               	movwf	4007,c	;volatile
  6673                           
  6674                           ;memory.c: 177: EECON2 = 0xAA;
  6675  003B7E  0EAA               	movlw	170
  6676  003B80  6EA7               	movwf	4007,c	;volatile
  6677                           
  6678                           ;memory.c: 178: EECON1bits.WR = 1;
  6679  003B82  82A6               	bsf	4006,1,c	;volatile
  6680  003B84                     l53:
  6681  003B84  B2A6               	btfsc	4006,1,c	;volatile
  6682  003B86  D7FE               	goto	l53
  6683                           
  6684                           ;memory.c: 182: }
  6685                           ;memory.c: 184: EECON1bits.WREN = 0;
  6686  003B88  94A6               	bcf	4006,2,c	;volatile
  6687                           
  6688                           ;memory.c: 185: INTCONbits.GIE = GIEBitValue;
  6689  003B8A  B014               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  6690  003B8C  D002               	bra	u4815
  6691  003B8E  9EF2               	bcf	intcon,7,c	;volatile
  6692  003B90  D001               	bra	u4816
  6693  003B92                     u4815:
  6694  003B92  8EF2               	bsf	intcon,7,c	;volatile
  6695  003B94                     u4816:
  6696  003B94  0012               	return		;funcret
  6697  003B96                     __end_of_DATAEE_WriteByte:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           indf0	equ	0xFEF
  6708                           postinc0	equ	0xFEE
  6709                           fsr0h	equ	0xFEA
  6710                           fsr0l	equ	0xFE9
  6711                           wreg	equ	0xFE8
  6712                           indf2	equ	0xFDF
  6713                           postinc2	equ	0xFDE
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function _ProcessCompuerta *****************
  6719 ;; Defined at:
  6720 ;;		line 617 in file "devices.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  msg             2   52[COMRAM] PTR struct .
  6723 ;;		 -> I2CQueue(160), UARTQueue(160), 
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;  result          1   54[COMRAM] unsigned char 
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      unsigned char 
  6728 ;; Registers used:
  6729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;Total ram usage:        3 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:    9
  6742 ;; This function calls:
  6743 ;;		_Send_NAK
  6744 ;; This function is called by:
  6745 ;;		_I2C_ProcessPacket
  6746 ;;		_UART_ProcessPacket
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text49
  6751  002A4C                     __ptext49:
  6752                           	opt stack 0
  6753  002A4C                     _ProcessCompuerta:
  6754                           	opt stack 19
  6755                           
  6756                           ;devices.c: 619: unsigned char result = 1;
  6757                           
  6758                           ;incstack = 0
  6759  002A4C  0E01               	movlw	1
  6760  002A4E  6E37               	movwf	ProcessCompuerta@result,c
  6761                           
  6762                           ;devices.c: 622: switch (msg->CommandL)
  6763  002A50  D051               	goto	l7114
  6764  002A52                     l7094:
  6765                           
  6766                           ;devices.c: 625: Send_NAK(msg, '6');
  6767  002A52  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6768  002A56  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6769  002A5A  0E36               	movlw	54
  6770  002A5C  6E34               	movwf	Send_NAK@errCode,c
  6771  002A5E  EC75  F01B         	call	_Send_NAK	;wreg free
  6772                           
  6773                           ;devices.c: 626: break;
  6774  002A62  D068               	goto	l7116
  6775  002A64                     l7096:
  6776                           
  6777                           ;devices.c: 628: Send_NAK(msg, '6');
  6778  002A64  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6779  002A68  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6780  002A6C  0E36               	movlw	54
  6781  002A6E  6E34               	movwf	Send_NAK@errCode,c
  6782  002A70  EC75  F01B         	call	_Send_NAK	;wreg free
  6783                           
  6784                           ;devices.c: 629: break;
  6785  002A74  D05F               	goto	l7116
  6786  002A76                     l7098:
  6787                           
  6788                           ;devices.c: 631: Send_NAK(msg, '6');
  6789  002A76  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6790  002A7A  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6791  002A7E  0E36               	movlw	54
  6792  002A80  6E34               	movwf	Send_NAK@errCode,c
  6793  002A82  EC75  F01B         	call	_Send_NAK	;wreg free
  6794                           
  6795                           ;devices.c: 632: break;
  6796  002A86  D056               	goto	l7116
  6797  002A88                     l7100:
  6798                           
  6799                           ;devices.c: 634: Send_NAK(msg, '6');
  6800  002A88  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6801  002A8C  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6802  002A90  0E36               	movlw	54
  6803  002A92  6E34               	movwf	Send_NAK@errCode,c
  6804  002A94  EC75  F01B         	call	_Send_NAK	;wreg free
  6805                           
  6806                           ;devices.c: 635: break;
  6807  002A98  D04D               	goto	l7116
  6808  002A9A                     l7102:
  6809                           
  6810                           ;devices.c: 637: Send_NAK(msg, '6');
  6811  002A9A  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6812  002A9E  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6813  002AA2  0E36               	movlw	54
  6814  002AA4  6E34               	movwf	Send_NAK@errCode,c
  6815  002AA6  EC75  F01B         	call	_Send_NAK	;wreg free
  6816                           
  6817                           ;devices.c: 638: break;
  6818  002AAA  D044               	goto	l7116
  6819  002AAC                     l7104:
  6820                           
  6821                           ;devices.c: 640: Send_NAK(msg, '6');
  6822  002AAC  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6823  002AB0  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6824  002AB4  0E36               	movlw	54
  6825  002AB6  6E34               	movwf	Send_NAK@errCode,c
  6826  002AB8  EC75  F01B         	call	_Send_NAK	;wreg free
  6827                           
  6828                           ;devices.c: 641: break;
  6829  002ABC  D03B               	goto	l7116
  6830  002ABE                     l7106:
  6831                           
  6832                           ;devices.c: 643: Send_NAK(msg, '6');
  6833  002ABE  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6834  002AC2  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6835  002AC6  0E36               	movlw	54
  6836  002AC8  6E34               	movwf	Send_NAK@errCode,c
  6837  002ACA  EC75  F01B         	call	_Send_NAK	;wreg free
  6838                           
  6839                           ;devices.c: 644: break;
  6840  002ACE  D032               	goto	l7116
  6841  002AD0                     l7108:
  6842                           
  6843                           ;devices.c: 646: Send_NAK(msg, '6');
  6844  002AD0  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6845  002AD4  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6846  002AD8  0E36               	movlw	54
  6847  002ADA  6E34               	movwf	Send_NAK@errCode,c
  6848  002ADC  EC75  F01B         	call	_Send_NAK	;wreg free
  6849                           
  6850                           ;devices.c: 647: break;
  6851  002AE0  D029               	goto	l7116
  6852  002AE2                     l7110:
  6853                           
  6854                           ;devices.c: 649: Send_NAK(msg, '5');
  6855  002AE2  C035  F032         	movff	ProcessCompuerta@msg,Send_NAK@msg
  6856  002AE6  C036  F033         	movff	ProcessCompuerta@msg+1,Send_NAK@msg+1
  6857  002AEA  0E35               	movlw	53
  6858  002AEC  6E34               	movwf	Send_NAK@errCode,c
  6859  002AEE  EC75  F01B         	call	_Send_NAK	;wreg free
  6860                           
  6861                           ;devices.c: 651: }
  6862                           
  6863                           ;devices.c: 650: break;
  6864  002AF2  D020               	goto	l7116
  6865  002AF4                     l7114:
  6866  002AF4  EE20 F005          	lfsr	2,5
  6867  002AF8  5035               	movf	ProcessCompuerta@msg,w,c
  6868  002AFA  26D9               	addwf	fsr2l,f,c
  6869  002AFC  5036               	movf	ProcessCompuerta@msg+1,w,c
  6870  002AFE  22DA               	addwfc	fsr2h,f,c
  6871  002B00  50DF               	movf	indf2,w,c
  6872                           
  6873                           ; Switch size 1, requested type "space"
  6874                           ; Number of cases is 8, Range of values is 37 to 90
  6875                           ; switch strategies available:
  6876                           ; Name         Instructions Cycles
  6877                           ; simple_byte           25    13 (average)
  6878                           ;	Chosen strategy is simple_byte
  6879  002B02  0A25               	xorlw	37	; case 37
  6880  002B04  B4D8               	btfsc	status,2,c
  6881  002B06  D7DB               	goto	l7106
  6882  002B08  0A16               	xorlw	22	; case 51
  6883  002B0A  B4D8               	btfsc	status,2,c
  6884  002B0C  D7E1               	goto	l7108
  6885  002B0E  0A71               	xorlw	113	; case 66
  6886  002B10  B4D8               	btfsc	status,2,c
  6887  002B12  D7BA               	goto	l7100
  6888  002B14  0A01               	xorlw	1	; case 67
  6889  002B16  B4D8               	btfsc	status,2,c
  6890  002B18  D7C9               	goto	l7104
  6891  002B1A  0A05               	xorlw	5	; case 70
  6892  002B1C  B4D8               	btfsc	status,2,c
  6893  002B1E  D7AB               	goto	l7098
  6894  002B20  0A0E               	xorlw	14	; case 72
  6895  002B22  B4D8               	btfsc	status,2,c
  6896  002B24  D796               	goto	l7094
  6897  002B26  0A1B               	xorlw	27	; case 83
  6898  002B28  B4D8               	btfsc	status,2,c
  6899  002B2A  D7B7               	goto	l7102
  6900  002B2C  0A09               	xorlw	9	; case 90
  6901  002B2E  B4D8               	btfsc	status,2,c
  6902  002B30  D799               	goto	l7096
  6903  002B32  D7D7               	goto	l7110
  6904  002B34                     l7116:
  6905                           
  6906                           ;devices.c: 652: return result;
  6907  002B34  5037               	movf	ProcessCompuerta@result,w,c
  6908  002B36  0012               	return	
  6909  002B38                     __end_of_ProcessCompuerta:
  6910                           	opt stack 0
  6911                           tblptru	equ	0xFF8
  6912                           tblptrh	equ	0xFF7
  6913                           tblptrl	equ	0xFF6
  6914                           tablat	equ	0xFF5
  6915                           prodh	equ	0xFF4
  6916                           prodl	equ	0xFF3
  6917                           intcon	equ	0xFF2
  6918                           intcon2	equ	0xFF1
  6919                           indf0	equ	0xFEF
  6920                           postinc0	equ	0xFEE
  6921                           fsr0h	equ	0xFEA
  6922                           fsr0l	equ	0xFE9
  6923                           wreg	equ	0xFE8
  6924                           indf2	equ	0xFDF
  6925                           postinc2	equ	0xFDE
  6926                           fsr2h	equ	0xFDA
  6927                           fsr2l	equ	0xFD9
  6928                           status	equ	0xFD8
  6929                           
  6930 ;; *************** function _ProcessBotones *****************
  6931 ;; Defined at:
  6932 ;;		line 688 in file "devices.c"
  6933 ;; Parameters:    Size  Location     Type
  6934 ;;  msg             2   52[COMRAM] PTR struct .
  6935 ;;		 -> I2CQueue(160), UARTQueue(160), 
  6936 ;; Auto vars:     Size  Location     Type
  6937 ;;  result          1   54[COMRAM] unsigned char 
  6938 ;; Return value:  Size  Location     Type
  6939 ;;                  1    wreg      unsigned char 
  6940 ;; Registers used:
  6941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6942 ;; Tracked objects:
  6943 ;;		On entry : 0/0
  6944 ;;		On exit  : 0/0
  6945 ;;		Unchanged: 0/0
  6946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6947 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;Total ram usage:        3 bytes
  6952 ;; Hardware stack levels used:    1
  6953 ;; Hardware stack levels required when called:    9
  6954 ;; This function calls:
  6955 ;;		_Send_NAK
  6956 ;; This function is called by:
  6957 ;;		_I2C_ProcessPacket
  6958 ;;		_UART_ProcessPacket
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text50
  6963  003606                     __ptext50:
  6964                           	opt stack 0
  6965  003606                     _ProcessBotones:
  6966                           	opt stack 19
  6967                           
  6968                           ;devices.c: 690: unsigned char result = 1;
  6969                           
  6970                           ;incstack = 0
  6971  003606  0E01               	movlw	1
  6972  003608  6E37               	movwf	ProcessBotones@result,c
  6973                           
  6974                           ;devices.c: 693: switch (msg->CommandL)
  6975  00360A  D024               	goto	l7158
  6976  00360C                     l7148:
  6977                           
  6978                           ;devices.c: 696: Send_NAK(msg, '6');
  6979  00360C  C035  F032         	movff	ProcessBotones@msg,Send_NAK@msg
  6980  003610  C036  F033         	movff	ProcessBotones@msg+1,Send_NAK@msg+1
  6981  003614  0E36               	movlw	54
  6982  003616  6E34               	movwf	Send_NAK@errCode,c
  6983  003618  EC75  F01B         	call	_Send_NAK	;wreg free
  6984                           
  6985                           ;devices.c: 697: break;
  6986  00361C  D02C               	goto	l7160
  6987  00361E                     l7150:
  6988                           
  6989                           ;devices.c: 699: Send_NAK(msg, '6');
  6990  00361E  C035  F032         	movff	ProcessBotones@msg,Send_NAK@msg
  6991  003622  C036  F033         	movff	ProcessBotones@msg+1,Send_NAK@msg+1
  6992  003626  0E36               	movlw	54
  6993  003628  6E34               	movwf	Send_NAK@errCode,c
  6994  00362A  EC75  F01B         	call	_Send_NAK	;wreg free
  6995                           
  6996                           ;devices.c: 700: break;
  6997  00362E  D023               	goto	l7160
  6998  003630                     l7152:
  6999                           
  7000                           ;devices.c: 702: Send_NAK(msg, '6');
  7001  003630  C035  F032         	movff	ProcessBotones@msg,Send_NAK@msg
  7002  003634  C036  F033         	movff	ProcessBotones@msg+1,Send_NAK@msg+1
  7003  003638  0E36               	movlw	54
  7004  00363A  6E34               	movwf	Send_NAK@errCode,c
  7005  00363C  EC75  F01B         	call	_Send_NAK	;wreg free
  7006                           
  7007                           ;devices.c: 703: break;
  7008  003640  D01A               	goto	l7160
  7009  003642                     l7154:
  7010                           
  7011                           ;devices.c: 705: Send_NAK(msg, '5');
  7012  003642  C035  F032         	movff	ProcessBotones@msg,Send_NAK@msg
  7013  003646  C036  F033         	movff	ProcessBotones@msg+1,Send_NAK@msg+1
  7014  00364A  0E35               	movlw	53
  7015  00364C  6E34               	movwf	Send_NAK@errCode,c
  7016  00364E  EC75  F01B         	call	_Send_NAK	;wreg free
  7017                           
  7018                           ;devices.c: 707: }
  7019                           
  7020                           ;devices.c: 706: break;
  7021  003652  D011               	goto	l7160
  7022  003654                     l7158:
  7023  003654  EE20 F005          	lfsr	2,5
  7024  003658  5035               	movf	ProcessBotones@msg,w,c
  7025  00365A  26D9               	addwf	fsr2l,f,c
  7026  00365C  5036               	movf	ProcessBotones@msg+1,w,c
  7027  00365E  22DA               	addwfc	fsr2h,f,c
  7028  003660  50DF               	movf	indf2,w,c
  7029                           
  7030                           ; Switch size 1, requested type "space"
  7031                           ; Number of cases is 3, Range of values is 63 to 83
  7032                           ; switch strategies available:
  7033                           ; Name         Instructions Cycles
  7034                           ; simple_byte           10     6 (average)
  7035                           ;	Chosen strategy is simple_byte
  7036  003662  0A3F               	xorlw	63	; case 63
  7037  003664  B4D8               	btfsc	status,2,c
  7038  003666  D7D2               	goto	l7148
  7039  003668  0A6F               	xorlw	111	; case 80
  7040  00366A  B4D8               	btfsc	status,2,c
  7041  00366C  D7E1               	goto	l7152
  7042  00366E  0A03               	xorlw	3	; case 83
  7043  003670  B4D8               	btfsc	status,2,c
  7044  003672  D7D5               	goto	l7150
  7045  003674  D7E6               	goto	l7154
  7046  003676                     l7160:
  7047                           
  7048                           ;devices.c: 708: return result;
  7049  003676  5037               	movf	ProcessBotones@result,w,c
  7050  003678  0012               	return	
  7051  00367A                     __end_of_ProcessBotones:
  7052                           	opt stack 0
  7053                           tblptru	equ	0xFF8
  7054                           tblptrh	equ	0xFF7
  7055                           tblptrl	equ	0xFF6
  7056                           tablat	equ	0xFF5
  7057                           prodh	equ	0xFF4
  7058                           prodl	equ	0xFF3
  7059                           intcon	equ	0xFF2
  7060                           intcon2	equ	0xFF1
  7061                           indf0	equ	0xFEF
  7062                           postinc0	equ	0xFEE
  7063                           fsr0h	equ	0xFEA
  7064                           fsr0l	equ	0xFE9
  7065                           wreg	equ	0xFE8
  7066                           indf2	equ	0xFDF
  7067                           postinc2	equ	0xFDE
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _Send_NAK *****************
  7073 ;; Defined at:
  7074 ;;		line 119 in file "devices.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  msg             2   49[COMRAM] PTR struct .
  7077 ;;		 -> I2CQueue(160), UARTQueue(160), 
  7078 ;;  errCode         1   51[COMRAM] unsigned char 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      void 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7090 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;Total ram usage:        3 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    8
  7097 ;; This function calls:
  7098 ;;		_Send
  7099 ;; This function is called by:
  7100 ;;		_ProcessDevice
  7101 ;;		_ProcessPaPReferencia
  7102 ;;		_ProcessCompuerta
  7103 ;;		_ProcessSensores
  7104 ;;		_ProcessBotones
  7105 ;;		_ProcessForward
  7106 ;;		_UART_ProcessPacket
  7107 ;;		_ProcessLnLReferencia
  7108 ;;		_ProcessSrVReferencia
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text51
  7113  0036EA                     __ptext51:
  7114                           	opt stack 0
  7115  0036EA                     _Send_NAK:
  7116                           	opt stack 19
  7117                           
  7118                           ;devices.c: 121: msg->Class = Me.Class;
  7119                           
  7120                           ;incstack = 0
  7121  0036EA  EE20 F002          	lfsr	2,2
  7122  0036EE  5032               	movf	Send_NAK@msg,w,c
  7123  0036F0  26D9               	addwf	fsr2l,f,c
  7124  0036F2  5033               	movf	Send_NAK@msg+1,w,c
  7125  0036F4  22DA               	addwfc	fsr2h,f,c
  7126  0036F6  C100  FFDF         	movff	_Me,indf2	;volatile
  7127                           
  7128                           ;devices.c: 122: msg->ID = Me.ID;
  7129  0036FA  EE20 F003          	lfsr	2,3
  7130  0036FE  5032               	movf	Send_NAK@msg,w,c
  7131  003700  26D9               	addwf	fsr2l,f,c
  7132  003702  5033               	movf	Send_NAK@msg+1,w,c
  7133  003704  22DA               	addwfc	fsr2h,f,c
  7134  003706  C101  FFDF         	movff	_Me+1,indf2	;volatile
  7135                           
  7136                           ;devices.c: 123: msg->CommandH = 0x15;
  7137  00370A  EE20 F004          	lfsr	2,4
  7138  00370E  5032               	movf	Send_NAK@msg,w,c
  7139  003710  26D9               	addwf	fsr2l,f,c
  7140  003712  5033               	movf	Send_NAK@msg+1,w,c
  7141  003714  22DA               	addwfc	fsr2h,f,c
  7142  003716  0E15               	movlw	21
  7143  003718  6EDF               	movwf	indf2,c
  7144                           
  7145                           ;devices.c: 124: msg->CommandL = 0x15;
  7146  00371A  EE20 F005          	lfsr	2,5
  7147  00371E  5032               	movf	Send_NAK@msg,w,c
  7148  003720  26D9               	addwf	fsr2l,f,c
  7149  003722  5033               	movf	Send_NAK@msg+1,w,c
  7150  003724  22DA               	addwfc	fsr2h,f,c
  7151  003726  0E15               	movlw	21
  7152  003728  6EDF               	movwf	indf2,c
  7153                           
  7154                           ;devices.c: 125: msg->Params[0] = errCode;
  7155  00372A  EE20 F006          	lfsr	2,6
  7156  00372E  5032               	movf	Send_NAK@msg,w,c
  7157  003730  26D9               	addwf	fsr2l,f,c
  7158  003732  5033               	movf	Send_NAK@msg+1,w,c
  7159  003734  22DA               	addwfc	fsr2h,f,c
  7160  003736  C034  FFDF         	movff	Send_NAK@errCode,indf2
  7161                           
  7162                           ;devices.c: 126: msg->ParamCount = 1;
  7163  00373A  EE20 F00D          	lfsr	2,13
  7164  00373E  5032               	movf	Send_NAK@msg,w,c
  7165  003740  26D9               	addwf	fsr2l,f,c
  7166  003742  5033               	movf	Send_NAK@msg+1,w,c
  7167  003744  22DA               	addwfc	fsr2h,f,c
  7168  003746  0E01               	movlw	1
  7169  003748  6EDF               	movwf	indf2,c
  7170                           
  7171                           ;devices.c: 127: Send(msg);
  7172  00374A  C032  F030         	movff	Send_NAK@msg,Send@msg
  7173  00374E  C033  F031         	movff	Send_NAK@msg+1,Send@msg+1
  7174  003752  EC5C  F01C         	call	_Send	;wreg free
  7175  003756  0012               	return		;funcret
  7176  003758                     __end_of_Send_NAK:
  7177                           	opt stack 0
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           intcon	equ	0xFF2
  7185                           intcon2	equ	0xFF1
  7186                           indf0	equ	0xFEF
  7187                           postinc0	equ	0xFEE
  7188                           fsr0h	equ	0xFEA
  7189                           fsr0l	equ	0xFE9
  7190                           wreg	equ	0xFE8
  7191                           indf2	equ	0xFDF
  7192                           postinc2	equ	0xFDE
  7193                           fsr2h	equ	0xFDA
  7194                           fsr2l	equ	0xFD9
  7195                           status	equ	0xFD8
  7196                           
  7197 ;; *************** function _Send *****************
  7198 ;; Defined at:
  7199 ;;		line 152 in file "devices.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  msg             2   47[COMRAM] PTR struct .
  7202 ;;		 -> I2CQueue(160), UARTQueue(160), Send_Status@msg(16), 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;		None
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;Total ram usage:        2 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    7
  7221 ;; This function calls:
  7222 ;;		_Delay
  7223 ;;		_I2C_Send
  7224 ;;		_UART_Send
  7225 ;; This function is called by:
  7226 ;;		_Send_ACK
  7227 ;;		_Send_NAK
  7228 ;;		_Send_Firmware
  7229 ;;		_Send_Hardware
  7230 ;;		_ProcessForward
  7231 ;;		_Send_Status
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text52
  7236  0038B8                     __ptext52:
  7237                           	opt stack 0
  7238  0038B8                     _Send:
  7239                           	opt stack 19
  7240                           
  7241                           ;devices.c: 154: switch(msg->IOInterface)
  7242                           
  7243                           ;incstack = 0
  7244  0038B8  D00E               	goto	l6690
  7245  0038BA                     l6684:
  7246                           
  7247                           ;devices.c: 157: UART_Send(msg);
  7248  0038BA  C030  F018         	movff	Send@msg,UART_Send@msg
  7249  0038BE  C031  F019         	movff	Send@msg+1,UART_Send@msg+1
  7250  0038C2  EC4D  F012         	call	_UART_Send	;wreg free
  7251                           
  7252                           ;devices.c: 161: break;
  7253                           
  7254                           ;devices.c: 159: case 2:
  7255                           
  7256                           ;devices.c: 158: break;
  7257  0038C6  D017               	goto	l6692
  7258  0038C8                     l6686:
  7259                           
  7260                           ;devices.c: 164: I2C_Send(msg);
  7261  0038C8  C030  F012         	movff	Send@msg,I2C_Send@msg
  7262  0038CC  C031  F013         	movff	Send@msg+1,I2C_Send@msg+1
  7263  0038D0  ECB2  F013         	call	_I2C_Send	;wreg free
  7264                           
  7265                           ;devices.c: 166: }
  7266                           
  7267                           ;devices.c: 165: break;
  7268  0038D4  D010               	goto	l6692
  7269  0038D6                     l6690:
  7270  0038D6  EE20 F00E          	lfsr	2,14
  7271  0038DA  5030               	movf	Send@msg,w,c
  7272  0038DC  26D9               	addwf	fsr2l,f,c
  7273  0038DE  5031               	movf	Send@msg+1,w,c
  7274  0038E0  22DA               	addwfc	fsr2h,f,c
  7275  0038E2  50DF               	movf	indf2,w,c
  7276                           
  7277                           ; Switch size 1, requested type "space"
  7278                           ; Number of cases is 3, Range of values is 1 to 3
  7279                           ; switch strategies available:
  7280                           ; Name         Instructions Cycles
  7281                           ; simple_byte           10     6 (average)
  7282                           ;	Chosen strategy is simple_byte
  7283  0038E4  0A01               	xorlw	1	; case 1
  7284  0038E6  B4D8               	btfsc	status,2,c
  7285  0038E8  D7E8               	goto	l6684
  7286  0038EA  0A03               	xorlw	3	; case 2
  7287  0038EC  B4D8               	btfsc	status,2,c
  7288  0038EE  D003               	goto	l6692
  7289  0038F0  0A01               	xorlw	1	; case 3
  7290  0038F2  B4D8               	btfsc	status,2,c
  7291  0038F4  D7E9               	goto	l6686
  7292  0038F6                     l6692:
  7293                           
  7294                           ;devices.c: 167: Delay(((unsigned long)(((unsigned long)(2)) * 10)));
  7295  0038F6  0E00               	movlw	0
  7296  0038F8  6E12               	movwf	Delay@Timeout+1,c
  7297  0038FA  0E14               	movlw	20
  7298  0038FC  6E11               	movwf	Delay@Timeout,c
  7299  0038FE  ECB9  F01F         	call	_Delay	;wreg free
  7300  003902  0012               	return		;funcret
  7301  003904                     __end_of_Send:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon2	equ	0xFF1
  7311                           indf0	equ	0xFEF
  7312                           postinc0	equ	0xFEE
  7313                           fsr0h	equ	0xFEA
  7314                           fsr0l	equ	0xFE9
  7315                           wreg	equ	0xFE8
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _UART_Send *****************
  7323 ;; Defined at:
  7324 ;;		line 93 in file "UART.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  msg             2   23[COMRAM] PTR struct .
  7327 ;;		 -> I2CQueue(160), UARTQueue(160), Send_Status@msg(16), 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  packet         15   29[COMRAM] unsigned char [15]
  7330 ;;  i               2   45[COMRAM] int 
  7331 ;;  msg_size        1   44[COMRAM] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      void 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:       24 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    6
  7348 ;; This function calls:
  7349 ;;		_UART_Checksum
  7350 ;;		_putch
  7351 ;; This function is called by:
  7352 ;;		_Send
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text53
  7357  00249A                     __ptext53:
  7358                           	opt stack 0
  7359  00249A                     _UART_Send:
  7360                           	opt stack 19
  7361                           
  7362                           ;UART.c: 95: int i;
  7363                           ;UART.c: 96: unsigned char packet[8 + 2 + 5];
  7364                           ;UART.c: 97: packet[0] = msg->Start;
  7365                           
  7366                           ;incstack = 0
  7367  00249A  C018  FFD9         	movff	UART_Send@msg,fsr2l
  7368  00249E  C019  FFDA         	movff	UART_Send@msg+1,fsr2h
  7369  0024A2  50DF               	movf	indf2,w,c
  7370  0024A4  6E1E               	movwf	UART_Send@packet,c
  7371                           
  7372                           ;UART.c: 98: packet[1] = msg->Direction | msg->ParamCount;
  7373  0024A6  EE20 F00D          	lfsr	2,13
  7374  0024AA  5018               	movf	UART_Send@msg,w,c
  7375  0024AC  26D9               	addwf	fsr2l,f,c
  7376  0024AE  5019               	movf	UART_Send@msg+1,w,c
  7377  0024B0  22DA               	addwfc	fsr2h,f,c
  7378  0024B2  50DF               	movf	indf2,w,c
  7379  0024B4  6E1A               	movwf	??_UART_Send& (0+255),c
  7380  0024B6  EE20 F001          	lfsr	2,1
  7381  0024BA  5018               	movf	UART_Send@msg,w,c
  7382  0024BC  26D9               	addwf	fsr2l,f,c
  7383  0024BE  5019               	movf	UART_Send@msg+1,w,c
  7384  0024C0  22DA               	addwfc	fsr2h,f,c
  7385  0024C2  50DF               	movf	indf2,w,c
  7386  0024C4  101A               	iorwf	??_UART_Send,w,c
  7387  0024C6  6E1F               	movwf	UART_Send@packet+1,c
  7388                           
  7389                           ;UART.c: 99: packet[2] = msg->Class;
  7390  0024C8  EE20 F002          	lfsr	2,2
  7391  0024CC  5018               	movf	UART_Send@msg,w,c
  7392  0024CE  26D9               	addwf	fsr2l,f,c
  7393  0024D0  5019               	movf	UART_Send@msg+1,w,c
  7394  0024D2  22DA               	addwfc	fsr2h,f,c
  7395  0024D4  50DF               	movf	indf2,w,c
  7396  0024D6  6E20               	movwf	UART_Send@packet+2,c
  7397                           
  7398                           ;UART.c: 100: packet[3] = msg->ID + '0';
  7399  0024D8  EE20 F003          	lfsr	2,3
  7400  0024DC  5018               	movf	UART_Send@msg,w,c
  7401  0024DE  26D9               	addwf	fsr2l,f,c
  7402  0024E0  5019               	movf	UART_Send@msg+1,w,c
  7403  0024E2  22DA               	addwfc	fsr2h,f,c
  7404  0024E4  50DF               	movf	indf2,w,c
  7405  0024E6  0F30               	addlw	48
  7406  0024E8  6E21               	movwf	UART_Send@packet+3,c
  7407                           
  7408                           ;UART.c: 101: packet[4] = msg->CommandH;
  7409  0024EA  EE20 F004          	lfsr	2,4
  7410  0024EE  5018               	movf	UART_Send@msg,w,c
  7411  0024F0  26D9               	addwf	fsr2l,f,c
  7412  0024F2  5019               	movf	UART_Send@msg+1,w,c
  7413  0024F4  22DA               	addwfc	fsr2h,f,c
  7414  0024F6  50DF               	movf	indf2,w,c
  7415  0024F8  6E22               	movwf	UART_Send@packet+4,c
  7416                           
  7417                           ;UART.c: 102: packet[5] = msg->CommandL;
  7418  0024FA  EE20 F005          	lfsr	2,5
  7419  0024FE  5018               	movf	UART_Send@msg,w,c
  7420  002500  26D9               	addwf	fsr2l,f,c
  7421  002502  5019               	movf	UART_Send@msg+1,w,c
  7422  002504  22DA               	addwfc	fsr2h,f,c
  7423  002506  50DF               	movf	indf2,w,c
  7424  002508  6E23               	movwf	UART_Send@packet+5,c
  7425                           
  7426                           ;UART.c: 103: for (i = 0; i < msg->ParamCount; i++)
  7427  00250A  0E00               	movlw	0
  7428  00250C  6E2F               	movwf	UART_Send@i+1,c
  7429  00250E  0E00               	movlw	0
  7430  002510  6E2E               	movwf	UART_Send@i,c
  7431  002512  D01C               	goto	l6482
  7432  002514                     l6478:
  7433                           
  7434                           ;UART.c: 104: packet[6 + i] = msg->Params[i];
  7435  002514  0E06               	movlw	6
  7436  002516  242E               	addwf	UART_Send@i,w,c
  7437  002518  6E1A               	movwf	??_UART_Send& (0+255),c
  7438  00251A  0E00               	movlw	0
  7439  00251C  202F               	addwfc	UART_Send@i+1,w,c
  7440  00251E  6E1B               	movwf	(??_UART_Send+1)& (0+255),c
  7441  002520  501A               	movf	??_UART_Send,w,c
  7442  002522  2418               	addwf	UART_Send@msg,w,c
  7443  002524  6ED9               	movwf	fsr2l,c
  7444  002526  501B               	movf	??_UART_Send+1,w,c
  7445  002528  2019               	addwfc	UART_Send@msg+1,w,c
  7446  00252A  6EDA               	movwf	fsr2h,c
  7447  00252C  0E06               	movlw	6
  7448  00252E  242E               	addwf	UART_Send@i,w,c
  7449  002530  6E1C               	movwf	(??_UART_Send+2)& (0+255),c
  7450  002532  0E00               	movlw	0
  7451  002534  202F               	addwfc	UART_Send@i+1,w,c
  7452  002536  6E1D               	movwf	(??_UART_Send+3)& (0+255),c
  7453  002538  0E1E               	movlw	low UART_Send@packet
  7454  00253A  241C               	addwf	??_UART_Send+2,w,c
  7455  00253C  6EE1               	movwf	fsr1l,c
  7456  00253E  0E00               	movlw	high UART_Send@packet
  7457  002540  201D               	addwfc	??_UART_Send+3,w,c
  7458  002542  6EE2               	movwf	fsr1h,c
  7459  002544  CFDF FFE7          	movff	indf2,indf1
  7460  002548  4A2E               	infsnz	UART_Send@i,f,c
  7461  00254A  2A2F               	incf	UART_Send@i+1,f,c
  7462  00254C                     l6482:
  7463  00254C  EE20 F00D          	lfsr	2,13
  7464  002550  5018               	movf	UART_Send@msg,w,c
  7465  002552  26D9               	addwf	fsr2l,f,c
  7466  002554  5019               	movf	UART_Send@msg+1,w,c
  7467  002556  22DA               	addwfc	fsr2h,f,c
  7468  002558  50DF               	movf	indf2,w,c
  7469  00255A  6E1A               	movwf	??_UART_Send& (0+255),c
  7470  00255C  6A1B               	clrf	(??_UART_Send+1)& (0+255),c
  7471  00255E  501A               	movf	??_UART_Send,w,c
  7472  002560  5C2E               	subwf	UART_Send@i,w,c
  7473  002562  502F               	movf	UART_Send@i+1,w,c
  7474  002564  0A80               	xorlw	128
  7475  002566  6E1C               	movwf	(??_UART_Send+2)& (0+255),c
  7476  002568  501B               	movf	??_UART_Send+1,w,c
  7477  00256A  0A80               	xorlw	128
  7478  00256C  581C               	subwfb	(??_UART_Send+2)& (0+255),w,c
  7479  00256E  A0D8               	btfss	status,0,c
  7480  002570  D7D1               	goto	l6478
  7481                           
  7482                           ;UART.c: 105: packet[6 + msg->ParamCount] = msg->Checksum;
  7483  002572  EE20 F00B          	lfsr	2,11
  7484  002576  5018               	movf	UART_Send@msg,w,c
  7485  002578  26D9               	addwf	fsr2l,f,c
  7486  00257A  5019               	movf	UART_Send@msg+1,w,c
  7487  00257C  22DA               	addwfc	fsr2h,f,c
  7488  00257E  EE10 F00D          	lfsr	1,13
  7489  002582  5018               	movf	UART_Send@msg,w,c
  7490  002584  26E1               	addwf	fsr1l,f,c
  7491  002586  5019               	movf	UART_Send@msg+1,w,c
  7492  002588  22E2               	addwfc	fsr1h,f,c
  7493  00258A  50E7               	movf	indf1,w,c
  7494  00258C  6E1A               	movwf	??_UART_Send& (0+255),c
  7495  00258E  6A1B               	clrf	(??_UART_Send+1)& (0+255),c
  7496  002590  0E06               	movlw	6
  7497  002592  261A               	addwf	??_UART_Send,f,c
  7498  002594  0E00               	movlw	0
  7499  002596  221B               	addwfc	??_UART_Send+1,f,c
  7500  002598  0E1E               	movlw	low UART_Send@packet
  7501  00259A  241A               	addwf	??_UART_Send,w,c
  7502  00259C  6EE1               	movwf	fsr1l,c
  7503  00259E  0E00               	movlw	high UART_Send@packet
  7504  0025A0  201B               	addwfc	??_UART_Send+1,w,c
  7505  0025A2  6EE2               	movwf	fsr1h,c
  7506  0025A4  CFDF FFE7          	movff	indf2,indf1
  7507                           
  7508                           ;UART.c: 106: packet[6 + msg->ParamCount + 1] = msg->End;
  7509  0025A8  EE20 F00C          	lfsr	2,12
  7510  0025AC  5018               	movf	UART_Send@msg,w,c
  7511  0025AE  26D9               	addwf	fsr2l,f,c
  7512  0025B0  5019               	movf	UART_Send@msg+1,w,c
  7513  0025B2  22DA               	addwfc	fsr2h,f,c
  7514  0025B4  EE10 F00D          	lfsr	1,13
  7515  0025B8  5018               	movf	UART_Send@msg,w,c
  7516  0025BA  26E1               	addwf	fsr1l,f,c
  7517  0025BC  5019               	movf	UART_Send@msg+1,w,c
  7518  0025BE  22E2               	addwfc	fsr1h,f,c
  7519  0025C0  50E7               	movf	indf1,w,c
  7520  0025C2  6E1A               	movwf	??_UART_Send& (0+255),c
  7521  0025C4  6A1B               	clrf	(??_UART_Send+1)& (0+255),c
  7522  0025C6  0E07               	movlw	7
  7523  0025C8  261A               	addwf	??_UART_Send,f,c
  7524  0025CA  0E00               	movlw	0
  7525  0025CC  221B               	addwfc	??_UART_Send+1,f,c
  7526  0025CE  0E1E               	movlw	low UART_Send@packet
  7527  0025D0  241A               	addwf	??_UART_Send,w,c
  7528  0025D2  6EE1               	movwf	fsr1l,c
  7529  0025D4  0E00               	movlw	high UART_Send@packet
  7530  0025D6  201B               	addwfc	??_UART_Send+1,w,c
  7531  0025D8  6EE2               	movwf	fsr1h,c
  7532  0025DA  CFDF FFE7          	movff	indf2,indf1
  7533                           
  7534                           ;UART.c: 108: i = 0;
  7535  0025DE  0E00               	movlw	0
  7536  0025E0  6E2F               	movwf	UART_Send@i+1,c
  7537  0025E2  0E00               	movlw	0
  7538  0025E4  6E2E               	movwf	UART_Send@i,c
  7539                           
  7540                           ;UART.c: 109: unsigned char msg_size = 8 + msg->ParamCount;
  7541  0025E6  EE20 F00D          	lfsr	2,13
  7542  0025EA  5018               	movf	UART_Send@msg,w,c
  7543  0025EC  26D9               	addwf	fsr2l,f,c
  7544  0025EE  5019               	movf	UART_Send@msg+1,w,c
  7545  0025F0  22DA               	addwfc	fsr2h,f,c
  7546  0025F2  50DF               	movf	indf2,w,c
  7547  0025F4  0F08               	addlw	8
  7548  0025F6  6E2D               	movwf	UART_Send@msg_size,c
  7549                           
  7550                           ;UART.c: 110: UART_Checksum(packet, msg_size);
  7551  0025F8  0E1E               	movlw	low UART_Send@packet
  7552  0025FA  6E11               	movwf	UART_Checksum@msg,c
  7553  0025FC  0E00               	movlw	high UART_Send@packet
  7554  0025FE  6E12               	movwf	UART_Checksum@msg+1,c
  7555  002600  C02D  F013         	movff	UART_Send@msg_size,UART_Checksum@msg_size
  7556  002604  ECF2  F01E         	call	_UART_Checksum	;wreg free
  7557  002608                     l6492:
  7558                           
  7559                           ;UART.c: 112: {
  7560                           ;UART.c: 113: putch(packet[i]);
  7561  002608  0E1E               	movlw	low UART_Send@packet
  7562  00260A  242E               	addwf	UART_Send@i,w,c
  7563  00260C  6ED9               	movwf	fsr2l,c
  7564  00260E  0E00               	movlw	high UART_Send@packet
  7565  002610  202F               	addwfc	UART_Send@i+1,w,c
  7566  002612  6EDA               	movwf	fsr2h,c
  7567  002614  50DF               	movf	indf2,w,c
  7568  002616  EC8E  F020         	call	_putch
  7569                           
  7570                           ;UART.c: 114: } while (packet[i++] != 0x04);
  7571  00261A  502E               	movf	UART_Send@i,w,c
  7572  00261C  6E1A               	movwf	??_UART_Send& (0+255),c
  7573  00261E  502F               	movf	UART_Send@i+1,w,c
  7574  002620  6E1B               	movwf	(??_UART_Send+1)& (0+255),c
  7575  002622  4A2E               	infsnz	UART_Send@i,f,c
  7576  002624  2A2F               	incf	UART_Send@i+1,f,c
  7577  002626  0E1E               	movlw	low UART_Send@packet
  7578  002628  241A               	addwf	??_UART_Send,w,c
  7579  00262A  6ED9               	movwf	fsr2l,c
  7580  00262C  0E00               	movlw	high UART_Send@packet
  7581  00262E  201B               	addwfc	??_UART_Send+1,w,c
  7582  002630  6EDA               	movwf	fsr2h,c
  7583  002632  0E04               	movlw	4
  7584  002634  18DE               	xorwf	postinc2,w,c
  7585  002636  B4D8               	btfsc	status,2,c
  7586  002638  0012               	return	
  7587  00263A  D7E6               	goto	l6492
  7588  00263C                     __end_of_UART_Send:
  7589                           	opt stack 0
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           intcon2	equ	0xFF1
  7598                           indf0	equ	0xFEF
  7599                           postinc0	equ	0xFEE
  7600                           fsr0h	equ	0xFEA
  7601                           fsr0l	equ	0xFE9
  7602                           wreg	equ	0xFE8
  7603                           indf1	equ	0xFE7
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function _putch *****************
  7613 ;; Defined at:
  7614 ;;		line 164 in file "mcc_generated_files/eusart1.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  txData          1    wreg     unsigned char 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  txData          1   17[COMRAM] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;Total ram usage:        1 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:    5
  7635 ;; This function calls:
  7636 ;;		_EUSART1_Write
  7637 ;; This function is called by:
  7638 ;;		_UART_Send
  7639 ;;		_UART_Send_Debug
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text54
  7644  00411C                     __ptext54:
  7645                           	opt stack 0
  7646  00411C                     _putch:
  7647                           	opt stack 19
  7648                           
  7649                           ;incstack = 0
  7650                           ;putch@txData stored from wreg
  7651  00411C  6E12               	movwf	putch@txData,c
  7652                           
  7653                           ;eusart1.c: 166: EUSART1_Write(txData);
  7654  00411E  5012               	movf	putch@txData,w,c
  7655  004120  EC72  F01D         	call	_EUSART1_Write
  7656  004124  0012               	return		;funcret
  7657  004126                     __end_of_putch:
  7658                           	opt stack 0
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon2	equ	0xFF1
  7667                           indf0	equ	0xFEF
  7668                           postinc0	equ	0xFEE
  7669                           fsr0h	equ	0xFEA
  7670                           fsr0l	equ	0xFE9
  7671                           wreg	equ	0xFE8
  7672                           indf1	equ	0xFE7
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           fsr2h	equ	0xFDA
  7678                           fsr2l	equ	0xFD9
  7679                           status	equ	0xFD8
  7680                           
  7681 ;; *************** function _EUSART1_Write *****************
  7682 ;; Defined at:
  7683 ;;		line 136 in file "mcc_generated_files/eusart1.c"
  7684 ;; Parameters:    Size  Location     Type
  7685 ;;  txData          1    wreg     unsigned char 
  7686 ;; Auto vars:     Size  Location     Type
  7687 ;;  txData          1   16[COMRAM] unsigned char 
  7688 ;; Return value:  Size  Location     Type
  7689 ;;                  1    wreg      void 
  7690 ;; Registers used:
  7691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7692 ;; Tracked objects:
  7693 ;;		On entry : 0/0
  7694 ;;		On exit  : 0/0
  7695 ;;		Unchanged: 0/0
  7696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;Total ram usage:        1 bytes
  7702 ;; Hardware stack levels used:    1
  7703 ;; Hardware stack levels required when called:    4
  7704 ;; This function calls:
  7705 ;;		Nothing
  7706 ;; This function is called by:
  7707 ;;		_putch
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text55
  7712  003AE4                     __ptext55:
  7713                           	opt stack 0
  7714  003AE4                     _EUSART1_Write:
  7715                           	opt stack 19
  7716                           
  7717                           ;incstack = 0
  7718                           ;EUSART1_Write@txData stored from wreg
  7719  003AE4  6E11               	movwf	EUSART1_Write@txData,c
  7720  003AE6                     l6372:
  7721  003AE6  0100               	movlb	0	; () banked
  7722  003AE8  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  7723  003AEA  B4D8               	btfsc	status,2,c
  7724  003AEC  D7FC               	goto	l6372
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;eusart1.c: 140: }
  7728                           ;eusart1.c: 142: if(0 == PIE1bits.TX1IE)
  7729  003AEE  B89D               	btfsc	3997,4,c	;volatile
  7730  003AF0  D003               	goto	l326
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;eusart1.c: 143: {
  7734                           ;eusart1.c: 144: TXREG1 = txData;
  7735  003AF2  C011  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  7736                           
  7737                           ;eusart1.c: 145: }
  7738  003AF6  D013               	goto	l6386
  7739  003AF8                     l326:
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;eusart1.c: 146: else
  7743                           ;eusart1.c: 147: {
  7744                           ;eusart1.c: 148: PIE1bits.TX1IE = 0;
  7745  003AF8  989D               	bcf	3997,4,c	;volatile
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;eusart1.c: 149: eusart1TxBuffer[eusart1TxHead++] = txData;
  7749  003AFA  504C               	movf	_eusart1TxHead,w,c
  7750  003AFC  0D01               	mullw	1
  7751  003AFE  0E60               	movlw	low _eusart1TxBuffer
  7752  003B00  24F3               	addwf	prodl,w,c
  7753  003B02  6ED9               	movwf	fsr2l,c
  7754  003B04  0E00               	movlw	high _eusart1TxBuffer
  7755  003B06  20F4               	addwfc	prodh,w,c
  7756  003B08  6EDA               	movwf	fsr2h,c
  7757  003B0A  C011  FFDF         	movff	EUSART1_Write@txData,indf2
  7758                           
  7759                           ; BSR set to: 0
  7760  003B0E  2A4C               	incf	_eusart1TxHead,f,c
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;eusart1.c: 150: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  7764  003B10  0E3F               	movlw	63
  7765  003B12  644C               	cpfsgt	_eusart1TxHead,c
  7766  003B14  D002               	goto	l6384
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;eusart1.c: 151: {
  7770                           ;eusart1.c: 152: eusart1TxHead = 0;
  7771  003B16  0E00               	movlw	0
  7772  003B18  6E4C               	movwf	_eusart1TxHead,c
  7773  003B1A                     l6384:
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;eusart1.c: 153: }
  7777                           ;eusart1.c: 154: eusart1TxBufferRemaining--;
  7778  003B1A  0100               	movlb	0	; () banked
  7779  003B1C  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  7780  003B1E                     l6386:
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;eusart1.c: 155: }
  7784                           ;eusart1.c: 156: PIE1bits.TX1IE = 1;
  7785  003B1E  889D               	bsf	3997,4,c	;volatile
  7786                           
  7787                           ; BSR set to: 0
  7788  003B20  0012               	return		;funcret
  7789  003B22                     __end_of_EUSART1_Write:
  7790                           	opt stack 0
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           intcon2	equ	0xFF1
  7799                           indf0	equ	0xFEF
  7800                           postinc0	equ	0xFEE
  7801                           fsr0h	equ	0xFEA
  7802                           fsr0l	equ	0xFE9
  7803                           wreg	equ	0xFE8
  7804                           indf1	equ	0xFE7
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           fsr2h	equ	0xFDA
  7810                           fsr2l	equ	0xFD9
  7811                           status	equ	0xFD8
  7812                           
  7813 ;; *************** function _UART_Checksum *****************
  7814 ;; Defined at:
  7815 ;;		line 164 in file "UART.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  msg             2   16[COMRAM] PTR unsigned char 
  7818 ;;		 -> UART_Send@packet(15), 
  7819 ;;  msg_size        1   18[COMRAM] unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7833 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7834 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7835 ;;Total ram usage:        7 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    4
  7838 ;; This function calls:
  7839 ;;		Nothing
  7840 ;; This function is called by:
  7841 ;;		_UART_Send
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text56
  7846  003DE4                     __ptext56:
  7847                           	opt stack 0
  7848  003DE4                     _UART_Checksum:
  7849                           	opt stack 20
  7850                           
  7851                           ;UART.c: 166: msg[msg_size - 2] = 'F';
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;incstack = 0
  7855  003DE4  0EFE               	movlw	254
  7856  003DE6  6E14               	movwf	??_UART_Checksum& (0+255),c
  7857  003DE8  0EFF               	movlw	255
  7858  003DEA  6E15               	movwf	(??_UART_Checksum+1)& (0+255),c
  7859  003DEC  5013               	movf	UART_Checksum@msg_size,w,c
  7860  003DEE  6E16               	movwf	(??_UART_Checksum+2)& (0+255),c
  7861  003DF0  6A17               	clrf	(??_UART_Checksum+3)& (0+255),c
  7862  003DF2  5014               	movf	??_UART_Checksum,w,c
  7863  003DF4  2616               	addwf	??_UART_Checksum+2,f,c
  7864  003DF6  5015               	movf	??_UART_Checksum+1,w,c
  7865  003DF8  2217               	addwfc	??_UART_Checksum+3,f,c
  7866  003DFA  5016               	movf	??_UART_Checksum+2,w,c
  7867  003DFC  2411               	addwf	UART_Checksum@msg,w,c
  7868  003DFE  6ED9               	movwf	fsr2l,c
  7869  003E00  5017               	movf	??_UART_Checksum+3,w,c
  7870  003E02  2012               	addwfc	UART_Checksum@msg+1,w,c
  7871  003E04  6EDA               	movwf	fsr2h,c
  7872  003E06  0E46               	movlw	70
  7873  003E08  6EDF               	movwf	indf2,c
  7874  003E0A  0012               	return		;funcret
  7875  003E0C                     __end_of_UART_Checksum:
  7876                           	opt stack 0
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           intcon2	equ	0xFF1
  7885                           indf0	equ	0xFEF
  7886                           postinc0	equ	0xFEE
  7887                           fsr0h	equ	0xFEA
  7888                           fsr0l	equ	0xFE9
  7889                           wreg	equ	0xFE8
  7890                           indf1	equ	0xFE7
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function _I2C_Send *****************
  7900 ;; Defined at:
  7901 ;;		line 138 in file "I2C.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  msg             2   17[COMRAM] PTR struct .
  7904 ;;		 -> I2CQueue(160), UARTQueue(160), Send_Status@msg(16), 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  i               2   22[COMRAM] int 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      void 
  7909 ;; Registers used:
  7910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;Total ram usage:        7 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    5
  7923 ;; This function calls:
  7924 ;;		_i2c_putch
  7925 ;; This function is called by:
  7926 ;;		_Send
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text57
  7931  002764                     __ptext57:
  7932                           	opt stack 0
  7933  002764                     _I2C_Send:
  7934                           	opt stack 20
  7935                           
  7936                           ;I2C.c: 147: i2c_putch(msg->Start);
  7937                           
  7938                           ;incstack = 0
  7939  002764  C012  FFD9         	movff	I2C_Send@msg,fsr2l
  7940  002768  C013  FFDA         	movff	I2C_Send@msg+1,fsr2h
  7941  00276C  50DF               	movf	indf2,w,c
  7942  00276E  EC50  F01F         	call	_i2c_putch
  7943                           
  7944                           ;I2C.c: 148: i2c_putch(msg->Direction | msg->ParamCount);
  7945  002772  EE20 F00D          	lfsr	2,13
  7946  002776  5012               	movf	I2C_Send@msg,w,c
  7947  002778  26D9               	addwf	fsr2l,f,c
  7948  00277A  5013               	movf	I2C_Send@msg+1,w,c
  7949  00277C  22DA               	addwfc	fsr2h,f,c
  7950  00277E  50DF               	movf	indf2,w,c
  7951  002780  6E14               	movwf	??_I2C_Send& (0+255),c
  7952  002782  EE20 F001          	lfsr	2,1
  7953  002786  5012               	movf	I2C_Send@msg,w,c
  7954  002788  26D9               	addwf	fsr2l,f,c
  7955  00278A  5013               	movf	I2C_Send@msg+1,w,c
  7956  00278C  22DA               	addwfc	fsr2h,f,c
  7957  00278E  50DF               	movf	indf2,w,c
  7958  002790  1014               	iorwf	??_I2C_Send,w,c
  7959  002792  EC50  F01F         	call	_i2c_putch
  7960                           
  7961                           ;I2C.c: 149: i2c_putch(msg->Class);
  7962  002796  EE20 F002          	lfsr	2,2
  7963  00279A  5012               	movf	I2C_Send@msg,w,c
  7964  00279C  26D9               	addwf	fsr2l,f,c
  7965  00279E  5013               	movf	I2C_Send@msg+1,w,c
  7966  0027A0  22DA               	addwfc	fsr2h,f,c
  7967  0027A2  50DF               	movf	indf2,w,c
  7968  0027A4  EC50  F01F         	call	_i2c_putch
  7969                           
  7970                           ;I2C.c: 150: i2c_putch(msg->ID + '0');
  7971  0027A8  EE20 F003          	lfsr	2,3
  7972  0027AC  5012               	movf	I2C_Send@msg,w,c
  7973  0027AE  26D9               	addwf	fsr2l,f,c
  7974  0027B0  5013               	movf	I2C_Send@msg+1,w,c
  7975  0027B2  22DA               	addwfc	fsr2h,f,c
  7976  0027B4  50DF               	movf	indf2,w,c
  7977  0027B6  0F30               	addlw	48
  7978  0027B8  EC50  F01F         	call	_i2c_putch
  7979                           
  7980                           ;I2C.c: 151: i2c_putch(msg->CommandH);
  7981  0027BC  EE20 F004          	lfsr	2,4
  7982  0027C0  5012               	movf	I2C_Send@msg,w,c
  7983  0027C2  26D9               	addwf	fsr2l,f,c
  7984  0027C4  5013               	movf	I2C_Send@msg+1,w,c
  7985  0027C6  22DA               	addwfc	fsr2h,f,c
  7986  0027C8  50DF               	movf	indf2,w,c
  7987  0027CA  EC50  F01F         	call	_i2c_putch
  7988                           
  7989                           ;I2C.c: 152: i2c_putch(msg->CommandL);
  7990  0027CE  EE20 F005          	lfsr	2,5
  7991  0027D2  5012               	movf	I2C_Send@msg,w,c
  7992  0027D4  26D9               	addwf	fsr2l,f,c
  7993  0027D6  5013               	movf	I2C_Send@msg+1,w,c
  7994  0027D8  22DA               	addwfc	fsr2h,f,c
  7995  0027DA  50DF               	movf	indf2,w,c
  7996  0027DC  EC50  F01F         	call	_i2c_putch
  7997                           
  7998                           ;I2C.c: 153: for (int i = 0; i < msg->ParamCount; i++)
  7999  0027E0  0E00               	movlw	0
  8000  0027E2  6E18               	movwf	I2C_Send@i+1,c
  8001  0027E4  0E00               	movlw	0
  8002  0027E6  6E17               	movwf	I2C_Send@i,c
  8003  0027E8  D011               	goto	l6504
  8004  0027EA                     l6500:
  8005                           
  8006                           ;I2C.c: 154: i2c_putch(msg->Params[i]);
  8007  0027EA  0E06               	movlw	6
  8008  0027EC  2417               	addwf	I2C_Send@i,w,c
  8009  0027EE  6E14               	movwf	??_I2C_Send& (0+255),c
  8010  0027F0  0E00               	movlw	0
  8011  0027F2  2018               	addwfc	I2C_Send@i+1,w,c
  8012  0027F4  6E15               	movwf	(??_I2C_Send+1)& (0+255),c
  8013  0027F6  5014               	movf	??_I2C_Send,w,c
  8014  0027F8  2412               	addwf	I2C_Send@msg,w,c
  8015  0027FA  6ED9               	movwf	fsr2l,c
  8016  0027FC  5015               	movf	??_I2C_Send+1,w,c
  8017  0027FE  2013               	addwfc	I2C_Send@msg+1,w,c
  8018  002800  6EDA               	movwf	fsr2h,c
  8019  002802  50DF               	movf	indf2,w,c
  8020  002804  EC50  F01F         	call	_i2c_putch
  8021  002808  4A17               	infsnz	I2C_Send@i,f,c
  8022  00280A  2A18               	incf	I2C_Send@i+1,f,c
  8023  00280C                     l6504:
  8024  00280C  EE20 F00D          	lfsr	2,13
  8025  002810  5012               	movf	I2C_Send@msg,w,c
  8026  002812  26D9               	addwf	fsr2l,f,c
  8027  002814  5013               	movf	I2C_Send@msg+1,w,c
  8028  002816  22DA               	addwfc	fsr2h,f,c
  8029  002818  50DF               	movf	indf2,w,c
  8030  00281A  6E14               	movwf	??_I2C_Send& (0+255),c
  8031  00281C  6A15               	clrf	(??_I2C_Send+1)& (0+255),c
  8032  00281E  5014               	movf	??_I2C_Send,w,c
  8033  002820  5C17               	subwf	I2C_Send@i,w,c
  8034  002822  5018               	movf	I2C_Send@i+1,w,c
  8035  002824  0A80               	xorlw	128
  8036  002826  6E16               	movwf	(??_I2C_Send+2)& (0+255),c
  8037  002828  5015               	movf	??_I2C_Send+1,w,c
  8038  00282A  0A80               	xorlw	128
  8039  00282C  5816               	subwfb	(??_I2C_Send+2)& (0+255),w,c
  8040  00282E  A0D8               	btfss	status,0,c
  8041  002830  D7DC               	goto	l6500
  8042                           
  8043                           ;I2C.c: 155: i2c_putch(msg->Checksum);
  8044  002832  EE20 F00B          	lfsr	2,11
  8045  002836  5012               	movf	I2C_Send@msg,w,c
  8046  002838  26D9               	addwf	fsr2l,f,c
  8047  00283A  5013               	movf	I2C_Send@msg+1,w,c
  8048  00283C  22DA               	addwfc	fsr2h,f,c
  8049  00283E  50DF               	movf	indf2,w,c
  8050  002840  EC50  F01F         	call	_i2c_putch
  8051                           
  8052                           ;I2C.c: 156: i2c_putch(msg->End);
  8053  002844  EE20 F00C          	lfsr	2,12
  8054  002848  5012               	movf	I2C_Send@msg,w,c
  8055  00284A  26D9               	addwf	fsr2l,f,c
  8056  00284C  5013               	movf	I2C_Send@msg+1,w,c
  8057  00284E  22DA               	addwfc	fsr2h,f,c
  8058  002850  50DF               	movf	indf2,w,c
  8059  002852  EC50  F01F         	call	_i2c_putch
  8060                           
  8061                           ;I2C.c: 162: Me.I2CMsgAvailable.Changed = 1;
  8062  002856  0E01               	movlw	1
  8063  002858  0101               	movlb	1	; () banked
  8064  00285A  6FDC               	movwf	(_Me+220)& (0+255),b	;volatile
  8065                           
  8066                           ; BSR set to: 1
  8067                           ;I2C.c: 163: Me.I2CMsgAvailable.Detecting = 1;
  8068  00285C  0E01               	movlw	1
  8069  00285E  0101               	movlb	1	; () banked
  8070  002860  6FDD               	movwf	(_Me+221)& (0+255),b	;volatile
  8071                           
  8072                           ; BSR set to: 1
  8073  002862  0012               	return		;funcret
  8074  002864                     __end_of_I2C_Send:
  8075                           	opt stack 0
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodh	equ	0xFF4
  8081                           prodl	equ	0xFF3
  8082                           intcon	equ	0xFF2
  8083                           intcon2	equ	0xFF1
  8084                           indf0	equ	0xFEF
  8085                           postinc0	equ	0xFEE
  8086                           fsr0h	equ	0xFEA
  8087                           fsr0l	equ	0xFE9
  8088                           wreg	equ	0xFE8
  8089                           indf1	equ	0xFE7
  8090                           fsr1h	equ	0xFE2
  8091                           fsr1l	equ	0xFE1
  8092                           indf2	equ	0xFDF
  8093                           postinc2	equ	0xFDE
  8094                           fsr2h	equ	0xFDA
  8095                           fsr2l	equ	0xFD9
  8096                           status	equ	0xFD8
  8097                           
  8098 ;; *************** function _i2c_putch *****************
  8099 ;; Defined at:
  8100 ;;		line 217 in file "mcc_generated_files/i2c1.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  character       1    wreg     unsigned char 
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  character       1   16[COMRAM] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;                  1    wreg      void 
  8107 ;; Registers used:
  8108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;Total ram usage:        1 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    4
  8121 ;; This function calls:
  8122 ;;		Nothing
  8123 ;; This function is called by:
  8124 ;;		_I2C_Send
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           	psect	text58
  8129  003EA0                     __ptext58:
  8130                           	opt stack 0
  8131  003EA0                     _i2c_putch:
  8132                           	opt stack 20
  8133                           
  8134                           ; BSR set to: 1
  8135                           ;incstack = 0
  8136                           ;i2c_putch@character stored from wreg
  8137  003EA0  6E11               	movwf	i2c_putch@character,c
  8138                           
  8139                           ;i2c1.c: 219: I2C_Output.Buffer[I2C_Output.inPointer] = character;
  8140  003EA2  0103               	movlb	3	; () banked
  8141  003EA4  5100               	movf	_I2C_Output& (0+255),w,b
  8142  003EA6  0D01               	mullw	1
  8143  003EA8  0E02               	movlw	low (_I2C_Output+2)
  8144  003EAA  24F3               	addwf	prodl,w,c
  8145  003EAC  6ED9               	movwf	fsr2l,c
  8146  003EAE  0E03               	movlw	high (_I2C_Output+2)
  8147  003EB0  20F4               	addwfc	prodh,w,c
  8148  003EB2  6EDA               	movwf	fsr2h,c
  8149  003EB4  C011  FFDF         	movff	i2c_putch@character,indf2
  8150                           
  8151                           ; BSR set to: 3
  8152                           ;i2c1.c: 220: I2C_Output.inPointer = (I2C_Output.inPointer + 1) % 128;
  8153  003EB8  0103               	movlb	3	; () banked
  8154  003EBA  2900               	incf	_I2C_Output& (0+255),w,b
  8155  003EBC  0B7F               	andlw	127
  8156  003EBE  0103               	movlb	3	; () banked
  8157  003EC0  6F00               	movwf	_I2C_Output& (0+255),b
  8158                           
  8159                           ; BSR set to: 3
  8160  003EC2  0012               	return		;funcret
  8161  003EC4                     __end_of_i2c_putch:
  8162                           	opt stack 0
  8163                           tblptru	equ	0xFF8
  8164                           tblptrh	equ	0xFF7
  8165                           tblptrl	equ	0xFF6
  8166                           tablat	equ	0xFF5
  8167                           prodh	equ	0xFF4
  8168                           prodl	equ	0xFF3
  8169                           intcon	equ	0xFF2
  8170                           intcon2	equ	0xFF1
  8171                           indf0	equ	0xFEF
  8172                           postinc0	equ	0xFEE
  8173                           fsr0h	equ	0xFEA
  8174                           fsr0l	equ	0xFE9
  8175                           wreg	equ	0xFE8
  8176                           indf1	equ	0xFE7
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           fsr2h	equ	0xFDA
  8182                           fsr2l	equ	0xFD9
  8183                           status	equ	0xFD8
  8184                           
  8185 ;; *************** function _Process4TO20Transmitter *****************
  8186 ;; Defined at:
  8187 ;;		line 272 in file "devices.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  msg             2   23[BANK0 ] PTR struct .
  8190 ;;		 -> I2CQueue(160), 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  Online_data     3    8[BANK1 ] float 
  8193 ;;  PWM_Duty        2    6[BANK1 ] unsigned int 
  8194 ;;  Data_Receive    2    4[BANK1 ] unsigned int 
  8195 ;;  result          1    0[BANK1 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      unsigned char 
  8198 ;; Registers used:
  8199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Totals:         0       6      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;Total ram usage:       17 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    8
  8212 ;; This function calls:
  8213 ;;		_EPWM1_LoadDutyValue
  8214 ;;		_EPWM3_LoadDutyValue
  8215 ;;		_PWM4_LoadDutyValue
  8216 ;;		_PWM5_LoadDutyValue
  8217 ;;		___ftdiv
  8218 ;;		___ftge
  8219 ;;		___ftmul
  8220 ;;		___fttol
  8221 ;;		___lwdiv
  8222 ;;		___lwtoft
  8223 ;;		___wmul
  8224 ;;		_round
  8225 ;; This function is called by:
  8226 ;;		_I2C_ProcessPacket
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           	psect	text59
  8231  001060                     __ptext59:
  8232                           	opt stack 0
  8233  001060                     _Process4TO20Transmitter:
  8234                           	opt stack 20
  8235                           
  8236                           ;devices.c: 274: unsigned char result = 1;
  8237                           
  8238                           ; BSR set to: 3
  8239                           ;incstack = 0
  8240  001060  0E01               	movlw	1
  8241  001062  0101               	movlb	1	; () banked
  8242  001064  6FE1               	movwf	Process4TO20Transmitter@result& (0+255),b
  8243                           
  8244                           ;devices.c: 275: uint16_t Data_Received = 0 ;
  8245  001066  0E00               	movlw	0
  8246  001068  0101               	movlb	1	; () banked
  8247  00106A  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8248  00106C  0E00               	movlw	0
  8249  00106E  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8250                           
  8251                           ;devices.c: 276: float Online_data = 0;
  8252  001070  0E00               	movlw	0
  8253  001072  0101               	movlb	1	; () banked
  8254  001074  6FE9               	movwf	Process4TO20Transmitter@Online_data& (0+255),b
  8255  001076  0E00               	movlw	0
  8256  001078  0101               	movlb	1	; () banked
  8257  00107A  6FEA               	movwf	(Process4TO20Transmitter@Online_data+1)& (0+255),b
  8258  00107C  0E00               	movlw	0
  8259  00107E  0101               	movlb	1	; () banked
  8260  001080  6FEB               	movwf	(Process4TO20Transmitter@Online_data+2)& (0+255),b
  8261                           
  8262                           ;devices.c: 277: uint16_t PWM_Duty = 0;
  8263  001082  0E00               	movlw	0
  8264  001084  0101               	movlb	1	; () banked
  8265  001086  6FE8               	movwf	(Process4TO20Transmitter@PWM_Duty+1)& (0+255),b
  8266  001088  0E00               	movlw	0
  8267  00108A  6FE7               	movwf	Process4TO20Transmitter@PWM_Duty& (0+255),b
  8268                           
  8269                           ;devices.c: 278: switch (msg->CommandL)
  8270  00108C  EF0C  F00D         	goto	l7294
  8271  001090                     l1014:
  8272  001090  BE8C               	btfsc	3980,7,c	;volatile
  8273  001092  D002               	goto	u5300
  8274  001094  8E8C               	bsf	3980,7,c	;volatile
  8275  001096  D001               	goto	l7190
  8276  001098                     u5300:
  8277  001098  9E8C               	bcf	3980,7,c	;volatile
  8278  00109A                     l7190:
  8279                           
  8280                           ;devices.c: 283: Data_Received = ((msg->Params[0])<<8)
  8281                           ;devices.c: 284: + ((msg->Params[1]));
  8282  00109A  0100               	movlb	0	; () banked
  8283  00109C  EE20 F007          	lfsr	2,7
  8284  0010A0  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8285  0010A2  26D9               	addwf	fsr2l,f,c
  8286  0010A4  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8287  0010A6  22DA               	addwfc	fsr2h,f,c
  8288  0010A8  50DF               	movf	indf2,w,c
  8289  0010AA  0100               	movlb	0	; () banked
  8290  0010AC  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8291  0010AE  0100               	movlb	0	; () banked
  8292  0010B0  EE20 F006          	lfsr	2,6
  8293  0010B4  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8294  0010B6  26D9               	addwf	fsr2l,f,c
  8295  0010B8  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8296  0010BA  22DA               	addwfc	fsr2h,f,c
  8297  0010BC  50DF               	movf	indf2,w,c
  8298  0010BE  0100               	movlb	0	; () banked
  8299  0010C0  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8300  0010C2  0100               	movlb	0	; () banked
  8301  0010C4  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8302  0010C6  0100               	movlb	0	; () banked
  8303  0010C8  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8304  0010CA  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8305  0010CC  0100               	movlb	0	; () banked
  8306  0010CE  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8307  0010D0  0100               	movlb	0	; () banked
  8308  0010D2  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8309  0010D4  0101               	movlb	1	; () banked
  8310  0010D6  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8311  0010D8  0100               	movlb	0	; () banked
  8312  0010DA  0E00               	movlw	0
  8313  0010DC  0100               	movlb	0	; () banked
  8314  0010DE  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8315  0010E0  0101               	movlb	1	; () banked
  8316  0010E2  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8317                           
  8318                           ; BSR set to: 1
  8319                           ;devices.c: 285: Online_data = (((float)(Data_Received))/100);
  8320  0010E4  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8321  0010E8  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8322  0010EC  EC62  F01F         	call	___lwtoft	;wreg free
  8323  0010F0  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8324  0010F4  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8325  0010F8  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8326  0010FC  0E00               	movlw	0
  8327  0010FE  6E2B               	movwf	___ftdiv@f2,c
  8328  001100  0EC8               	movlw	200
  8329  001102  6E2C               	movwf	___ftdiv@f2+1,c
  8330  001104  0E42               	movlw	66
  8331  001106  6E2D               	movwf	___ftdiv@f2+2,c
  8332  001108  EC9C  F015         	call	___ftdiv	;wreg free
  8333  00110C  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8334  001110  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8335  001114  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8336                           
  8337                           ;devices.c: 286: Online_data = ((Online_data)*682)/100;
  8338  001118  0E80               	movlw	128
  8339  00111A  6E1C               	movwf	___ftmul@f2,c
  8340  00111C  0E2A               	movlw	42
  8341  00111E  6E1D               	movwf	___ftmul@f2+1,c
  8342  001120  0E44               	movlw	68
  8343  001122  6E1E               	movwf	___ftmul@f2+2,c
  8344  001124  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8345  001128  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8346  00112C  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8347  001130  ECAC  F014         	call	___ftmul	;wreg free
  8348  001134  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8349  001138  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8350  00113C  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8351  001140  0E00               	movlw	0
  8352  001142  6E2B               	movwf	___ftdiv@f2,c
  8353  001144  0EC8               	movlw	200
  8354  001146  6E2C               	movwf	___ftdiv@f2+1,c
  8355  001148  0E42               	movlw	66
  8356  00114A  6E2D               	movwf	___ftdiv@f2+2,c
  8357  00114C  EC9C  F015         	call	___ftdiv	;wreg free
  8358  001150  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8359  001154  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8360  001158  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8361                           
  8362                           ;devices.c: 287: PWM_Duty = (uint16_t)(Online_data);
  8363  00115C  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8364  001160  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8365  001164  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8366  001168  EC32  F014         	call	___fttol	;wreg free
  8367  00116C  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8368  001170  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8369                           
  8370                           ;devices.c: 288: EPWM1_LoadDutyValue(round(PWM_Duty));
  8371  001174  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8372  001178  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8373  00117C  EC62  F01F         	call	___lwtoft	;wreg free
  8374  001180  C019  F0E9         	movff	?___lwtoft,round@x
  8375  001184  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8376  001188  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8377  00118C  EC48  F019         	call	_round	;wreg free
  8378  001190  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8379  001194  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8380  001198  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8381                           
  8382                           ;devices.c: 288: EPWM1_LoadDutyValue(round(PWM_Duty));
  8383  00119C  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8384  0011A0  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8385  0011A4  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8386  0011A8  EC32  F014         	call	___fttol	;wreg free
  8387  0011AC  C01C  F0EF         	movff	?___fttol,EPWM1_LoadDutyValue@dutyValue
  8388  0011B0  C01D  F0F0         	movff	?___fttol+1,EPWM1_LoadDutyValue@dutyValue+1
  8389  0011B4  EC9A  F01E         	call	_EPWM1_LoadDutyValue	;wreg free
  8390                           
  8391                           ;devices.c: 289: break;
  8392  0011B8  EF2E  F00D         	goto	l7296
  8393  0011BC                     l1018:
  8394  0011BC  BE8C               	btfsc	3980,7,c	;volatile
  8395  0011BE  D002               	goto	u5320
  8396  0011C0  8E8C               	bsf	3980,7,c	;volatile
  8397  0011C2  D001               	goto	l7202
  8398  0011C4                     u5320:
  8399  0011C4  9E8C               	bcf	3980,7,c	;volatile
  8400  0011C6                     l7202:
  8401                           
  8402                           ;devices.c: 293: Data_Received = ((msg->Params[0])<<8)
  8403                           ;devices.c: 294: + ((msg->Params[1]));
  8404  0011C6  0100               	movlb	0	; () banked
  8405  0011C8  EE20 F007          	lfsr	2,7
  8406  0011CC  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8407  0011CE  26D9               	addwf	fsr2l,f,c
  8408  0011D0  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8409  0011D2  22DA               	addwfc	fsr2h,f,c
  8410  0011D4  50DF               	movf	indf2,w,c
  8411  0011D6  0100               	movlb	0	; () banked
  8412  0011D8  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8413  0011DA  0100               	movlb	0	; () banked
  8414  0011DC  EE20 F006          	lfsr	2,6
  8415  0011E0  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8416  0011E2  26D9               	addwf	fsr2l,f,c
  8417  0011E4  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8418  0011E6  22DA               	addwfc	fsr2h,f,c
  8419  0011E8  50DF               	movf	indf2,w,c
  8420  0011EA  0100               	movlb	0	; () banked
  8421  0011EC  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8422  0011EE  0100               	movlb	0	; () banked
  8423  0011F0  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8424  0011F2  0100               	movlb	0	; () banked
  8425  0011F4  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8426  0011F6  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8427  0011F8  0100               	movlb	0	; () banked
  8428  0011FA  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8429  0011FC  0100               	movlb	0	; () banked
  8430  0011FE  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8431  001200  0101               	movlb	1	; () banked
  8432  001202  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8433  001204  0100               	movlb	0	; () banked
  8434  001206  0E00               	movlw	0
  8435  001208  0100               	movlb	0	; () banked
  8436  00120A  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8437  00120C  0101               	movlb	1	; () banked
  8438  00120E  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8439                           
  8440                           ; BSR set to: 1
  8441                           ;devices.c: 295: Online_data = (((float)(Data_Received))/100);
  8442  001210  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8443  001214  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8444  001218  EC62  F01F         	call	___lwtoft	;wreg free
  8445  00121C  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8446  001220  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8447  001224  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8448  001228  0E00               	movlw	0
  8449  00122A  6E2B               	movwf	___ftdiv@f2,c
  8450  00122C  0EC8               	movlw	200
  8451  00122E  6E2C               	movwf	___ftdiv@f2+1,c
  8452  001230  0E42               	movlw	66
  8453  001232  6E2D               	movwf	___ftdiv@f2+2,c
  8454  001234  EC9C  F015         	call	___ftdiv	;wreg free
  8455  001238  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8456  00123C  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8457  001240  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8458                           
  8459                           ;devices.c: 296: Online_data = ((Online_data)*682)/100;
  8460  001244  0E80               	movlw	128
  8461  001246  6E1C               	movwf	___ftmul@f2,c
  8462  001248  0E2A               	movlw	42
  8463  00124A  6E1D               	movwf	___ftmul@f2+1,c
  8464  00124C  0E44               	movlw	68
  8465  00124E  6E1E               	movwf	___ftmul@f2+2,c
  8466  001250  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8467  001254  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8468  001258  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8469  00125C  ECAC  F014         	call	___ftmul	;wreg free
  8470  001260  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8471  001264  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8472  001268  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8473  00126C  0E00               	movlw	0
  8474  00126E  6E2B               	movwf	___ftdiv@f2,c
  8475  001270  0EC8               	movlw	200
  8476  001272  6E2C               	movwf	___ftdiv@f2+1,c
  8477  001274  0E42               	movlw	66
  8478  001276  6E2D               	movwf	___ftdiv@f2+2,c
  8479  001278  EC9C  F015         	call	___ftdiv	;wreg free
  8480  00127C  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8481  001280  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8482  001284  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8483                           
  8484                           ;devices.c: 297: PWM_Duty = (uint16_t)(Online_data);
  8485  001288  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8486  00128C  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8487  001290  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8488  001294  EC32  F014         	call	___fttol	;wreg free
  8489  001298  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8490  00129C  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8491                           
  8492                           ;devices.c: 298: EPWM3_LoadDutyValue(round(PWM_Duty));
  8493  0012A0  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8494  0012A4  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8495  0012A8  EC62  F01F         	call	___lwtoft	;wreg free
  8496  0012AC  C019  F0E9         	movff	?___lwtoft,round@x
  8497  0012B0  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8498  0012B4  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8499  0012B8  EC48  F019         	call	_round	;wreg free
  8500  0012BC  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8501  0012C0  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8502  0012C4  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8503                           
  8504                           ;devices.c: 298: EPWM3_LoadDutyValue(round(PWM_Duty));
  8505  0012C8  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8506  0012CC  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8507  0012D0  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8508  0012D4  EC32  F014         	call	___fttol	;wreg free
  8509  0012D8  C01C  F0EF         	movff	?___fttol,EPWM3_LoadDutyValue@dutyValue
  8510  0012DC  C01D  F0F0         	movff	?___fttol+1,EPWM3_LoadDutyValue@dutyValue+1
  8511  0012E0  EC1C  F01E         	call	_EPWM3_LoadDutyValue	;wreg free
  8512                           
  8513                           ;devices.c: 299: break;
  8514  0012E4  D3BB               	goto	l7296
  8515  0012E6                     l1021:
  8516  0012E6  BE8C               	btfsc	3980,7,c	;volatile
  8517  0012E8  D002               	goto	u5340
  8518  0012EA  8E8C               	bsf	3980,7,c	;volatile
  8519  0012EC  D001               	goto	l7214
  8520  0012EE                     u5340:
  8521  0012EE  9E8C               	bcf	3980,7,c	;volatile
  8522  0012F0                     l7214:
  8523                           
  8524                           ;devices.c: 303: Data_Received = ((msg->Params[0])<<8)
  8525                           ;devices.c: 304: + ((msg->Params[1]));
  8526  0012F0  0100               	movlb	0	; () banked
  8527  0012F2  EE20 F007          	lfsr	2,7
  8528  0012F6  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8529  0012F8  26D9               	addwf	fsr2l,f,c
  8530  0012FA  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8531  0012FC  22DA               	addwfc	fsr2h,f,c
  8532  0012FE  50DF               	movf	indf2,w,c
  8533  001300  0100               	movlb	0	; () banked
  8534  001302  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8535  001304  0100               	movlb	0	; () banked
  8536  001306  EE20 F006          	lfsr	2,6
  8537  00130A  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8538  00130C  26D9               	addwf	fsr2l,f,c
  8539  00130E  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8540  001310  22DA               	addwfc	fsr2h,f,c
  8541  001312  50DF               	movf	indf2,w,c
  8542  001314  0100               	movlb	0	; () banked
  8543  001316  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8544  001318  0100               	movlb	0	; () banked
  8545  00131A  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8546  00131C  0100               	movlb	0	; () banked
  8547  00131E  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8548  001320  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8549  001322  0100               	movlb	0	; () banked
  8550  001324  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8551  001326  0100               	movlb	0	; () banked
  8552  001328  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8553  00132A  0101               	movlb	1	; () banked
  8554  00132C  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8555  00132E  0100               	movlb	0	; () banked
  8556  001330  0E00               	movlw	0
  8557  001332  0100               	movlb	0	; () banked
  8558  001334  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8559  001336  0101               	movlb	1	; () banked
  8560  001338  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8561                           
  8562                           ; BSR set to: 1
  8563                           ;devices.c: 305: Online_data = (((float)(Data_Received))/100);
  8564  00133A  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8565  00133E  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8566  001342  EC62  F01F         	call	___lwtoft	;wreg free
  8567  001346  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8568  00134A  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8569  00134E  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8570  001352  0E00               	movlw	0
  8571  001354  6E2B               	movwf	___ftdiv@f2,c
  8572  001356  0EC8               	movlw	200
  8573  001358  6E2C               	movwf	___ftdiv@f2+1,c
  8574  00135A  0E42               	movlw	66
  8575  00135C  6E2D               	movwf	___ftdiv@f2+2,c
  8576  00135E  EC9C  F015         	call	___ftdiv	;wreg free
  8577  001362  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8578  001366  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8579  00136A  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8580                           
  8581                           ;devices.c: 306: Online_data = ((Online_data)*682)/100;
  8582  00136E  0E80               	movlw	128
  8583  001370  6E1C               	movwf	___ftmul@f2,c
  8584  001372  0E2A               	movlw	42
  8585  001374  6E1D               	movwf	___ftmul@f2+1,c
  8586  001376  0E44               	movlw	68
  8587  001378  6E1E               	movwf	___ftmul@f2+2,c
  8588  00137A  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8589  00137E  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8590  001382  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8591  001386  ECAC  F014         	call	___ftmul	;wreg free
  8592  00138A  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8593  00138E  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8594  001392  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8595  001396  0E00               	movlw	0
  8596  001398  6E2B               	movwf	___ftdiv@f2,c
  8597  00139A  0EC8               	movlw	200
  8598  00139C  6E2C               	movwf	___ftdiv@f2+1,c
  8599  00139E  0E42               	movlw	66
  8600  0013A0  6E2D               	movwf	___ftdiv@f2+2,c
  8601  0013A2  EC9C  F015         	call	___ftdiv	;wreg free
  8602  0013A6  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8603  0013AA  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8604  0013AE  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8605                           
  8606                           ;devices.c: 307: PWM_Duty = (uint16_t)(Online_data);
  8607  0013B2  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8608  0013B6  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8609  0013BA  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8610  0013BE  EC32  F014         	call	___fttol	;wreg free
  8611  0013C2  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8612  0013C6  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8613                           
  8614                           ;devices.c: 308: PWM4_LoadDutyValue(round(PWM_Duty));
  8615  0013CA  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8616  0013CE  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8617  0013D2  EC62  F01F         	call	___lwtoft	;wreg free
  8618  0013D6  C019  F0E9         	movff	?___lwtoft,round@x
  8619  0013DA  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8620  0013DE  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8621  0013E2  EC48  F019         	call	_round	;wreg free
  8622  0013E6  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8623  0013EA  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8624  0013EE  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8625                           
  8626                           ;devices.c: 308: PWM4_LoadDutyValue(round(PWM_Duty));
  8627  0013F2  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8628  0013F6  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8629  0013FA  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8630  0013FE  EC32  F014         	call	___fttol	;wreg free
  8631  001402  C01C  F0EF         	movff	?___fttol,PWM4_LoadDutyValue@dutyValue
  8632  001406  C01D  F0F0         	movff	?___fttol+1,PWM4_LoadDutyValue@dutyValue+1
  8633  00140A  EC01  F01E         	call	_PWM4_LoadDutyValue	;wreg free
  8634                           
  8635                           ;devices.c: 309: break;
  8636  00140E  D326               	goto	l7296
  8637  001410                     l1024:
  8638  001410  BE8C               	btfsc	3980,7,c	;volatile
  8639  001412  D002               	goto	u5360
  8640  001414  8E8C               	bsf	3980,7,c	;volatile
  8641  001416  D001               	goto	l7226
  8642  001418                     u5360:
  8643  001418  9E8C               	bcf	3980,7,c	;volatile
  8644  00141A                     l7226:
  8645                           
  8646                           ;devices.c: 313: Data_Received = ((msg->Params[0])<<8)
  8647                           ;devices.c: 314: + ((msg->Params[1]));
  8648  00141A  0100               	movlb	0	; () banked
  8649  00141C  EE20 F007          	lfsr	2,7
  8650  001420  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8651  001422  26D9               	addwf	fsr2l,f,c
  8652  001424  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8653  001426  22DA               	addwfc	fsr2h,f,c
  8654  001428  50DF               	movf	indf2,w,c
  8655  00142A  0100               	movlb	0	; () banked
  8656  00142C  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8657  00142E  0100               	movlb	0	; () banked
  8658  001430  EE20 F006          	lfsr	2,6
  8659  001434  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8660  001436  26D9               	addwf	fsr2l,f,c
  8661  001438  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8662  00143A  22DA               	addwfc	fsr2h,f,c
  8663  00143C  50DF               	movf	indf2,w,c
  8664  00143E  0100               	movlb	0	; () banked
  8665  001440  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8666  001442  0100               	movlb	0	; () banked
  8667  001444  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8668  001446  0100               	movlb	0	; () banked
  8669  001448  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8670  00144A  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8671  00144C  0100               	movlb	0	; () banked
  8672  00144E  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8673  001450  0100               	movlb	0	; () banked
  8674  001452  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8675  001454  0101               	movlb	1	; () banked
  8676  001456  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8677  001458  0100               	movlb	0	; () banked
  8678  00145A  0E00               	movlw	0
  8679  00145C  0100               	movlb	0	; () banked
  8680  00145E  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8681  001460  0101               	movlb	1	; () banked
  8682  001462  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8683                           
  8684                           ; BSR set to: 1
  8685                           ;devices.c: 315: Online_data = (((float)(Data_Received))/100);
  8686  001464  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8687  001468  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8688  00146C  EC62  F01F         	call	___lwtoft	;wreg free
  8689  001470  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8690  001474  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8691  001478  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8692  00147C  0E00               	movlw	0
  8693  00147E  6E2B               	movwf	___ftdiv@f2,c
  8694  001480  0EC8               	movlw	200
  8695  001482  6E2C               	movwf	___ftdiv@f2+1,c
  8696  001484  0E42               	movlw	66
  8697  001486  6E2D               	movwf	___ftdiv@f2+2,c
  8698  001488  EC9C  F015         	call	___ftdiv	;wreg free
  8699  00148C  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8700  001490  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8701  001494  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8702                           
  8703                           ;devices.c: 316: Online_data = ((Online_data)*682)/100;
  8704  001498  0E80               	movlw	128
  8705  00149A  6E1C               	movwf	___ftmul@f2,c
  8706  00149C  0E2A               	movlw	42
  8707  00149E  6E1D               	movwf	___ftmul@f2+1,c
  8708  0014A0  0E44               	movlw	68
  8709  0014A2  6E1E               	movwf	___ftmul@f2+2,c
  8710  0014A4  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8711  0014A8  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8712  0014AC  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8713  0014B0  ECAC  F014         	call	___ftmul	;wreg free
  8714  0014B4  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8715  0014B8  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8716  0014BC  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8717  0014C0  0E00               	movlw	0
  8718  0014C2  6E2B               	movwf	___ftdiv@f2,c
  8719  0014C4  0EC8               	movlw	200
  8720  0014C6  6E2C               	movwf	___ftdiv@f2+1,c
  8721  0014C8  0E42               	movlw	66
  8722  0014CA  6E2D               	movwf	___ftdiv@f2+2,c
  8723  0014CC  EC9C  F015         	call	___ftdiv	;wreg free
  8724  0014D0  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8725  0014D4  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8726  0014D8  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8727                           
  8728                           ;devices.c: 317: PWM_Duty = (uint16_t)(Online_data);
  8729  0014DC  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8730  0014E0  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8731  0014E4  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8732  0014E8  EC32  F014         	call	___fttol	;wreg free
  8733  0014EC  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8734  0014F0  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8735                           
  8736                           ;devices.c: 318: PWM5_LoadDutyValue(round(PWM_Duty));
  8737  0014F4  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8738  0014F8  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8739  0014FC  EC62  F01F         	call	___lwtoft	;wreg free
  8740  001500  C019  F0E9         	movff	?___lwtoft,round@x
  8741  001504  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8742  001508  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8743  00150C  EC48  F019         	call	_round	;wreg free
  8744  001510  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8745  001514  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8746  001518  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8747                           
  8748                           ;devices.c: 318: PWM5_LoadDutyValue(round(PWM_Duty));
  8749  00151C  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8750  001520  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8751  001524  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8752  001528  EC32  F014         	call	___fttol	;wreg free
  8753  00152C  C01C  F0EF         	movff	?___fttol,PWM5_LoadDutyValue@dutyValue
  8754  001530  C01D  F0F0         	movff	?___fttol+1,PWM5_LoadDutyValue@dutyValue+1
  8755  001534  ECE6  F01D         	call	_PWM5_LoadDutyValue	;wreg free
  8756                           
  8757                           ;devices.c: 319: break;
  8758  001538  D291               	goto	l7296
  8759  00153A                     l1027:
  8760  00153A  BE8C               	btfsc	3980,7,c	;volatile
  8761  00153C  D002               	goto	u5380
  8762  00153E  8E8C               	bsf	3980,7,c	;volatile
  8763  001540  D001               	goto	l7238
  8764  001542                     u5380:
  8765  001542  9E8C               	bcf	3980,7,c	;volatile
  8766  001544                     l7238:
  8767                           
  8768                           ;devices.c: 323: Data_Received = ((msg->Params[0])<<8)
  8769                           ;devices.c: 324: + ((msg->Params[1]));
  8770  001544  0100               	movlb	0	; () banked
  8771  001546  EE20 F007          	lfsr	2,7
  8772  00154A  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8773  00154C  26D9               	addwf	fsr2l,f,c
  8774  00154E  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8775  001550  22DA               	addwfc	fsr2h,f,c
  8776  001552  50DF               	movf	indf2,w,c
  8777  001554  0100               	movlb	0	; () banked
  8778  001556  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8779  001558  0100               	movlb	0	; () banked
  8780  00155A  EE20 F006          	lfsr	2,6
  8781  00155E  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8782  001560  26D9               	addwf	fsr2l,f,c
  8783  001562  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8784  001564  22DA               	addwfc	fsr2h,f,c
  8785  001566  50DF               	movf	indf2,w,c
  8786  001568  0100               	movlb	0	; () banked
  8787  00156A  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8788  00156C  0100               	movlb	0	; () banked
  8789  00156E  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8790  001570  0100               	movlb	0	; () banked
  8791  001572  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8792  001574  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8793  001576  0100               	movlb	0	; () banked
  8794  001578  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8795  00157A  0100               	movlb	0	; () banked
  8796  00157C  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8797  00157E  0101               	movlb	1	; () banked
  8798  001580  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8799  001582  0100               	movlb	0	; () banked
  8800  001584  0E00               	movlw	0
  8801  001586  0100               	movlb	0	; () banked
  8802  001588  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8803  00158A  0101               	movlb	1	; () banked
  8804  00158C  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8805                           
  8806                           ; BSR set to: 1
  8807                           ;devices.c: 325: Online_data = (((float)(Data_Received))/100);
  8808  00158E  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8809  001592  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8810  001596  EC62  F01F         	call	___lwtoft	;wreg free
  8811  00159A  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8812  00159E  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8813  0015A2  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8814  0015A6  0E00               	movlw	0
  8815  0015A8  6E2B               	movwf	___ftdiv@f2,c
  8816  0015AA  0EC8               	movlw	200
  8817  0015AC  6E2C               	movwf	___ftdiv@f2+1,c
  8818  0015AE  0E42               	movlw	66
  8819  0015B0  6E2D               	movwf	___ftdiv@f2+2,c
  8820  0015B2  EC9C  F015         	call	___ftdiv	;wreg free
  8821  0015B6  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8822  0015BA  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8823  0015BE  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8824                           
  8825                           ;devices.c: 326: Online_data = ((Online_data)*682)/100;
  8826  0015C2  0E80               	movlw	128
  8827  0015C4  6E1C               	movwf	___ftmul@f2,c
  8828  0015C6  0E2A               	movlw	42
  8829  0015C8  6E1D               	movwf	___ftmul@f2+1,c
  8830  0015CA  0E44               	movlw	68
  8831  0015CC  6E1E               	movwf	___ftmul@f2+2,c
  8832  0015CE  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8833  0015D2  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8834  0015D6  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8835  0015DA  ECAC  F014         	call	___ftmul	;wreg free
  8836  0015DE  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8837  0015E2  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8838  0015E6  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8839  0015EA  0E00               	movlw	0
  8840  0015EC  6E2B               	movwf	___ftdiv@f2,c
  8841  0015EE  0EC8               	movlw	200
  8842  0015F0  6E2C               	movwf	___ftdiv@f2+1,c
  8843  0015F2  0E42               	movlw	66
  8844  0015F4  6E2D               	movwf	___ftdiv@f2+2,c
  8845  0015F6  EC9C  F015         	call	___ftdiv	;wreg free
  8846  0015FA  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8847  0015FE  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8848  001602  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8849                           
  8850                           ;devices.c: 327: PWM_Duty = (uint16_t)(Online_data);
  8851  001606  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8852  00160A  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8853  00160E  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8854  001612  EC32  F014         	call	___fttol	;wreg free
  8855  001616  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8856  00161A  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8857                           
  8858                           ;devices.c: 328: EPWM1_LoadDutyValue(round(PWM_Duty));
  8859  00161E  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8860  001622  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8861  001626  EC62  F01F         	call	___lwtoft	;wreg free
  8862  00162A  C019  F0E9         	movff	?___lwtoft,round@x
  8863  00162E  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8864  001632  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8865  001636  EC48  F019         	call	_round	;wreg free
  8866  00163A  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8867  00163E  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8868  001642  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8869                           
  8870                           ;devices.c: 328: EPWM1_LoadDutyValue(round(PWM_Duty));
  8871  001646  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8872  00164A  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8873  00164E  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8874  001652  EC32  F014         	call	___fttol	;wreg free
  8875  001656  C01C  F0EF         	movff	?___fttol,EPWM1_LoadDutyValue@dutyValue
  8876  00165A  C01D  F0F0         	movff	?___fttol+1,EPWM1_LoadDutyValue@dutyValue+1
  8877  00165E  EC9A  F01E         	call	_EPWM1_LoadDutyValue	;wreg free
  8878                           
  8879                           ;devices.c: 329: break;
  8880  001662  D1FC               	goto	l7296
  8881  001664                     l1030:
  8882  001664  BE8C               	btfsc	3980,7,c	;volatile
  8883  001666  D002               	goto	u5400
  8884  001668  8E8C               	bsf	3980,7,c	;volatile
  8885  00166A  D001               	goto	l7250
  8886  00166C                     u5400:
  8887  00166C  9E8C               	bcf	3980,7,c	;volatile
  8888  00166E                     l7250:
  8889                           
  8890                           ;devices.c: 333: Data_Received = ((msg->Params[0])<<8)
  8891                           ;devices.c: 334: + ((msg->Params[1]));
  8892  00166E  0100               	movlb	0	; () banked
  8893  001670  EE20 F007          	lfsr	2,7
  8894  001674  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8895  001676  26D9               	addwf	fsr2l,f,c
  8896  001678  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8897  00167A  22DA               	addwfc	fsr2h,f,c
  8898  00167C  50DF               	movf	indf2,w,c
  8899  00167E  0100               	movlb	0	; () banked
  8900  001680  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  8901  001682  0100               	movlb	0	; () banked
  8902  001684  EE20 F006          	lfsr	2,6
  8903  001688  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  8904  00168A  26D9               	addwf	fsr2l,f,c
  8905  00168C  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  8906  00168E  22DA               	addwfc	fsr2h,f,c
  8907  001690  50DF               	movf	indf2,w,c
  8908  001692  0100               	movlb	0	; () banked
  8909  001694  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  8910  001696  0100               	movlb	0	; () banked
  8911  001698  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  8912  00169A  0100               	movlb	0	; () banked
  8913  00169C  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  8914  00169E  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  8915  0016A0  0100               	movlb	0	; () banked
  8916  0016A2  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  8917  0016A4  0100               	movlb	0	; () banked
  8918  0016A6  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  8919  0016A8  0101               	movlb	1	; () banked
  8920  0016AA  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  8921  0016AC  0100               	movlb	0	; () banked
  8922  0016AE  0E00               	movlw	0
  8923  0016B0  0100               	movlb	0	; () banked
  8924  0016B2  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  8925  0016B4  0101               	movlb	1	; () banked
  8926  0016B6  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  8927                           
  8928                           ; BSR set to: 1
  8929                           ;devices.c: 335: Online_data = (((float)(Data_Received))/100);
  8930  0016B8  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  8931  0016BC  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  8932  0016C0  EC62  F01F         	call	___lwtoft	;wreg free
  8933  0016C4  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  8934  0016C8  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  8935  0016CC  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  8936  0016D0  0E00               	movlw	0
  8937  0016D2  6E2B               	movwf	___ftdiv@f2,c
  8938  0016D4  0EC8               	movlw	200
  8939  0016D6  6E2C               	movwf	___ftdiv@f2+1,c
  8940  0016D8  0E42               	movlw	66
  8941  0016DA  6E2D               	movwf	___ftdiv@f2+2,c
  8942  0016DC  EC9C  F015         	call	___ftdiv	;wreg free
  8943  0016E0  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8944  0016E4  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8945  0016E8  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8946                           
  8947                           ;devices.c: 336: Online_data = ((Online_data)*682)/100;
  8948  0016EC  0E80               	movlw	128
  8949  0016EE  6E1C               	movwf	___ftmul@f2,c
  8950  0016F0  0E2A               	movlw	42
  8951  0016F2  6E1D               	movwf	___ftmul@f2+1,c
  8952  0016F4  0E44               	movlw	68
  8953  0016F6  6E1E               	movwf	___ftmul@f2+2,c
  8954  0016F8  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  8955  0016FC  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  8956  001700  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  8957  001704  ECAC  F014         	call	___ftmul	;wreg free
  8958  001708  C019  F028         	movff	?___ftmul,___ftdiv@f1
  8959  00170C  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  8960  001710  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  8961  001714  0E00               	movlw	0
  8962  001716  6E2B               	movwf	___ftdiv@f2,c
  8963  001718  0EC8               	movlw	200
  8964  00171A  6E2C               	movwf	___ftdiv@f2+1,c
  8965  00171C  0E42               	movlw	66
  8966  00171E  6E2D               	movwf	___ftdiv@f2+2,c
  8967  001720  EC9C  F015         	call	___ftdiv	;wreg free
  8968  001724  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  8969  001728  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  8970  00172C  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  8971                           
  8972                           ;devices.c: 337: PWM_Duty = (uint16_t)(Online_data);
  8973  001730  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  8974  001734  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  8975  001738  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  8976  00173C  EC32  F014         	call	___fttol	;wreg free
  8977  001740  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  8978  001744  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  8979                           
  8980                           ;devices.c: 338: EPWM3_LoadDutyValue(round(PWM_Duty));
  8981  001748  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  8982  00174C  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  8983  001750  EC62  F01F         	call	___lwtoft	;wreg free
  8984  001754  C019  F0E9         	movff	?___lwtoft,round@x
  8985  001758  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  8986  00175C  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  8987  001760  EC48  F019         	call	_round	;wreg free
  8988  001764  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  8989  001768  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  8990  00176C  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  8991                           
  8992                           ;devices.c: 338: EPWM3_LoadDutyValue(round(PWM_Duty));
  8993  001770  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  8994  001774  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  8995  001778  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  8996  00177C  EC32  F014         	call	___fttol	;wreg free
  8997  001780  C01C  F0EF         	movff	?___fttol,EPWM3_LoadDutyValue@dutyValue
  8998  001784  C01D  F0F0         	movff	?___fttol+1,EPWM3_LoadDutyValue@dutyValue+1
  8999  001788  EC1C  F01E         	call	_EPWM3_LoadDutyValue	;wreg free
  9000                           
  9001                           ;devices.c: 339: break;
  9002  00178C  D167               	goto	l7296
  9003  00178E                     l1033:
  9004  00178E  BE8C               	btfsc	3980,7,c	;volatile
  9005  001790  D002               	goto	u5420
  9006  001792  8E8C               	bsf	3980,7,c	;volatile
  9007  001794  D001               	goto	l7262
  9008  001796                     u5420:
  9009  001796  9E8C               	bcf	3980,7,c	;volatile
  9010  001798                     l7262:
  9011                           
  9012                           ;devices.c: 343: Data_Received = ((msg->Params[0])<<8)
  9013                           ;devices.c: 344: + ((msg->Params[1]));
  9014  001798  0100               	movlb	0	; () banked
  9015  00179A  EE20 F007          	lfsr	2,7
  9016  00179E  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  9017  0017A0  26D9               	addwf	fsr2l,f,c
  9018  0017A2  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  9019  0017A4  22DA               	addwfc	fsr2h,f,c
  9020  0017A6  50DF               	movf	indf2,w,c
  9021  0017A8  0100               	movlb	0	; () banked
  9022  0017AA  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  9023  0017AC  0100               	movlb	0	; () banked
  9024  0017AE  EE20 F006          	lfsr	2,6
  9025  0017B2  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  9026  0017B4  26D9               	addwf	fsr2l,f,c
  9027  0017B6  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  9028  0017B8  22DA               	addwfc	fsr2h,f,c
  9029  0017BA  50DF               	movf	indf2,w,c
  9030  0017BC  0100               	movlb	0	; () banked
  9031  0017BE  6FF4               	movwf	(??_Process4TO20Transmitter+1)& (0+255),b
  9032  0017C0  0100               	movlb	0	; () banked
  9033  0017C2  51F4               	movf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  9034  0017C4  0100               	movlb	0	; () banked
  9035  0017C6  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  9036  0017C8  6BF5               	clrf	(??_Process4TO20Transmitter+2)& (0+255),b
  9037  0017CA  0100               	movlb	0	; () banked
  9038  0017CC  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  9039  0017CE  0100               	movlb	0	; () banked
  9040  0017D0  25F5               	addwf	(??_Process4TO20Transmitter+2)& (0+255),w,b
  9041  0017D2  0101               	movlb	1	; () banked
  9042  0017D4  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  9043  0017D6  0100               	movlb	0	; () banked
  9044  0017D8  0E00               	movlw	0
  9045  0017DA  0100               	movlb	0	; () banked
  9046  0017DC  21F6               	addwfc	(??_Process4TO20Transmitter+3)& (0+255),w,b
  9047  0017DE  0101               	movlb	1	; () banked
  9048  0017E0  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  9049                           
  9050                           ; BSR set to: 1
  9051                           ;devices.c: 345: Online_data = (((float)(Data_Received))/100);
  9052  0017E2  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  9053  0017E6  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  9054  0017EA  EC62  F01F         	call	___lwtoft	;wreg free
  9055  0017EE  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  9056  0017F2  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  9057  0017F6  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  9058  0017FA  0E00               	movlw	0
  9059  0017FC  6E2B               	movwf	___ftdiv@f2,c
  9060  0017FE  0EC8               	movlw	200
  9061  001800  6E2C               	movwf	___ftdiv@f2+1,c
  9062  001802  0E42               	movlw	66
  9063  001804  6E2D               	movwf	___ftdiv@f2+2,c
  9064  001806  EC9C  F015         	call	___ftdiv	;wreg free
  9065  00180A  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  9066  00180E  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  9067  001812  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  9068                           
  9069                           ;devices.c: 346: Online_data = ((Online_data)*682)/100;
  9070  001816  0E80               	movlw	128
  9071  001818  6E1C               	movwf	___ftmul@f2,c
  9072  00181A  0E2A               	movlw	42
  9073  00181C  6E1D               	movwf	___ftmul@f2+1,c
  9074  00181E  0E44               	movlw	68
  9075  001820  6E1E               	movwf	___ftmul@f2+2,c
  9076  001822  C1E9  F019         	movff	Process4TO20Transmitter@Online_data,___ftmul@f1
  9077  001826  C1EA  F01A         	movff	Process4TO20Transmitter@Online_data+1,___ftmul@f1+1
  9078  00182A  C1EB  F01B         	movff	Process4TO20Transmitter@Online_data+2,___ftmul@f1+2
  9079  00182E  ECAC  F014         	call	___ftmul	;wreg free
  9080  001832  C019  F028         	movff	?___ftmul,___ftdiv@f1
  9081  001836  C01A  F029         	movff	?___ftmul+1,___ftdiv@f1+1
  9082  00183A  C01B  F02A         	movff	?___ftmul+2,___ftdiv@f1+2
  9083  00183E  0E00               	movlw	0
  9084  001840  6E2B               	movwf	___ftdiv@f2,c
  9085  001842  0EC8               	movlw	200
  9086  001844  6E2C               	movwf	___ftdiv@f2+1,c
  9087  001846  0E42               	movlw	66
  9088  001848  6E2D               	movwf	___ftdiv@f2+2,c
  9089  00184A  EC9C  F015         	call	___ftdiv	;wreg free
  9090  00184E  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  9091  001852  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  9092  001856  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  9093                           
  9094                           ;devices.c: 347: PWM_Duty = (uint16_t)(Online_data);
  9095  00185A  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  9096  00185E  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  9097  001862  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  9098  001866  EC32  F014         	call	___fttol	;wreg free
  9099  00186A  C01C  F1E7         	movff	?___fttol,Process4TO20Transmitter@PWM_Duty
  9100  00186E  C01D  F1E8         	movff	?___fttol+1,Process4TO20Transmitter@PWM_Duty+1
  9101                           
  9102                           ;devices.c: 348: PWM4_LoadDutyValue(round(PWM_Duty));
  9103  001872  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  9104  001876  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  9105  00187A  EC62  F01F         	call	___lwtoft	;wreg free
  9106  00187E  C019  F0E9         	movff	?___lwtoft,round@x
  9107  001882  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  9108  001886  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  9109  00188A  EC48  F019         	call	_round	;wreg free
  9110  00188E  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  9111  001892  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  9112  001896  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  9113                           
  9114                           ;devices.c: 348: PWM4_LoadDutyValue(round(PWM_Duty));
  9115  00189A  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  9116  00189E  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  9117  0018A2  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  9118  0018A6  EC32  F014         	call	___fttol	;wreg free
  9119  0018AA  C01C  F0EF         	movff	?___fttol,PWM4_LoadDutyValue@dutyValue
  9120  0018AE  C01D  F0F0         	movff	?___fttol+1,PWM4_LoadDutyValue@dutyValue+1
  9121  0018B2  EC01  F01E         	call	_PWM4_LoadDutyValue	;wreg free
  9122                           
  9123                           ;devices.c: 349: break;
  9124  0018B6  D0D2               	goto	l7296
  9125  0018B8                     l1036:
  9126  0018B8  BE8C               	btfsc	3980,7,c	;volatile
  9127  0018BA  D002               	goto	u5440
  9128  0018BC  8E8C               	bsf	3980,7,c	;volatile
  9129  0018BE  D001               	goto	l7274
  9130  0018C0                     u5440:
  9131  0018C0  9E8C               	bcf	3980,7,c	;volatile
  9132  0018C2                     l7274:
  9133                           
  9134                           ;devices.c: 353: Data_Received = ((msg->Params[0] - '0')<<8)
  9135                           ;devices.c: 354: + ((msg->Params[1] - '0'));
  9136  0018C2  0100               	movlb	0	; () banked
  9137  0018C4  EE20 F006          	lfsr	2,6
  9138  0018C8  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  9139  0018CA  26D9               	addwf	fsr2l,f,c
  9140  0018CC  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  9141  0018CE  22DA               	addwfc	fsr2h,f,c
  9142  0018D0  50DF               	movf	indf2,w,c
  9143  0018D2  0100               	movlb	0	; () banked
  9144  0018D4  6FF3               	movwf	??_Process4TO20Transmitter& (0+255),b
  9145  0018D6  0100               	movlb	0	; () banked
  9146  0018D8  51F3               	movf	??_Process4TO20Transmitter& (0+255),w,b
  9147  0018DA  0100               	movlb	0	; () banked
  9148  0018DC  6FF5               	movwf	(??_Process4TO20Transmitter+2)& (0+255),b
  9149  0018DE  6BF4               	clrf	(??_Process4TO20Transmitter+1)& (0+255),b
  9150  0018E0  0100               	movlb	0	; () banked
  9151  0018E2  EE20 F007          	lfsr	2,7
  9152  0018E6  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  9153  0018E8  26D9               	addwf	fsr2l,f,c
  9154  0018EA  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  9155  0018EC  22DA               	addwfc	fsr2h,f,c
  9156  0018EE  50DF               	movf	indf2,w,c
  9157  0018F0  0100               	movlb	0	; () banked
  9158  0018F2  6FF6               	movwf	(??_Process4TO20Transmitter+3)& (0+255),b
  9159  0018F4  0100               	movlb	0	; () banked
  9160  0018F6  51F6               	movf	(??_Process4TO20Transmitter+3)& (0+255),w,b
  9161  0018F8  0100               	movlb	0	; () banked
  9162  0018FA  27F4               	addwf	(??_Process4TO20Transmitter+1)& (0+255),f,b
  9163  0018FC  0E00               	movlw	0
  9164  0018FE  23F5               	addwfc	(??_Process4TO20Transmitter+2)& (0+255),f,b
  9165  001900  0ED0               	movlw	208
  9166  001902  0100               	movlb	0	; () banked
  9167  001904  25F4               	addwf	(??_Process4TO20Transmitter+1)& (0+255),w,b
  9168  001906  0101               	movlb	1	; () banked
  9169  001908  6FE5               	movwf	Process4TO20Transmitter@Data_Received& (0+255),b
  9170  00190A  0ECF               	movlw	207
  9171  00190C  0100               	movlb	0	; () banked
  9172  00190E  21F5               	addwfc	(??_Process4TO20Transmitter+2)& (0+255),w,b
  9173  001910  0101               	movlb	1	; () banked
  9174  001912  6FE6               	movwf	(Process4TO20Transmitter@Data_Received+1)& (0+255),b
  9175                           
  9176                           ; BSR set to: 1
  9177                           ;devices.c: 355: Online_data = (((float)(Data_Received))/100);
  9178  001914  C1E5  F019         	movff	Process4TO20Transmitter@Data_Received,___lwtoft@c
  9179  001918  C1E6  F01A         	movff	Process4TO20Transmitter@Data_Received+1,___lwtoft@c+1
  9180  00191C  EC62  F01F         	call	___lwtoft	;wreg free
  9181  001920  C019  F028         	movff	?___lwtoft,___ftdiv@f1
  9182  001924  C01A  F029         	movff	?___lwtoft+1,___ftdiv@f1+1
  9183  001928  C01B  F02A         	movff	?___lwtoft+2,___ftdiv@f1+2
  9184  00192C  0E00               	movlw	0
  9185  00192E  6E2B               	movwf	___ftdiv@f2,c
  9186  001930  0EC8               	movlw	200
  9187  001932  6E2C               	movwf	___ftdiv@f2+1,c
  9188  001934  0E42               	movlw	66
  9189  001936  6E2D               	movwf	___ftdiv@f2+2,c
  9190  001938  EC9C  F015         	call	___ftdiv	;wreg free
  9191  00193C  C028  F1E9         	movff	?___ftdiv,Process4TO20Transmitter@Online_data
  9192  001940  C029  F1EA         	movff	?___ftdiv+1,Process4TO20Transmitter@Online_data+1
  9193  001944  C02A  F1EB         	movff	?___ftdiv+2,Process4TO20Transmitter@Online_data+2
  9194                           
  9195                           ;devices.c: 356: if (Online_data>100){Online_data = 100;}
  9196  001948  0E00               	movlw	0
  9197  00194A  6E11               	movwf	___ftge@ff1,c
  9198  00194C  0EC8               	movlw	200
  9199  00194E  6E12               	movwf	___ftge@ff1+1,c
  9200  001950  0E42               	movlw	66
  9201  001952  6E13               	movwf	___ftge@ff1+2,c
  9202  001954  C1E9  F014         	movff	Process4TO20Transmitter@Online_data,___ftge@ff2
  9203  001958  C1EA  F015         	movff	Process4TO20Transmitter@Online_data+1,___ftge@ff2+1
  9204  00195C  C1EB  F016         	movff	Process4TO20Transmitter@Online_data+2,___ftge@ff2+2
  9205  001960  EC00  F019         	call	___ftge	;wreg free
  9206  001964  B0D8               	btfsc	status,0,c
  9207  001966  D009               	goto	l7282
  9208  001968  0E00               	movlw	0
  9209  00196A  0101               	movlb	1	; () banked
  9210  00196C  6FE9               	movwf	Process4TO20Transmitter@Online_data& (0+255),b
  9211  00196E  0EC8               	movlw	200
  9212  001970  0101               	movlb	1	; () banked
  9213  001972  6FEA               	movwf	(Process4TO20Transmitter@Online_data+1)& (0+255),b
  9214  001974  0E42               	movlw	66
  9215  001976  0101               	movlb	1	; () banked
  9216  001978  6FEB               	movwf	(Process4TO20Transmitter@Online_data+2)& (0+255),b
  9217  00197A                     l7282:
  9218                           
  9219                           ;devices.c: 357: if (Online_data<0){Online_data = 0;}
  9220  00197A  0101               	movlb	1	; () banked
  9221  00197C  AFEB               	btfss	(Process4TO20Transmitter@Online_data+2)& (0+255),7,b
  9222  00197E  D009               	goto	l7286
  9223                           
  9224                           ; BSR set to: 1
  9225  001980  0E00               	movlw	0
  9226  001982  0101               	movlb	1	; () banked
  9227  001984  6FE9               	movwf	Process4TO20Transmitter@Online_data& (0+255),b
  9228  001986  0E00               	movlw	0
  9229  001988  0101               	movlb	1	; () banked
  9230  00198A  6FEA               	movwf	(Process4TO20Transmitter@Online_data+1)& (0+255),b
  9231  00198C  0E00               	movlw	0
  9232  00198E  0101               	movlb	1	; () banked
  9233  001990  6FEB               	movwf	(Process4TO20Transmitter@Online_data+2)& (0+255),b
  9234  001992                     l7286:
  9235                           
  9236                           ; BSR set to: 1
  9237                           ;devices.c: 358: PWM_Duty = (((uint16_t)(Online_data))*682)/100;
  9238  001992  C1E9  F01C         	movff	Process4TO20Transmitter@Online_data,___fttol@f1
  9239  001996  C1EA  F01D         	movff	Process4TO20Transmitter@Online_data+1,___fttol@f1+1
  9240  00199A  C1EB  F01E         	movff	Process4TO20Transmitter@Online_data+2,___fttol@f1+2
  9241  00199E  EC32  F014         	call	___fttol	;wreg free
  9242  0019A2  C01C  F02B         	movff	?___fttol,___wmul@multiplier
  9243  0019A6  C01D  F02C         	movff	?___fttol+1,___wmul@multiplier+1
  9244  0019AA  0E02               	movlw	2
  9245  0019AC  6E2E               	movwf	___wmul@multiplicand+1,c
  9246  0019AE  0EAA               	movlw	170
  9247  0019B0  6E2D               	movwf	___wmul@multiplicand,c
  9248  0019B2  EC19  F01F         	call	___wmul	;wreg free
  9249  0019B6  C02B  F031         	movff	?___wmul,___lwdiv@dividend
  9250  0019BA  C02C  F032         	movff	?___wmul+1,___lwdiv@dividend+1
  9251  0019BE  0E00               	movlw	0
  9252  0019C0  6E34               	movwf	___lwdiv@divisor+1,c
  9253  0019C2  0E64               	movlw	100
  9254  0019C4  6E33               	movwf	___lwdiv@divisor,c
  9255  0019C6  EC0C  F01C         	call	___lwdiv	;wreg free
  9256  0019CA  C031  F1E7         	movff	?___lwdiv,Process4TO20Transmitter@PWM_Duty
  9257  0019CE  C032  F1E8         	movff	?___lwdiv+1,Process4TO20Transmitter@PWM_Duty+1
  9258                           
  9259                           ;devices.c: 359: PWM5_LoadDutyValue(round(PWM_Duty));
  9260  0019D2  C1E7  F019         	movff	Process4TO20Transmitter@PWM_Duty,___lwtoft@c
  9261  0019D6  C1E8  F01A         	movff	Process4TO20Transmitter@PWM_Duty+1,___lwtoft@c+1
  9262  0019DA  EC62  F01F         	call	___lwtoft	;wreg free
  9263  0019DE  C019  F0E9         	movff	?___lwtoft,round@x
  9264  0019E2  C01A  F0EA         	movff	?___lwtoft+1,round@x+1
  9265  0019E6  C01B  F0EB         	movff	?___lwtoft+2,round@x+2
  9266  0019EA  EC48  F019         	call	_round	;wreg free
  9267  0019EE  C0E9  F1E2         	movff	?_round,_Process4TO20Transmitter$6380
  9268  0019F2  C0EA  F1E3         	movff	?_round+1,_Process4TO20Transmitter$6380+1
  9269  0019F6  C0EB  F1E4         	movff	?_round+2,_Process4TO20Transmitter$6380+2
  9270                           
  9271                           ;devices.c: 359: PWM5_LoadDutyValue(round(PWM_Duty));
  9272  0019FA  C1E2  F01C         	movff	_Process4TO20Transmitter$6380,___fttol@f1
  9273  0019FE  C1E3  F01D         	movff	_Process4TO20Transmitter$6380+1,___fttol@f1+1
  9274  001A02  C1E4  F01E         	movff	_Process4TO20Transmitter$6380+2,___fttol@f1+2
  9275  001A06  EC32  F014         	call	___fttol	;wreg free
  9276  001A0A  C01C  F0EF         	movff	?___fttol,PWM5_LoadDutyValue@dutyValue
  9277  001A0E  C01D  F0F0         	movff	?___fttol+1,PWM5_LoadDutyValue@dutyValue+1
  9278  001A12  ECE6  F01D         	call	_PWM5_LoadDutyValue	;wreg free
  9279                           
  9280                           ;devices.c: 364: }
  9281                           
  9282                           ;devices.c: 363: break;
  9283                           
  9284                           ;devices.c: 361: default:
  9285                           
  9286                           ;devices.c: 360: break;
  9287  001A16  D022               	goto	l7296
  9288  001A18                     l7294:
  9289  001A18  0100               	movlb	0	; () banked
  9290  001A1A  EE20 F005          	lfsr	2,5
  9291  001A1E  51F1               	movf	Process4TO20Transmitter@msg& (0+255),w,b
  9292  001A20  26D9               	addwf	fsr2l,f,c
  9293  001A22  51F2               	movf	(Process4TO20Transmitter@msg+1)& (0+255),w,b
  9294  001A24  22DA               	addwfc	fsr2h,f,c
  9295  001A26  50DF               	movf	indf2,w,c
  9296                           
  9297                           ; Switch size 1, requested type "space"
  9298                           ; Number of cases is 8, Range of values is 115 to 122
  9299                           ; switch strategies available:
  9300                           ; Name         Instructions Cycles
  9301                           ; simple_byte           25    13 (average)
  9302                           ;	Chosen strategy is simple_byte
  9303  001A28  0A73               	xorlw	115	; case 115
  9304  001A2A  B4D8               	btfsc	status,2,c
  9305  001A2C  EF48  F008         	goto	l1014
  9306  001A30  0A07               	xorlw	7	; case 116
  9307  001A32  B4D8               	btfsc	status,2,c
  9308  001A34  EFDE  F008         	goto	l1018
  9309  001A38  0A01               	xorlw	1	; case 117
  9310  001A3A  B4D8               	btfsc	status,2,c
  9311  001A3C  D454               	goto	l1021
  9312  001A3E  0A03               	xorlw	3	; case 118
  9313  001A40  B4D8               	btfsc	status,2,c
  9314  001A42  D4E6               	goto	l1024
  9315  001A44  0A01               	xorlw	1	; case 119
  9316  001A46  B4D8               	btfsc	status,2,c
  9317  001A48  D578               	goto	l1027
  9318  001A4A  0A0F               	xorlw	15	; case 120
  9319  001A4C  B4D8               	btfsc	status,2,c
  9320  001A4E  D60A               	goto	l1030
  9321  001A50  0A01               	xorlw	1	; case 121
  9322  001A52  B4D8               	btfsc	status,2,c
  9323  001A54  D69C               	goto	l1033
  9324  001A56  0A03               	xorlw	3	; case 122
  9325  001A58  B4D8               	btfsc	status,2,c
  9326  001A5A  D72E               	goto	l1036
  9327  001A5C                     l7296:
  9328                           
  9329                           ;devices.c: 365: return result;
  9330  001A5C  0101               	movlb	1	; () banked
  9331  001A5E  51E1               	movf	Process4TO20Transmitter@result& (0+255),w,b
  9332  001A60  0012               	return	
  9333  001A62                     __end_of_Process4TO20Transmitter:
  9334                           	opt stack 0
  9335                           tblptru	equ	0xFF8
  9336                           tblptrh	equ	0xFF7
  9337                           tblptrl	equ	0xFF6
  9338                           tablat	equ	0xFF5
  9339                           prodh	equ	0xFF4
  9340                           prodl	equ	0xFF3
  9341                           intcon	equ	0xFF2
  9342                           intcon2	equ	0xFF1
  9343                           indf0	equ	0xFEF
  9344                           postinc0	equ	0xFEE
  9345                           fsr0h	equ	0xFEA
  9346                           fsr0l	equ	0xFE9
  9347                           wreg	equ	0xFE8
  9348                           indf1	equ	0xFE7
  9349                           fsr1h	equ	0xFE2
  9350                           fsr1l	equ	0xFE1
  9351                           indf2	equ	0xFDF
  9352                           postinc2	equ	0xFDE
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _round *****************
  9358 ;; Defined at:
  9359 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\round.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  x               3   15[BANK0 ] unsigned char 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  f               3   18[BANK0 ] unsigned char 
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  3   15[BANK0 ] unsigned char 
  9366 ;; Registers used:
  9367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9373 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;Total ram usage:        6 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    7
  9380 ;; This function calls:
  9381 ;;		___ftadd
  9382 ;;		___ftneg
  9383 ;;		_trunc
  9384 ;; This function is called by:
  9385 ;;		_Process4TO20Transmitter
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           	psect	text60
  9390  003290                     __ptext60:
  9391                           	opt stack 0
  9392  003290                     _round:
  9393                           	opt stack 20
  9394                           
  9395                           ; BSR set to: 1
  9396                           ;incstack = 0
  9397  003290  C0E9  F035         	movff	round@x,trunc@x
  9398  003294  C0EA  F036         	movff	round@x+1,trunc@x+1
  9399  003298  C0EB  F037         	movff	round@x+2,trunc@x+2
  9400  00329C  ECD0  F019         	call	_trunc	;wreg free
  9401  0032A0  C035  F0DA         	movff	?_trunc,___ftneg@f1
  9402  0032A4  C036  F0DB         	movff	?_trunc+1,___ftneg@f1+1
  9403  0032A8  C037  F0DC         	movff	?_trunc+2,___ftneg@f1+2
  9404  0032AC  EC82  F01E         	call	___ftneg	;wreg free
  9405  0032B0  C0DA  F0DD         	movff	?___ftneg,___ftadd@f1
  9406  0032B4  C0DB  F0DE         	movff	?___ftneg+1,___ftadd@f1+1
  9407  0032B8  C0DC  F0DF         	movff	?___ftneg+2,___ftadd@f1+2
  9408  0032BC  C0E9  F0E0         	movff	round@x,___ftadd@f2
  9409  0032C0  C0EA  F0E1         	movff	round@x+1,___ftadd@f2+1
  9410  0032C4  C0EB  F0E2         	movff	round@x+2,___ftadd@f2+2
  9411  0032C8  EC31  F00D         	call	___ftadd	;wreg free
  9412  0032CC  C0DD  F0EC         	movff	?___ftadd,round@f
  9413  0032D0  C0DE  F0ED         	movff	?___ftadd+1,round@f+1
  9414  0032D4  C0DF  F0EE         	movff	?___ftadd+2,round@f+2
  9415  0032D8  C0E9  F0DD         	movff	round@x,___ftadd@f1
  9416  0032DC  C0EA  F0DE         	movff	round@x+1,___ftadd@f1+1
  9417  0032E0  C0EB  F0DF         	movff	round@x+2,___ftadd@f1+2
  9418  0032E4  C0EC  F0E0         	movff	round@f,___ftadd@f2
  9419  0032E8  C0ED  F0E1         	movff	round@f+1,___ftadd@f2+1
  9420  0032EC  C0EE  F0E2         	movff	round@f+2,___ftadd@f2+2
  9421  0032F0  EC31  F00D         	call	___ftadd	;wreg free
  9422  0032F4  C0DD  F0E9         	movff	?___ftadd,round@x
  9423  0032F8  C0DE  F0EA         	movff	?___ftadd+1,round@x+1
  9424  0032FC  C0DF  F0EB         	movff	?___ftadd+2,round@x+2
  9425  003300  C0E9  F035         	movff	round@x,trunc@x
  9426  003304  C0EA  F036         	movff	round@x+1,trunc@x+1
  9427  003308  C0EB  F037         	movff	round@x+2,trunc@x+2
  9428  00330C  ECD0  F019         	call	_trunc	;wreg free
  9429  003310  C035  F0E9         	movff	?_trunc,?_round
  9430  003314  C036  F0EA         	movff	?_trunc+1,?_round+1
  9431  003318  C037  F0EB         	movff	?_trunc+2,?_round+2
  9432  00331C  0012               	return	
  9433  00331E                     __end_of_round:
  9434                           	opt stack 0
  9435                           tblptru	equ	0xFF8
  9436                           tblptrh	equ	0xFF7
  9437                           tblptrl	equ	0xFF6
  9438                           tablat	equ	0xFF5
  9439                           prodh	equ	0xFF4
  9440                           prodl	equ	0xFF3
  9441                           intcon	equ	0xFF2
  9442                           intcon2	equ	0xFF1
  9443                           indf0	equ	0xFEF
  9444                           postinc0	equ	0xFEE
  9445                           fsr0h	equ	0xFEA
  9446                           fsr0l	equ	0xFE9
  9447                           wreg	equ	0xFE8
  9448                           indf1	equ	0xFE7
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           fsr2h	equ	0xFDA
  9454                           fsr2l	equ	0xFD9
  9455                           status	equ	0xFD8
  9456                           
  9457 ;; *************** function _trunc *****************
  9458 ;; Defined at:
  9459 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\trunc.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  x               3   52[COMRAM] unsigned char 
  9462 ;; Auto vars:     Size  Location     Type
  9463 ;;  i               3   55[COMRAM] unsigned char 
  9464 ;;  expon           2   58[COMRAM] int 
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  3   52[COMRAM] int 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9474 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;Total ram usage:        8 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    6
  9481 ;; This function calls:
  9482 ;;		___altoft
  9483 ;;		___fttol
  9484 ;;		_frexp
  9485 ;; This function is called by:
  9486 ;;		_round
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text61
  9491  0033A0                     __ptext61:
  9492                           	opt stack 0
  9493  0033A0                     _trunc:
  9494                           	opt stack 20
  9495                           
  9496                           ;incstack = 0
  9497  0033A0  C035  F011         	movff	trunc@x,frexp@value
  9498  0033A4  C036  F012         	movff	trunc@x+1,frexp@value+1
  9499  0033A8  C037  F013         	movff	trunc@x+2,frexp@value+2
  9500  0033AC  0E3B               	movlw	low trunc@expon
  9501  0033AE  6E14               	movwf	frexp@eptr,c
  9502  0033B0  0E00               	movlw	high trunc@expon
  9503  0033B2  6E15               	movwf	frexp@eptr+1,c
  9504  0033B4  EC50  F01A         	call	_frexp	;wreg free
  9505  0033B8  AE3C               	btfss	trunc@expon+1,7,c
  9506  0033BA  D007               	goto	l6776
  9507  0033BC  0E00               	movlw	0
  9508  0033BE  6E35               	movwf	?_trunc,c
  9509  0033C0  0E00               	movlw	0
  9510  0033C2  6E36               	movwf	?_trunc+1,c
  9511  0033C4  0E00               	movlw	0
  9512  0033C6  6E37               	movwf	?_trunc+2,c
  9513  0033C8  0012               	return	
  9514  0033CA                     l6776:
  9515  0033CA  503C               	movf	trunc@expon+1,w,c
  9516  0033CC  E104               	bnz	u5060
  9517  0033CE  0E15               	movlw	21
  9518  0033D0  5C3B               	subwf	trunc@expon,w,c
  9519  0033D2  A0D8               	btfss	status,0,c
  9520  0033D4  D007               	goto	l6780
  9521  0033D6                     u5060:
  9522  0033D6  C035  F035         	movff	trunc@x,?_trunc
  9523  0033DA  C036  F036         	movff	trunc@x+1,?_trunc+1
  9524  0033DE  C037  F037         	movff	trunc@x+2,?_trunc+2
  9525  0033E2  0012               	return	
  9526  0033E4                     l6780:
  9527  0033E4  C035  F01C         	movff	trunc@x,___fttol@f1
  9528  0033E8  C036  F01D         	movff	trunc@x+1,___fttol@f1+1
  9529  0033EC  C037  F01E         	movff	trunc@x+2,___fttol@f1+2
  9530  0033F0  EC32  F014         	call	___fttol	;wreg free
  9531  0033F4  C01C  F02B         	movff	?___fttol,___altoft@c
  9532  0033F8  C01D  F02C         	movff	?___fttol+1,___altoft@c+1
  9533  0033FC  C01E  F02D         	movff	?___fttol+2,___altoft@c+2
  9534  003400  C01F  F02E         	movff	?___fttol+3,___altoft@c+3
  9535  003404  EC8C  F01A         	call	___altoft	;wreg free
  9536  003408  C02B  F038         	movff	?___altoft,trunc@i
  9537  00340C  C02C  F039         	movff	?___altoft+1,trunc@i+1
  9538  003410  C02D  F03A         	movff	?___altoft+2,trunc@i+2
  9539  003414  C038  F035         	movff	trunc@i,?_trunc
  9540  003418  C039  F036         	movff	trunc@i+1,?_trunc+1
  9541  00341C  C03A  F037         	movff	trunc@i+2,?_trunc+2
  9542  003420  0012               	return	
  9543  003422                     __end_of_trunc:
  9544                           	opt stack 0
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           prodh	equ	0xFF4
  9550                           prodl	equ	0xFF3
  9551                           intcon	equ	0xFF2
  9552                           intcon2	equ	0xFF1
  9553                           indf0	equ	0xFEF
  9554                           postinc0	equ	0xFEE
  9555                           fsr0h	equ	0xFEA
  9556                           fsr0l	equ	0xFE9
  9557                           wreg	equ	0xFE8
  9558                           indf1	equ	0xFE7
  9559                           fsr1h	equ	0xFE2
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567 ;; *************** function _frexp *****************
  9568 ;; Defined at:
  9569 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\frexp.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  value           3   16[COMRAM] int 
  9572 ;;  eptr            2   19[COMRAM] PTR int 
  9573 ;;		 -> trunc@expon(2), 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;		None
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  3   16[COMRAM] PTR int 
  9578 ;; Registers used:
  9579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9585 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;Total ram usage:        7 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    4
  9592 ;; This function calls:
  9593 ;;		Nothing
  9594 ;; This function is called by:
  9595 ;;		_trunc
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           	psect	text62
  9600  0034A0                     __ptext62:
  9601                           	opt stack 0
  9602  0034A0                     _frexp:
  9603                           	opt stack 21
  9604                           
  9605                           ;incstack = 0
  9606  0034A0  5011               	movf	frexp@value,w,c
  9607  0034A2  1012               	iorwf	frexp@value+1,w,c
  9608  0034A4  1013               	iorwf	frexp@value+2,w,c
  9609  0034A6  A4D8               	btfss	status,2,c
  9610  0034A8  D009               	goto	l6618
  9611  0034AA  C014  FFD9         	movff	frexp@eptr,fsr2l
  9612  0034AE  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  9613  0034B2  0E00               	movlw	0
  9614  0034B4  6EDE               	movwf	postinc2,c
  9615  0034B6  0E00               	movlw	0
  9616  0034B8  6EDD               	movwf	postdec2,c
  9617                           
  9618                           ;	Return value of _frexp is never used
  9619  0034BA  0012               	return	
  9620  0034BC                     l6618:
  9621  0034BC  5013               	movf	frexp@value+2,w,c
  9622  0034BE  0B7F               	andlw	127
  9623  0034C0  6E16               	movwf	??_frexp& (0+255),c
  9624  0034C2  6A17               	clrf	(??_frexp+1)& (0+255),c
  9625  0034C4  90D8               	bcf	status,0,c
  9626  0034C6  3616               	rlcf	??_frexp,f,c
  9627  0034C8  3617               	rlcf	??_frexp+1,f,c
  9628  0034CA  C014  FFD9         	movff	frexp@eptr,fsr2l
  9629  0034CE  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  9630  0034D2  C016  FFDE         	movff	??_frexp,postinc2
  9631  0034D6  C017  FFDD         	movff	??_frexp+1,postdec2
  9632  0034DA  AE12               	btfss	frexp@value+1,7,c
  9633  0034DC  D003               	goto	u4790
  9634  0034DE  6A16               	clrf	??_frexp& (0+255),c
  9635  0034E0  2A16               	incf	??_frexp& (0+255),f,c
  9636  0034E2  D001               	goto	u4798
  9637  0034E4                     u4790:
  9638  0034E4  6A16               	clrf	??_frexp& (0+255),c
  9639  0034E6                     u4798:
  9640  0034E6  5016               	movf	??_frexp,w,c
  9641  0034E8  C014  FFD9         	movff	frexp@eptr,fsr2l
  9642  0034EC  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  9643  0034F0  12DE               	iorwf	postinc2,f,c
  9644  0034F2  0E00               	movlw	0
  9645  0034F4  12DD               	iorwf	postdec2,f,c
  9646  0034F6  C014  FFD9         	movff	frexp@eptr,fsr2l
  9647  0034FA  C015  FFDA         	movff	frexp@eptr+1,fsr2h
  9648  0034FE  0E82               	movlw	130
  9649  003500  26DE               	addwf	postinc2,f,c
  9650  003502  0EFF               	movlw	255
  9651  003504  22DD               	addwfc	postdec2,f,c
  9652  003506  8013               	bsf	frexp@value+2,0,c
  9653  003508  8213               	bsf	frexp@value+2,1,c
  9654  00350A  8413               	bsf	frexp@value+2,2,c
  9655  00350C  8613               	bsf	frexp@value+2,3,c
  9656  00350E  8813               	bsf	frexp@value+2,4,c
  9657  003510  8A13               	bsf	frexp@value+2,5,c
  9658  003512  9C13               	bcf	frexp@value+2,6,c
  9659  003514  9E12               	bcf	frexp@value+1,7,c
  9660  003516  0012               	return	
  9661  003518                     __end_of_frexp:
  9662                           	opt stack 0
  9663                           tblptru	equ	0xFF8
  9664                           tblptrh	equ	0xFF7
  9665                           tblptrl	equ	0xFF6
  9666                           tablat	equ	0xFF5
  9667                           prodh	equ	0xFF4
  9668                           prodl	equ	0xFF3
  9669                           intcon	equ	0xFF2
  9670                           intcon2	equ	0xFF1
  9671                           indf0	equ	0xFEF
  9672                           postinc0	equ	0xFEE
  9673                           fsr0h	equ	0xFEA
  9674                           fsr0l	equ	0xFE9
  9675                           wreg	equ	0xFE8
  9676                           indf1	equ	0xFE7
  9677                           fsr1h	equ	0xFE2
  9678                           fsr1l	equ	0xFE1
  9679                           indf2	equ	0xFDF
  9680                           postinc2	equ	0xFDE
  9681                           postdec2	equ	0xFDD
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function ___fttol *****************
  9687 ;; Defined at:
  9688 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\fttol.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  f1              3   27[COMRAM] float 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;  lval            4   37[COMRAM] unsigned long 
  9693 ;;  exp1            1   41[COMRAM] unsigned char 
  9694 ;;  sign1           1   36[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  4   27[COMRAM] long 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2, status,0
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;Total ram usage:       15 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    4
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_Process4TO20Transmitter
  9715 ;;		_trunc
  9716 ;;		_Referencia_SetTorque
  9717 ;;		_Referencia_Block
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text63
  9722  002864                     __ptext63:
  9723                           	opt stack 0
  9724  002864                     ___fttol:
  9725                           	opt stack 21
  9726                           
  9727                           ;incstack = 0
  9728  002864  C01E  F020         	movff	___fttol@f1+2,??___fttol
  9729  002868  6A21               	clrf	(??___fttol+1)& (0+255),c
  9730  00286A  6A22               	clrf	(??___fttol+2)& (0+255),c
  9731  00286C  341D               	rlcf	___fttol@f1+1,w,c
  9732  00286E  3620               	rlcf	??___fttol& (0+255),f,c
  9733  002870  E301               	bnc	u4641
  9734  002872  8021               	bsf	(??___fttol+1)& (0+255),0,c
  9735  002874                     u4641:
  9736  002874  5020               	movf	??___fttol,w,c
  9737  002876  6E2A               	movwf	___fttol@exp1,c
  9738  002878  502A               	movf	___fttol@exp1,w,c
  9739  00287A  A4D8               	btfss	status,2,c
  9740  00287C  D009               	goto	l6534
  9741  00287E  0E00               	movlw	0
  9742  002880  6E1C               	movwf	?___fttol,c
  9743  002882  0E00               	movlw	0
  9744  002884  6E1D               	movwf	?___fttol+1,c
  9745  002886  0E00               	movlw	0
  9746  002888  6E1E               	movwf	?___fttol+2,c
  9747  00288A  0E00               	movlw	0
  9748  00288C  6E1F               	movwf	?___fttol+3,c
  9749  00288E  0012               	return	
  9750  002890                     l6534:
  9751  002890  0E17               	movlw	23
  9752  002892  6E20               	movwf	??___fttol& (0+255),c
  9753  002894  C01C  F021         	movff	___fttol@f1,??___fttol+1
  9754  002898  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  9755  00289C  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  9756  0028A0  2820               	incf	??___fttol,w,c
  9757  0028A2  6E24               	movwf	(??___fttol+4)& (0+255),c
  9758  0028A4  D004               	goto	u4660
  9759  0028A6                     u4665:
  9760  0028A6  90D8               	bcf	status,0,c
  9761  0028A8  3223               	rrcf	??___fttol+3,f,c
  9762  0028AA  3222               	rrcf	??___fttol+2,f,c
  9763  0028AC  3221               	rrcf	??___fttol+1,f,c
  9764  0028AE                     u4660:
  9765  0028AE  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  9766  0028B0  D7FA               	goto	u4665
  9767  0028B2  5021               	movf	??___fttol+1,w,c
  9768  0028B4  6E25               	movwf	___fttol@sign1,c
  9769  0028B6  8E1D               	bsf	___fttol@f1+1,7,c
  9770  0028B8  0EFF               	movlw	255
  9771  0028BA  161C               	andwf	___fttol@f1,f,c
  9772  0028BC  0EFF               	movlw	255
  9773  0028BE  161D               	andwf	___fttol@f1+1,f,c
  9774  0028C0  0E00               	movlw	0
  9775  0028C2  161E               	andwf	___fttol@f1+2,f,c
  9776  0028C4  501C               	movf	___fttol@f1,w,c
  9777  0028C6  6E26               	movwf	___fttol@lval,c
  9778  0028C8  501D               	movf	___fttol@f1+1,w,c
  9779  0028CA  6E27               	movwf	___fttol@lval+1,c
  9780  0028CC  501E               	movf	___fttol@f1+2,w,c
  9781  0028CE  6E28               	movwf	___fttol@lval+2,c
  9782  0028D0  6A29               	clrf	___fttol@lval+3,c
  9783  0028D2  0E8E               	movlw	142
  9784  0028D4  5E2A               	subwf	___fttol@exp1,f,c
  9785  0028D6  AE2A               	btfss	___fttol@exp1,7,c
  9786  0028D8  D016               	goto	l6556
  9787  0028DA  502A               	movf	___fttol@exp1,w,c
  9788  0028DC  0A80               	xorlw	128
  9789  0028DE  0F8F               	addlw	143
  9790  0028E0  B0D8               	btfsc	status,0,c
  9791  0028E2  D009               	goto	l6552
  9792  0028E4  0E00               	movlw	0
  9793  0028E6  6E1C               	movwf	?___fttol,c
  9794  0028E8  0E00               	movlw	0
  9795  0028EA  6E1D               	movwf	?___fttol+1,c
  9796  0028EC  0E00               	movlw	0
  9797  0028EE  6E1E               	movwf	?___fttol+2,c
  9798  0028F0  0E00               	movlw	0
  9799  0028F2  6E1F               	movwf	?___fttol+3,c
  9800  0028F4  0012               	return	
  9801  0028F6                     l6552:
  9802  0028F6  90D8               	bcf	status,0,c
  9803  0028F8  3229               	rrcf	___fttol@lval+3,f,c
  9804  0028FA  3228               	rrcf	___fttol@lval+2,f,c
  9805  0028FC  3227               	rrcf	___fttol@lval+1,f,c
  9806  0028FE  3226               	rrcf	___fttol@lval,f,c
  9807  002900  3E2A               	incfsz	___fttol@exp1,f,c
  9808  002902  D7F9               	goto	l6552
  9809  002904  D015               	goto	l6566
  9810  002906                     l6556:
  9811  002906  0E17               	movlw	23
  9812  002908  642A               	cpfsgt	___fttol@exp1,c
  9813  00290A  D00F               	goto	l6564
  9814  00290C  0E00               	movlw	0
  9815  00290E  6E1C               	movwf	?___fttol,c
  9816  002910  0E00               	movlw	0
  9817  002912  6E1D               	movwf	?___fttol+1,c
  9818  002914  0E00               	movlw	0
  9819  002916  6E1E               	movwf	?___fttol+2,c
  9820  002918  0E00               	movlw	0
  9821  00291A  6E1F               	movwf	?___fttol+3,c
  9822  00291C  0012               	return	
  9823  00291E                     l6562:
  9824  00291E  90D8               	bcf	status,0,c
  9825  002920  3626               	rlcf	___fttol@lval,f,c
  9826  002922  3627               	rlcf	___fttol@lval+1,f,c
  9827  002924  3628               	rlcf	___fttol@lval+2,f,c
  9828  002926  3629               	rlcf	___fttol@lval+3,f,c
  9829  002928  062A               	decf	___fttol@exp1,f,c
  9830  00292A                     l6564:
  9831  00292A  502A               	movf	___fttol@exp1,w,c
  9832  00292C  A4D8               	btfss	status,2,c
  9833  00292E  D7F7               	goto	l6562
  9834  002930                     l6566:
  9835  002930  5025               	movf	___fttol@sign1,w,c
  9836  002932  B4D8               	btfsc	status,2,c
  9837  002934  D008               	goto	l6570
  9838  002936  1E29               	comf	___fttol@lval+3,f,c
  9839  002938  1E28               	comf	___fttol@lval+2,f,c
  9840  00293A  1E27               	comf	___fttol@lval+1,f,c
  9841  00293C  6C26               	negf	___fttol@lval,c
  9842  00293E  0E00               	movlw	0
  9843  002940  2227               	addwfc	___fttol@lval+1,f,c
  9844  002942  2228               	addwfc	___fttol@lval+2,f,c
  9845  002944  2229               	addwfc	___fttol@lval+3,f,c
  9846  002946                     l6570:
  9847  002946  C026  F01C         	movff	___fttol@lval,?___fttol
  9848  00294A  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  9849  00294E  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  9850  002952  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  9851  002956  0012               	return	
  9852  002958                     __end_of___fttol:
  9853                           	opt stack 0
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           prodh	equ	0xFF4
  9859                           prodl	equ	0xFF3
  9860                           intcon	equ	0xFF2
  9861                           intcon2	equ	0xFF1
  9862                           indf0	equ	0xFEF
  9863                           postinc0	equ	0xFEE
  9864                           fsr0h	equ	0xFEA
  9865                           fsr0l	equ	0xFE9
  9866                           wreg	equ	0xFE8
  9867                           indf1	equ	0xFE7
  9868                           fsr1h	equ	0xFE2
  9869                           fsr1l	equ	0xFE1
  9870                           indf2	equ	0xFDF
  9871                           postinc2	equ	0xFDE
  9872                           postdec2	equ	0xFDD
  9873                           fsr2h	equ	0xFDA
  9874                           fsr2l	equ	0xFD9
  9875                           status	equ	0xFD8
  9876                           
  9877 ;; *************** function ___altoft *****************
  9878 ;; Defined at:
  9879 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\altoft.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  c               4   42[COMRAM] long 
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  sign            1   51[COMRAM] unsigned char 
  9884 ;;  exp             1   50[COMRAM] unsigned char 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  3   42[COMRAM] float 
  9887 ;; Registers used:
  9888 ;;		wreg, status,2, status,0, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:       10 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    5
  9901 ;; This function calls:
  9902 ;;		___ftpack
  9903 ;; This function is called by:
  9904 ;;		_trunc
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text64
  9909  003518                     __ptext64:
  9910                           	opt stack 0
  9911  003518                     ___altoft:
  9912                           	opt stack 20
  9913                           
  9914                           ;incstack = 0
  9915  003518  0E00               	movlw	0
  9916  00351A  6E34               	movwf	___altoft@sign,c
  9917  00351C  0E8E               	movlw	142
  9918  00351E  6E33               	movwf	___altoft@exp,c
  9919  003520  AE2E               	btfss	___altoft@c+3,7,c
  9920  003522  D011               	goto	l6522
  9921  003524  1E2E               	comf	___altoft@c+3,f,c
  9922  003526  1E2D               	comf	___altoft@c+2,f,c
  9923  003528  1E2C               	comf	___altoft@c+1,f,c
  9924  00352A  6C2B               	negf	___altoft@c,c
  9925  00352C  0E00               	movlw	0
  9926  00352E  222C               	addwfc	___altoft@c+1,f,c
  9927  003530  222D               	addwfc	___altoft@c+2,f,c
  9928  003532  222E               	addwfc	___altoft@c+3,f,c
  9929  003534  0E01               	movlw	1
  9930  003536  6E34               	movwf	___altoft@sign,c
  9931  003538  D006               	goto	l6522
  9932  00353A                     l6520:
  9933  00353A  90D8               	bcf	status,0,c
  9934  00353C  322E               	rrcf	___altoft@c+3,f,c
  9935  00353E  322D               	rrcf	___altoft@c+2,f,c
  9936  003540  322C               	rrcf	___altoft@c+1,f,c
  9937  003542  322B               	rrcf	___altoft@c,f,c
  9938  003544  2A33               	incf	___altoft@exp,f,c
  9939  003546                     l6522:
  9940  003546  0E00               	movlw	0
  9941  003548  142B               	andwf	___altoft@c,w,c
  9942  00354A  6E2F               	movwf	??___altoft& (0+255),c
  9943  00354C  0E00               	movlw	0
  9944  00354E  142C               	andwf	___altoft@c+1,w,c
  9945  003550  6E30               	movwf	(??___altoft+1)& (0+255),c
  9946  003552  0E00               	movlw	0
  9947  003554  142D               	andwf	___altoft@c+2,w,c
  9948  003556  6E31               	movwf	(??___altoft+2)& (0+255),c
  9949  003558  0EFF               	movlw	255
  9950  00355A  142E               	andwf	___altoft@c+3,w,c
  9951  00355C  6E32               	movwf	(??___altoft+3)& (0+255),c
  9952  00355E  502F               	movf	??___altoft,w,c
  9953  003560  1030               	iorwf	??___altoft+1,w,c
  9954  003562  1031               	iorwf	??___altoft+2,w,c
  9955  003564  1032               	iorwf	??___altoft+3,w,c
  9956  003566  A4D8               	btfss	status,2,c
  9957  003568  D7E8               	goto	l6520
  9958  00356A  C02B  F011         	movff	___altoft@c,___ftpack@arg
  9959  00356E  C02C  F012         	movff	___altoft@c+1,___ftpack@arg+1
  9960  003572  C02D  F013         	movff	___altoft@c+2,___ftpack@arg+2
  9961  003576  C033  F014         	movff	___altoft@exp,___ftpack@exp
  9962  00357A  C034  F015         	movff	___altoft@sign,___ftpack@sign
  9963  00357E  ECA8  F017         	call	___ftpack	;wreg free
  9964  003582  C011  F02B         	movff	?___ftpack,?___altoft
  9965  003586  C012  F02C         	movff	?___ftpack+1,?___altoft+1
  9966  00358A  C013  F02D         	movff	?___ftpack+2,?___altoft+2
  9967  00358E  0012               	return	
  9968  003590                     __end_of___altoft:
  9969                           	opt stack 0
  9970                           tblptru	equ	0xFF8
  9971                           tblptrh	equ	0xFF7
  9972                           tblptrl	equ	0xFF6
  9973                           tablat	equ	0xFF5
  9974                           prodh	equ	0xFF4
  9975                           prodl	equ	0xFF3
  9976                           intcon	equ	0xFF2
  9977                           intcon2	equ	0xFF1
  9978                           indf0	equ	0xFEF
  9979                           postinc0	equ	0xFEE
  9980                           fsr0h	equ	0xFEA
  9981                           fsr0l	equ	0xFE9
  9982                           wreg	equ	0xFE8
  9983                           indf1	equ	0xFE7
  9984                           fsr1h	equ	0xFE2
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function ___ftneg *****************
  9994 ;; Defined at:
  9995 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\ftneg.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;  f1              3    0[BANK0 ] float 
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;                  3    0[BANK0 ] float 
 10002 ;; Registers used:
 10003 ;;		wreg, status,2, status,0
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10009 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10013 ;;Total ram usage:        3 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    4
 10016 ;; This function calls:
 10017 ;;		Nothing
 10018 ;; This function is called by:
 10019 ;;		_round
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           	psect	text65
 10024  003D04                     __ptext65:
 10025                           	opt stack 0
 10026  003D04                     ___ftneg:
 10027                           	opt stack 22
 10028                           
 10029                           ;incstack = 0
 10030  003D04  0100               	movlb	0	; () banked
 10031  003D06  51DA               	movf	___ftneg@f1& (0+255),w,b
 10032  003D08  0100               	movlb	0	; () banked
 10033  003D0A  11DB               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 10034  003D0C  0100               	movlb	0	; () banked
 10035  003D0E  11DC               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 10036  003D10  B4D8               	btfsc	status,2,c
 10037  003D12  D009               	goto	l1835
 10038                           
 10039                           ; BSR set to: 0
 10040  003D14  0E00               	movlw	0
 10041  003D16  0100               	movlb	0	; () banked
 10042  003D18  1BDA               	xorwf	___ftneg@f1& (0+255),f,b
 10043  003D1A  0E00               	movlw	0
 10044  003D1C  0100               	movlb	0	; () banked
 10045  003D1E  1BDB               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 10046  003D20  0E80               	movlw	128
 10047  003D22  0100               	movlb	0	; () banked
 10048  003D24  1BDC               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 10049  003D26                     l1835:
 10050                           
 10051                           ; BSR set to: 0
 10052  003D26  C0DA  F0DA         	movff	___ftneg@f1,?___ftneg
 10053  003D2A  C0DB  F0DB         	movff	___ftneg@f1+1,?___ftneg+1
 10054  003D2E  C0DC  F0DC         	movff	___ftneg@f1+2,?___ftneg+2
 10055                           
 10056                           ; BSR set to: 0
 10057  003D32  0012               	return		;funcret
 10058  003D34                     __end_of___ftneg:
 10059                           	opt stack 0
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           indf0	equ	0xFEF
 10069                           postinc0	equ	0xFEE
 10070                           fsr0h	equ	0xFEA
 10071                           fsr0l	equ	0xFE9
 10072                           wreg	equ	0xFE8
 10073                           indf1	equ	0xFE7
 10074                           fsr1h	equ	0xFE2
 10075                           fsr1l	equ	0xFE1
 10076                           indf2	equ	0xFDF
 10077                           postinc2	equ	0xFDE
 10078                           postdec2	equ	0xFDD
 10079                           fsr2h	equ	0xFDA
 10080                           fsr2l	equ	0xFD9
 10081                           status	equ	0xFD8
 10082                           
 10083 ;; *************** function ___ftadd *****************
 10084 ;; Defined at:
 10085 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\ftadd.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  f1              3    3[BANK0 ] float 
 10088 ;;  f2              3    6[BANK0 ] float 
 10089 ;; Auto vars:     Size  Location     Type
 10090 ;;  exp1            1   14[BANK0 ] unsigned char 
 10091 ;;  exp2            1   13[BANK0 ] unsigned char 
 10092 ;;  sign            1   12[BANK0 ] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  3    3[BANK0 ] float 
 10095 ;; Registers used:
 10096 ;;		wreg, status,2, status,0, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10102 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10106 ;;Total ram usage:       12 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    5
 10109 ;; This function calls:
 10110 ;;		___ftpack
 10111 ;; This function is called by:
 10112 ;;		_round
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text66
 10117  001A62                     __ptext66:
 10118                           	opt stack 0
 10119  001A62                     ___ftadd:
 10120                           	opt stack 21
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;incstack = 0
 10124  001A62  C0DF  F0E3         	movff	___ftadd@f1+2,??___ftadd
 10125  001A66  0100               	movlb	0	; () banked
 10126  001A68  6BE4               	clrf	(??___ftadd+1)& (0+255),b
 10127  001A6A  6BE5               	clrf	(??___ftadd+2)& (0+255),b
 10128  001A6C  0100               	movlb	0	; () banked
 10129  001A6E  35DE               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 10130  001A70  0100               	movlb	0	; () banked
 10131  001A72  37E3               	rlcf	??___ftadd& (0+255),f,b
 10132  001A74  E301               	bnc	u4831
 10133  001A76  81E4               	bsf	(??___ftadd+1)& (0+255),0,b
 10134  001A78                     u4831:
 10135  001A78  0100               	movlb	0	; () banked
 10136  001A7A  51E3               	movf	??___ftadd& (0+255),w,b
 10137  001A7C  0100               	movlb	0	; () banked
 10138  001A7E  6FE8               	movwf	___ftadd@exp1& (0+255),b
 10139  001A80  C0E2  F0E3         	movff	___ftadd@f2+2,??___ftadd
 10140  001A84  0100               	movlb	0	; () banked
 10141  001A86  6BE4               	clrf	(??___ftadd+1)& (0+255),b
 10142  001A88  6BE5               	clrf	(??___ftadd+2)& (0+255),b
 10143  001A8A  0100               	movlb	0	; () banked
 10144  001A8C  35E1               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 10145  001A8E  0100               	movlb	0	; () banked
 10146  001A90  37E3               	rlcf	??___ftadd& (0+255),f,b
 10147  001A92  E301               	bnc	u4841
 10148  001A94  81E4               	bsf	(??___ftadd+1)& (0+255),0,b
 10149  001A96                     u4841:
 10150  001A96  0100               	movlb	0	; () banked
 10151  001A98  51E3               	movf	??___ftadd& (0+255),w,b
 10152  001A9A  0100               	movlb	0	; () banked
 10153  001A9C  6FE7               	movwf	___ftadd@exp2& (0+255),b
 10154                           
 10155                           ; BSR set to: 0
 10156  001A9E  0100               	movlb	0	; () banked
 10157  001AA0  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10158  001AA2  0100               	movlb	0	; () banked
 10159  001AA4  B4D8               	btfsc	status,2,c
 10160  001AA6  D011               	goto	l1778
 10161                           
 10162                           ; BSR set to: 0
 10163  001AA8  0100               	movlb	0	; () banked
 10164  001AAA  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10165  001AAC  0100               	movlb	0	; () banked
 10166  001AAE  5DE8               	subwf	___ftadd@exp1& (0+255),w,b
 10167  001AB0  B0D8               	btfsc	status,0,c
 10168  001AB2  D012               	goto	l6702
 10169                           
 10170                           ; BSR set to: 0
 10171  001AB4  0100               	movlb	0	; () banked
 10172  001AB6  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10173  001AB8  0800               	sublw	0
 10174  001ABA  0100               	movlb	0	; () banked
 10175  001ABC  25E7               	addwf	___ftadd@exp2& (0+255),w,b
 10176  001ABE  0100               	movlb	0	; () banked
 10177  001AC0  6FE3               	movwf	??___ftadd& (0+255),b
 10178  001AC2  0E18               	movlw	24
 10179  001AC4  0100               	movlb	0	; () banked
 10180  001AC6  65E3               	cpfsgt	??___ftadd& (0+255),b
 10181  001AC8  D007               	goto	l6702
 10182  001ACA                     l1778:
 10183                           
 10184                           ; BSR set to: 0
 10185  001ACA  C0E0  F0DD         	movff	___ftadd@f2,?___ftadd
 10186  001ACE  C0E1  F0DE         	movff	___ftadd@f2+1,?___ftadd+1
 10187  001AD2  C0E2  F0DF         	movff	___ftadd@f2+2,?___ftadd+2
 10188  001AD6  0012               	return	
 10189  001AD8                     l6702:
 10190                           
 10191                           ; BSR set to: 0
 10192  001AD8  0100               	movlb	0	; () banked
 10193  001ADA  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10194  001ADC  0100               	movlb	0	; () banked
 10195  001ADE  B4D8               	btfsc	status,2,c
 10196  001AE0  D011               	goto	l1782
 10197                           
 10198                           ; BSR set to: 0
 10199  001AE2  0100               	movlb	0	; () banked
 10200  001AE4  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10201  001AE6  0100               	movlb	0	; () banked
 10202  001AE8  5DE7               	subwf	___ftadd@exp2& (0+255),w,b
 10203  001AEA  B0D8               	btfsc	status,0,c
 10204  001AEC  D012               	goto	l6708
 10205                           
 10206                           ; BSR set to: 0
 10207  001AEE  0100               	movlb	0	; () banked
 10208  001AF0  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10209  001AF2  0800               	sublw	0
 10210  001AF4  0100               	movlb	0	; () banked
 10211  001AF6  25E8               	addwf	___ftadd@exp1& (0+255),w,b
 10212  001AF8  0100               	movlb	0	; () banked
 10213  001AFA  6FE3               	movwf	??___ftadd& (0+255),b
 10214  001AFC  0E18               	movlw	24
 10215  001AFE  0100               	movlb	0	; () banked
 10216  001B00  65E3               	cpfsgt	??___ftadd& (0+255),b
 10217  001B02  D007               	goto	l6708
 10218  001B04                     l1782:
 10219                           
 10220                           ; BSR set to: 0
 10221  001B04  C0DD  F0DD         	movff	___ftadd@f1,?___ftadd
 10222  001B08  C0DE  F0DE         	movff	___ftadd@f1+1,?___ftadd+1
 10223  001B0C  C0DF  F0DF         	movff	___ftadd@f1+2,?___ftadd+2
 10224  001B10  0012               	return	
 10225  001B12                     l6708:
 10226                           
 10227                           ; BSR set to: 0
 10228  001B12  0E06               	movlw	6
 10229  001B14  0100               	movlb	0	; () banked
 10230  001B16  6FE6               	movwf	___ftadd@sign& (0+255),b
 10231                           
 10232                           ; BSR set to: 0
 10233  001B18  0100               	movlb	0	; () banked
 10234  001B1A  AFDF               	btfss	(___ftadd@f1+2)& (0+255),7,b
 10235  001B1C  D002               	goto	l6714
 10236                           
 10237                           ; BSR set to: 0
 10238  001B1E  0100               	movlb	0	; () banked
 10239  001B20  8FE6               	bsf	___ftadd@sign& (0+255),7,b
 10240  001B22                     l6714:
 10241                           
 10242                           ; BSR set to: 0
 10243  001B22  0100               	movlb	0	; () banked
 10244  001B24  AFE2               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10245  001B26  D002               	goto	l1784
 10246                           
 10247                           ; BSR set to: 0
 10248  001B28  0100               	movlb	0	; () banked
 10249  001B2A  8DE6               	bsf	___ftadd@sign& (0+255),6,b
 10250  001B2C                     l1784:
 10251                           
 10252                           ; BSR set to: 0
 10253  001B2C  0100               	movlb	0	; () banked
 10254  001B2E  8FDE               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10255                           
 10256                           ; BSR set to: 0
 10257  001B30  0EFF               	movlw	255
 10258  001B32  0100               	movlb	0	; () banked
 10259  001B34  17DD               	andwf	___ftadd@f1& (0+255),f,b
 10260  001B36  0EFF               	movlw	255
 10261  001B38  0100               	movlb	0	; () banked
 10262  001B3A  17DE               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10263  001B3C  0E00               	movlw	0
 10264  001B3E  0100               	movlb	0	; () banked
 10265  001B40  17DF               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10266  001B42  0100               	movlb	0	; () banked
 10267  001B44  8FE1               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10268                           
 10269                           ; BSR set to: 0
 10270  001B46  0EFF               	movlw	255
 10271  001B48  0100               	movlb	0	; () banked
 10272  001B4A  17E0               	andwf	___ftadd@f2& (0+255),f,b
 10273  001B4C  0EFF               	movlw	255
 10274  001B4E  0100               	movlb	0	; () banked
 10275  001B50  17E1               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10276  001B52  0E00               	movlw	0
 10277  001B54  0100               	movlb	0	; () banked
 10278  001B56  17E2               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10279                           
 10280                           ; BSR set to: 0
 10281  001B58  0100               	movlb	0	; () banked
 10282  001B5A  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10283  001B5C  0100               	movlb	0	; () banked
 10284  001B5E  5DE8               	subwf	___ftadd@exp1& (0+255),w,b
 10285  001B60  B0D8               	btfsc	status,0,c
 10286  001B62  D025               	goto	l6734
 10287  001B64                     l6724:
 10288                           
 10289                           ; BSR set to: 0
 10290  001B64  0100               	movlb	0	; () banked
 10291  001B66  90D8               	bcf	status,0,c
 10292  001B68  37E0               	rlcf	___ftadd@f2& (0+255),f,b
 10293  001B6A  37E1               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10294  001B6C  37E2               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10295  001B6E  0100               	movlb	0	; () banked
 10296  001B70  07E7               	decf	___ftadd@exp2& (0+255),f,b
 10297                           
 10298                           ; BSR set to: 0
 10299  001B72  0100               	movlb	0	; () banked
 10300  001B74  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10301  001B76  0100               	movlb	0	; () banked
 10302  001B78  19E7               	xorwf	___ftadd@exp2& (0+255),w,b
 10303  001B7A  B4D8               	btfsc	status,2,c
 10304  001B7C  D011               	goto	l6732
 10305                           
 10306                           ; BSR set to: 0
 10307  001B7E  0100               	movlb	0	; () banked
 10308  001B80  07E6               	decf	___ftadd@sign& (0+255),f,b
 10309  001B82  C0E6  F0E3         	movff	___ftadd@sign,??___ftadd
 10310  001B86  0E07               	movlw	7
 10311  001B88  0100               	movlb	0	; () banked
 10312  001B8A  17E3               	andwf	??___ftadd& (0+255),f,b
 10313  001B8C  B4D8               	btfsc	status,2,c
 10314  001B8E  D008               	goto	l6732
 10315  001B90  D7E9               	goto	l6724
 10316  001B92                     l6730:
 10317                           
 10318                           ; BSR set to: 0
 10319  001B92  0100               	movlb	0	; () banked
 10320  001B94  90D8               	bcf	status,0,c
 10321  001B96  33DF               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10322  001B98  33DE               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10323  001B9A  33DD               	rrcf	___ftadd@f1& (0+255),f,b
 10324  001B9C  0100               	movlb	0	; () banked
 10325  001B9E  2BE8               	incf	___ftadd@exp1& (0+255),f,b
 10326  001BA0                     l6732:
 10327                           
 10328                           ; BSR set to: 0
 10329  001BA0  0100               	movlb	0	; () banked
 10330  001BA2  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10331  001BA4  0100               	movlb	0	; () banked
 10332  001BA6  19E8               	xorwf	___ftadd@exp1& (0+255),w,b
 10333  001BA8  B4D8               	btfsc	status,2,c
 10334  001BAA  D02B               	goto	l1793
 10335  001BAC  D7F2               	goto	l6730
 10336  001BAE                     l6734:
 10337                           
 10338                           ; BSR set to: 0
 10339  001BAE  0100               	movlb	0	; () banked
 10340  001BB0  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10341  001BB2  0100               	movlb	0	; () banked
 10342  001BB4  5DE7               	subwf	___ftadd@exp2& (0+255),w,b
 10343  001BB6  B0D8               	btfsc	status,0,c
 10344  001BB8  D024               	goto	l1793
 10345  001BBA                     l6736:
 10346                           
 10347                           ; BSR set to: 0
 10348  001BBA  0100               	movlb	0	; () banked
 10349  001BBC  90D8               	bcf	status,0,c
 10350  001BBE  37DD               	rlcf	___ftadd@f1& (0+255),f,b
 10351  001BC0  37DE               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10352  001BC2  37DF               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10353  001BC4  0100               	movlb	0	; () banked
 10354  001BC6  07E8               	decf	___ftadd@exp1& (0+255),f,b
 10355                           
 10356                           ; BSR set to: 0
 10357  001BC8  0100               	movlb	0	; () banked
 10358  001BCA  51E8               	movf	___ftadd@exp1& (0+255),w,b
 10359  001BCC  0100               	movlb	0	; () banked
 10360  001BCE  19E7               	xorwf	___ftadd@exp2& (0+255),w,b
 10361  001BD0  B4D8               	btfsc	status,2,c
 10362  001BD2  D011               	goto	l6744
 10363                           
 10364                           ; BSR set to: 0
 10365  001BD4  0100               	movlb	0	; () banked
 10366  001BD6  07E6               	decf	___ftadd@sign& (0+255),f,b
 10367  001BD8  C0E6  F0E3         	movff	___ftadd@sign,??___ftadd
 10368  001BDC  0E07               	movlw	7
 10369  001BDE  0100               	movlb	0	; () banked
 10370  001BE0  17E3               	andwf	??___ftadd& (0+255),f,b
 10371  001BE2  B4D8               	btfsc	status,2,c
 10372  001BE4  D008               	goto	l6744
 10373  001BE6  D7E9               	goto	l6736
 10374  001BE8                     l6742:
 10375                           
 10376                           ; BSR set to: 0
 10377  001BE8  0100               	movlb	0	; () banked
 10378  001BEA  90D8               	bcf	status,0,c
 10379  001BEC  33E2               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10380  001BEE  33E1               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10381  001BF0  33E0               	rrcf	___ftadd@f2& (0+255),f,b
 10382  001BF2  0100               	movlb	0	; () banked
 10383  001BF4  2BE7               	incf	___ftadd@exp2& (0+255),f,b
 10384  001BF6                     l6744:
 10385                           
 10386                           ; BSR set to: 0
 10387  001BF6  0100               	movlb	0	; () banked
 10388  001BF8  51E7               	movf	___ftadd@exp2& (0+255),w,b
 10389  001BFA  0100               	movlb	0	; () banked
 10390  001BFC  19E8               	xorwf	___ftadd@exp1& (0+255),w,b
 10391  001BFE  A4D8               	btfss	status,2,c
 10392  001C00  D7F3               	goto	l6742
 10393  001C02                     l1793:
 10394                           
 10395                           ; BSR set to: 0
 10396  001C02  0100               	movlb	0	; () banked
 10397  001C04  AFE6               	btfss	___ftadd@sign& (0+255),7,b
 10398  001C06  D012               	goto	l1802
 10399                           
 10400                           ; BSR set to: 0
 10401  001C08  0EFF               	movlw	255
 10402  001C0A  0100               	movlb	0	; () banked
 10403  001C0C  1BDD               	xorwf	___ftadd@f1& (0+255),f,b
 10404  001C0E  0EFF               	movlw	255
 10405  001C10  0100               	movlb	0	; () banked
 10406  001C12  1BDE               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10407  001C14  0EFF               	movlw	255
 10408  001C16  0100               	movlb	0	; () banked
 10409  001C18  1BDF               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10410  001C1A  0E01               	movlw	1
 10411  001C1C  0100               	movlb	0	; () banked
 10412  001C1E  27DD               	addwf	___ftadd@f1& (0+255),f,b
 10413  001C20  0E00               	movlw	0
 10414  001C22  0100               	movlb	0	; () banked
 10415  001C24  23DE               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10416  001C26  0E00               	movlw	0
 10417  001C28  0100               	movlb	0	; () banked
 10418  001C2A  23DF               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10419  001C2C                     l1802:
 10420                           
 10421                           ; BSR set to: 0
 10422  001C2C  0100               	movlb	0	; () banked
 10423  001C2E  ADE6               	btfss	___ftadd@sign& (0+255),6,b
 10424  001C30  D012               	goto	l6750
 10425                           
 10426                           ; BSR set to: 0
 10427  001C32  0EFF               	movlw	255
 10428  001C34  0100               	movlb	0	; () banked
 10429  001C36  1BE0               	xorwf	___ftadd@f2& (0+255),f,b
 10430  001C38  0EFF               	movlw	255
 10431  001C3A  0100               	movlb	0	; () banked
 10432  001C3C  1BE1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10433  001C3E  0EFF               	movlw	255
 10434  001C40  0100               	movlb	0	; () banked
 10435  001C42  1BE2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10436  001C44  0E01               	movlw	1
 10437  001C46  0100               	movlb	0	; () banked
 10438  001C48  27E0               	addwf	___ftadd@f2& (0+255),f,b
 10439  001C4A  0E00               	movlw	0
 10440  001C4C  0100               	movlb	0	; () banked
 10441  001C4E  23E1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10442  001C50  0E00               	movlw	0
 10443  001C52  0100               	movlb	0	; () banked
 10444  001C54  23E2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10445  001C56                     l6750:
 10446                           
 10447                           ; BSR set to: 0
 10448  001C56  0E00               	movlw	0
 10449  001C58  0100               	movlb	0	; () banked
 10450  001C5A  6FE6               	movwf	___ftadd@sign& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453  001C5C  0100               	movlb	0	; () banked
 10454  001C5E  51DD               	movf	___ftadd@f1& (0+255),w,b
 10455  001C60  0100               	movlb	0	; () banked
 10456  001C62  27E0               	addwf	___ftadd@f2& (0+255),f,b
 10457  001C64  0100               	movlb	0	; () banked
 10458  001C66  51DE               	movf	(___ftadd@f1+1)& (0+255),w,b
 10459  001C68  0100               	movlb	0	; () banked
 10460  001C6A  23E1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10461  001C6C  0100               	movlb	0	; () banked
 10462  001C6E  51DF               	movf	(___ftadd@f1+2)& (0+255),w,b
 10463  001C70  0100               	movlb	0	; () banked
 10464  001C72  23E2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10465                           
 10466                           ; BSR set to: 0
 10467  001C74  0100               	movlb	0	; () banked
 10468  001C76  AFE2               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10469  001C78  D015               	goto	l6760
 10470                           
 10471                           ; BSR set to: 0
 10472  001C7A  0EFF               	movlw	255
 10473  001C7C  0100               	movlb	0	; () banked
 10474  001C7E  1BE0               	xorwf	___ftadd@f2& (0+255),f,b
 10475  001C80  0EFF               	movlw	255
 10476  001C82  0100               	movlb	0	; () banked
 10477  001C84  1BE1               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10478  001C86  0EFF               	movlw	255
 10479  001C88  0100               	movlb	0	; () banked
 10480  001C8A  1BE2               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10481  001C8C  0E01               	movlw	1
 10482  001C8E  0100               	movlb	0	; () banked
 10483  001C90  27E0               	addwf	___ftadd@f2& (0+255),f,b
 10484  001C92  0E00               	movlw	0
 10485  001C94  0100               	movlb	0	; () banked
 10486  001C96  23E1               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10487  001C98  0E00               	movlw	0
 10488  001C9A  0100               	movlb	0	; () banked
 10489  001C9C  23E2               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10490                           
 10491                           ; BSR set to: 0
 10492  001C9E  0E01               	movlw	1
 10493  001CA0  0100               	movlb	0	; () banked
 10494  001CA2  6FE6               	movwf	___ftadd@sign& (0+255),b
 10495  001CA4                     l6760:
 10496                           
 10497                           ; BSR set to: 0
 10498  001CA4  C0E0  F011         	movff	___ftadd@f2,___ftpack@arg
 10499  001CA8  C0E1  F012         	movff	___ftadd@f2+1,___ftpack@arg+1
 10500  001CAC  C0E2  F013         	movff	___ftadd@f2+2,___ftpack@arg+2
 10501  001CB0  C0E8  F014         	movff	___ftadd@exp1,___ftpack@exp
 10502  001CB4  C0E6  F015         	movff	___ftadd@sign,___ftpack@sign
 10503  001CB8  ECA8  F017         	call	___ftpack	;wreg free
 10504  001CBC  C011  F0DD         	movff	?___ftpack,?___ftadd
 10505  001CC0  C012  F0DE         	movff	?___ftpack+1,?___ftadd+1
 10506  001CC4  C013  F0DF         	movff	?___ftpack+2,?___ftadd+2
 10507  001CC8  0012               	return	
 10508  001CCA                     __end_of___ftadd:
 10509                           	opt stack 0
 10510                           tblptru	equ	0xFF8
 10511                           tblptrh	equ	0xFF7
 10512                           tblptrl	equ	0xFF6
 10513                           tablat	equ	0xFF5
 10514                           prodh	equ	0xFF4
 10515                           prodl	equ	0xFF3
 10516                           intcon	equ	0xFF2
 10517                           intcon2	equ	0xFF1
 10518                           indf0	equ	0xFEF
 10519                           postinc0	equ	0xFEE
 10520                           fsr0h	equ	0xFEA
 10521                           fsr0l	equ	0xFE9
 10522                           wreg	equ	0xFE8
 10523                           indf1	equ	0xFE7
 10524                           fsr1h	equ	0xFE2
 10525                           fsr1l	equ	0xFE1
 10526                           indf2	equ	0xFDF
 10527                           postinc2	equ	0xFDE
 10528                           postdec2	equ	0xFDD
 10529                           fsr2h	equ	0xFDA
 10530                           fsr2l	equ	0xFD9
 10531                           status	equ	0xFD8
 10532                           
 10533 ;; *************** function ___wmul *****************
 10534 ;; Defined at:
 10535 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;  multiplier      2   42[COMRAM] unsigned int 
 10538 ;;  multiplicand    2   44[COMRAM] unsigned int 
 10539 ;; Auto vars:     Size  Location     Type
 10540 ;;  product         2   46[COMRAM] unsigned int 
 10541 ;; Return value:  Size  Location     Type
 10542 ;;                  2   42[COMRAM] unsigned int 
 10543 ;; Registers used:
 10544 ;;		wreg, status,2, status,0, prodl, prodh
 10545 ;; Tracked objects:
 10546 ;;		On entry : 0/0
 10547 ;;		On exit  : 0/0
 10548 ;;		Unchanged: 0/0
 10549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10553 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10554 ;;Total ram usage:        6 bytes
 10555 ;; Hardware stack levels used:    1
 10556 ;; Hardware stack levels required when called:    4
 10557 ;; This function calls:
 10558 ;;		Nothing
 10559 ;; This function is called by:
 10560 ;;		_Process4TO20Transmitter
 10561 ;;		_StepperMotor_Init
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           	psect	text67
 10566  003E32                     __ptext67:
 10567                           	opt stack 0
 10568  003E32                     ___wmul:
 10569                           	opt stack 23
 10570                           
 10571                           ;incstack = 0
 10572  003E32  502B               	movf	___wmul@multiplier,w,c
 10573  003E34  022D               	mulwf	___wmul@multiplicand,c
 10574  003E36  CFF3 F02F          	movff	prodl,___wmul@product
 10575  003E3A  CFF4 F030          	movff	prodh,___wmul@product+1
 10576  003E3E  502B               	movf	___wmul@multiplier,w,c
 10577  003E40  022E               	mulwf	___wmul@multiplicand+1,c
 10578  003E42  50F3               	movf	prodl,w,c
 10579  003E44  2630               	addwf	___wmul@product+1,f,c
 10580  003E46  502C               	movf	___wmul@multiplier+1,w,c
 10581  003E48  022D               	mulwf	___wmul@multiplicand,c
 10582  003E4A  50F3               	movf	prodl,w,c
 10583  003E4C  2630               	addwf	___wmul@product+1,f,c
 10584  003E4E  C02F  F02B         	movff	___wmul@product,?___wmul
 10585  003E52  C030  F02C         	movff	___wmul@product+1,?___wmul+1
 10586  003E56  0012               	return	
 10587  003E58                     __end_of___wmul:
 10588                           	opt stack 0
 10589                           tblptru	equ	0xFF8
 10590                           tblptrh	equ	0xFF7
 10591                           tblptrl	equ	0xFF6
 10592                           tablat	equ	0xFF5
 10593                           prodh	equ	0xFF4
 10594                           prodl	equ	0xFF3
 10595                           intcon	equ	0xFF2
 10596                           intcon2	equ	0xFF1
 10597                           indf0	equ	0xFEF
 10598                           postinc0	equ	0xFEE
 10599                           fsr0h	equ	0xFEA
 10600                           fsr0l	equ	0xFE9
 10601                           wreg	equ	0xFE8
 10602                           indf1	equ	0xFE7
 10603                           fsr1h	equ	0xFE2
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           postdec2	equ	0xFDD
 10608                           fsr2h	equ	0xFDA
 10609                           fsr2l	equ	0xFD9
 10610                           status	equ	0xFD8
 10611                           
 10612 ;; *************** function ___lwtoft *****************
 10613 ;; Defined at:
 10614 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwtoft.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;  c               2   24[COMRAM] unsigned int 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;		None
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  3   24[COMRAM] float 
 10621 ;; Registers used:
 10622 ;;		wreg, status,2, status,0, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : 0/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10628 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;Total ram usage:        3 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    5
 10635 ;; This function calls:
 10636 ;;		___ftpack
 10637 ;; This function is called by:
 10638 ;;		_Process4TO20Transmitter
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text68
 10643  003EC4                     __ptext68:
 10644                           	opt stack 0
 10645  003EC4                     ___lwtoft:
 10646                           	opt stack 22
 10647                           
 10648                           ;incstack = 0
 10649  003EC4  C019  F011         	movff	___lwtoft@c,___ftpack@arg
 10650  003EC8  C01A  F012         	movff	___lwtoft@c+1,___ftpack@arg+1
 10651  003ECC  6A13               	clrf	___ftpack@arg+2,c
 10652  003ECE  0E8E               	movlw	142
 10653  003ED0  6E14               	movwf	___ftpack@exp,c
 10654  003ED2  0E00               	movlw	0
 10655  003ED4  6E15               	movwf	___ftpack@sign,c
 10656  003ED6  ECA8  F017         	call	___ftpack	;wreg free
 10657  003EDA  C011  F019         	movff	?___ftpack,?___lwtoft
 10658  003EDE  C012  F01A         	movff	?___ftpack+1,?___lwtoft+1
 10659  003EE2  C013  F01B         	movff	?___ftpack+2,?___lwtoft+2
 10660  003EE6  0012               	return	
 10661  003EE8                     __end_of___lwtoft:
 10662                           	opt stack 0
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           intcon2	equ	0xFF1
 10671                           indf0	equ	0xFEF
 10672                           postinc0	equ	0xFEE
 10673                           fsr0h	equ	0xFEA
 10674                           fsr0l	equ	0xFE9
 10675                           wreg	equ	0xFE8
 10676                           indf1	equ	0xFE7
 10677                           fsr1h	equ	0xFE2
 10678                           fsr1l	equ	0xFE1
 10679                           indf2	equ	0xFDF
 10680                           postinc2	equ	0xFDE
 10681                           postdec2	equ	0xFDD
 10682                           fsr2h	equ	0xFDA
 10683                           fsr2l	equ	0xFD9
 10684                           status	equ	0xFD8
 10685                           
 10686 ;; *************** function ___lwdiv *****************
 10687 ;; Defined at:
 10688 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;  dividend        2   48[COMRAM] unsigned int 
 10691 ;;  divisor         2   50[COMRAM] unsigned int 
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;  quotient        2   53[COMRAM] unsigned int 
 10694 ;;  counter         1   52[COMRAM] unsigned char 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  2   48[COMRAM] unsigned int 
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, status,0
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10704 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10707 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10708 ;;Total ram usage:        7 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    4
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_Process4TO20Transmitter
 10715 ;;		_LCD_WriteInt
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           	psect	text69
 10720  003818                     __ptext69:
 10721                           	opt stack 0
 10722  003818                     ___lwdiv:
 10723                           	opt stack 23
 10724                           
 10725                           ;incstack = 0
 10726  003818  0E00               	movlw	0
 10727  00381A  6E37               	movwf	___lwdiv@quotient+1,c
 10728  00381C  0E00               	movlw	0
 10729  00381E  6E36               	movwf	___lwdiv@quotient,c
 10730  003820  5033               	movf	___lwdiv@divisor,w,c
 10731  003822  1034               	iorwf	___lwdiv@divisor+1,w,c
 10732  003824  B4D8               	btfsc	status,2,c
 10733  003826  D01C               	goto	l1933
 10734  003828  0E01               	movlw	1
 10735  00382A  6E35               	movwf	___lwdiv@counter,c
 10736  00382C  D004               	goto	l6582
 10737  00382E                     l6580:
 10738  00382E  90D8               	bcf	status,0,c
 10739  003830  3633               	rlcf	___lwdiv@divisor,f,c
 10740  003832  3634               	rlcf	___lwdiv@divisor+1,f,c
 10741  003834  2A35               	incf	___lwdiv@counter,f,c
 10742  003836                     l6582:
 10743  003836  AE34               	btfss	___lwdiv@divisor+1,7,c
 10744  003838  D7FA               	goto	l6580
 10745  00383A                     l6584:
 10746  00383A  90D8               	bcf	status,0,c
 10747  00383C  3636               	rlcf	___lwdiv@quotient,f,c
 10748  00383E  3637               	rlcf	___lwdiv@quotient+1,f,c
 10749  003840  5033               	movf	___lwdiv@divisor,w,c
 10750  003842  5C31               	subwf	___lwdiv@dividend,w,c
 10751  003844  5034               	movf	___lwdiv@divisor+1,w,c
 10752  003846  5832               	subwfb	___lwdiv@dividend+1,w,c
 10753  003848  A0D8               	btfss	status,0,c
 10754  00384A  D005               	goto	l6592
 10755  00384C  5033               	movf	___lwdiv@divisor,w,c
 10756  00384E  5E31               	subwf	___lwdiv@dividend,f,c
 10757  003850  5034               	movf	___lwdiv@divisor+1,w,c
 10758  003852  5A32               	subwfb	___lwdiv@dividend+1,f,c
 10759  003854  8036               	bsf	___lwdiv@quotient,0,c
 10760  003856                     l6592:
 10761  003856  90D8               	bcf	status,0,c
 10762  003858  3234               	rrcf	___lwdiv@divisor+1,f,c
 10763  00385A  3233               	rrcf	___lwdiv@divisor,f,c
 10764  00385C  2E35               	decfsz	___lwdiv@counter,f,c
 10765  00385E  D7ED               	goto	l6584
 10766  003860                     l1933:
 10767  003860  C036  F031         	movff	___lwdiv@quotient,?___lwdiv
 10768  003864  C037  F032         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10769  003868  0012               	return		;funcret
 10770  00386A                     __end_of___lwdiv:
 10771                           	opt stack 0
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           intcon	equ	0xFF2
 10779                           intcon2	equ	0xFF1
 10780                           indf0	equ	0xFEF
 10781                           postinc0	equ	0xFEE
 10782                           fsr0h	equ	0xFEA
 10783                           fsr0l	equ	0xFE9
 10784                           wreg	equ	0xFE8
 10785                           indf1	equ	0xFE7
 10786                           fsr1h	equ	0xFE2
 10787                           fsr1l	equ	0xFE1
 10788                           indf2	equ	0xFDF
 10789                           postinc2	equ	0xFDE
 10790                           postdec2	equ	0xFDD
 10791                           fsr2h	equ	0xFDA
 10792                           fsr2l	equ	0xFD9
 10793                           status	equ	0xFD8
 10794                           
 10795 ;; *************** function ___ftmul *****************
 10796 ;; Defined at:
 10797 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\ftmul.c"
 10798 ;; Parameters:    Size  Location     Type
 10799 ;;  f1              3   24[COMRAM] float 
 10800 ;;  f2              3   27[COMRAM] float 
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;  f3_as_produc    3   34[COMRAM] unsigned um
 10803 ;;  sign            1   38[COMRAM] unsigned char 
 10804 ;;  cntr            1   37[COMRAM] unsigned char 
 10805 ;;  exp             1   33[COMRAM] unsigned char 
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  3   24[COMRAM] float 
 10808 ;; Registers used:
 10809 ;;		wreg, status,2, status,0, cstack
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10815 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;Total ram usage:       15 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    5
 10822 ;; This function calls:
 10823 ;;		___ftpack
 10824 ;; This function is called by:
 10825 ;;		_Process4TO20Transmitter
 10826 ;;		_Referencia_SetTorque
 10827 ;;		_Referencia_Block
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text70
 10832  002958                     __ptext70:
 10833                           	opt stack 0
 10834  002958                     ___ftmul:
 10835                           	opt stack 22
 10836                           
 10837                           ;incstack = 0
 10838  002958  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
 10839  00295C  6A20               	clrf	(??___ftmul+1)& (0+255),c
 10840  00295E  6A21               	clrf	(??___ftmul+2)& (0+255),c
 10841  002960  341A               	rlcf	___ftmul@f1+1,w,c
 10842  002962  361F               	rlcf	??___ftmul& (0+255),f,c
 10843  002964  E301               	bnc	u5161
 10844  002966  8020               	bsf	(??___ftmul+1)& (0+255),0,c
 10845  002968                     u5161:
 10846  002968  501F               	movf	??___ftmul,w,c
 10847  00296A  6E22               	movwf	___ftmul@exp,c
 10848  00296C  5022               	movf	___ftmul@exp,w,c
 10849  00296E  A4D8               	btfss	status,2,c
 10850  002970  D007               	goto	l6916
 10851  002972  0E00               	movlw	0
 10852  002974  6E19               	movwf	?___ftmul,c
 10853  002976  0E00               	movlw	0
 10854  002978  6E1A               	movwf	?___ftmul+1,c
 10855  00297A  0E00               	movlw	0
 10856  00297C  6E1B               	movwf	?___ftmul+2,c
 10857  00297E  0012               	return	
 10858  002980                     l6916:
 10859  002980  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
 10860  002984  6A20               	clrf	(??___ftmul+1)& (0+255),c
 10861  002986  6A21               	clrf	(??___ftmul+2)& (0+255),c
 10862  002988  341D               	rlcf	___ftmul@f2+1,w,c
 10863  00298A  361F               	rlcf	??___ftmul& (0+255),f,c
 10864  00298C  E301               	bnc	u5181
 10865  00298E  8020               	bsf	(??___ftmul+1)& (0+255),0,c
 10866  002990                     u5181:
 10867  002990  501F               	movf	??___ftmul,w,c
 10868  002992  6E27               	movwf	___ftmul@sign,c
 10869  002994  5027               	movf	___ftmul@sign,w,c
 10870  002996  A4D8               	btfss	status,2,c
 10871  002998  D007               	goto	l6922
 10872  00299A  0E00               	movlw	0
 10873  00299C  6E19               	movwf	?___ftmul,c
 10874  00299E  0E00               	movlw	0
 10875  0029A0  6E1A               	movwf	?___ftmul+1,c
 10876  0029A2  0E00               	movlw	0
 10877  0029A4  6E1B               	movwf	?___ftmul+2,c
 10878  0029A6  0012               	return	
 10879  0029A8                     l6922:
 10880  0029A8  5027               	movf	___ftmul@sign,w,c
 10881  0029AA  0F7B               	addlw	123
 10882  0029AC  2622               	addwf	___ftmul@exp,f,c
 10883  0029AE  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
 10884  0029B2  501E               	movf	___ftmul@f2+2,w,c
 10885  0029B4  1A27               	xorwf	___ftmul@sign,f,c
 10886  0029B6  0E80               	movlw	128
 10887  0029B8  1627               	andwf	___ftmul@sign,f,c
 10888  0029BA  8E1A               	bsf	___ftmul@f1+1,7,c
 10889  0029BC  8E1D               	bsf	___ftmul@f2+1,7,c
 10890  0029BE  0EFF               	movlw	255
 10891  0029C0  161C               	andwf	___ftmul@f2,f,c
 10892  0029C2  0EFF               	movlw	255
 10893  0029C4  161D               	andwf	___ftmul@f2+1,f,c
 10894  0029C6  0E00               	movlw	0
 10895  0029C8  161E               	andwf	___ftmul@f2+2,f,c
 10896  0029CA  0E00               	movlw	0
 10897  0029CC  6E23               	movwf	___ftmul@f3_as_product,c
 10898  0029CE  0E00               	movlw	0
 10899  0029D0  6E24               	movwf	___ftmul@f3_as_product+1,c
 10900  0029D2  0E00               	movlw	0
 10901  0029D4  6E25               	movwf	___ftmul@f3_as_product+2,c
 10902  0029D6  0E07               	movlw	7
 10903  0029D8  6E26               	movwf	___ftmul@cntr,c
 10904  0029DA                     l6936:
 10905  0029DA  A019               	btfss	___ftmul@f1,0,c
 10906  0029DC  D006               	goto	l6940
 10907  0029DE  501C               	movf	___ftmul@f2,w,c
 10908  0029E0  2623               	addwf	___ftmul@f3_as_product,f,c
 10909  0029E2  501D               	movf	___ftmul@f2+1,w,c
 10910  0029E4  2224               	addwfc	___ftmul@f3_as_product+1,f,c
 10911  0029E6  501E               	movf	___ftmul@f2+2,w,c
 10912  0029E8  2225               	addwfc	___ftmul@f3_as_product+2,f,c
 10913  0029EA                     l6940:
 10914  0029EA  90D8               	bcf	status,0,c
 10915  0029EC  321B               	rrcf	___ftmul@f1+2,f,c
 10916  0029EE  321A               	rrcf	___ftmul@f1+1,f,c
 10917  0029F0  3219               	rrcf	___ftmul@f1,f,c
 10918  0029F2  90D8               	bcf	status,0,c
 10919  0029F4  361C               	rlcf	___ftmul@f2,f,c
 10920  0029F6  361D               	rlcf	___ftmul@f2+1,f,c
 10921  0029F8  361E               	rlcf	___ftmul@f2+2,f,c
 10922  0029FA  2E26               	decfsz	___ftmul@cntr,f,c
 10923  0029FC  D7EE               	goto	l6936
 10924  0029FE  0E09               	movlw	9
 10925  002A00  6E26               	movwf	___ftmul@cntr,c
 10926  002A02                     l6946:
 10927  002A02  A019               	btfss	___ftmul@f1,0,c
 10928  002A04  D006               	goto	l6950
 10929  002A06  501C               	movf	___ftmul@f2,w,c
 10930  002A08  2623               	addwf	___ftmul@f3_as_product,f,c
 10931  002A0A  501D               	movf	___ftmul@f2+1,w,c
 10932  002A0C  2224               	addwfc	___ftmul@f3_as_product+1,f,c
 10933  002A0E  501E               	movf	___ftmul@f2+2,w,c
 10934  002A10  2225               	addwfc	___ftmul@f3_as_product+2,f,c
 10935  002A12                     l6950:
 10936  002A12  90D8               	bcf	status,0,c
 10937  002A14  321B               	rrcf	___ftmul@f1+2,f,c
 10938  002A16  321A               	rrcf	___ftmul@f1+1,f,c
 10939  002A18  3219               	rrcf	___ftmul@f1,f,c
 10940  002A1A  90D8               	bcf	status,0,c
 10941  002A1C  3225               	rrcf	___ftmul@f3_as_product+2,f,c
 10942  002A1E  3224               	rrcf	___ftmul@f3_as_product+1,f,c
 10943  002A20  3223               	rrcf	___ftmul@f3_as_product,f,c
 10944  002A22  2E26               	decfsz	___ftmul@cntr,f,c
 10945  002A24  D7EE               	goto	l6946
 10946  002A26  C023  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 10947  002A2A  C024  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10948  002A2E  C025  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10949  002A32  C022  F014         	movff	___ftmul@exp,___ftpack@exp
 10950  002A36  C027  F015         	movff	___ftmul@sign,___ftpack@sign
 10951  002A3A  ECA8  F017         	call	___ftpack	;wreg free
 10952  002A3E  C011  F019         	movff	?___ftpack,?___ftmul
 10953  002A42  C012  F01A         	movff	?___ftpack+1,?___ftmul+1
 10954  002A46  C013  F01B         	movff	?___ftpack+2,?___ftmul+2
 10955  002A4A  0012               	return	
 10956  002A4C                     __end_of___ftmul:
 10957                           	opt stack 0
 10958                           tblptru	equ	0xFF8
 10959                           tblptrh	equ	0xFF7
 10960                           tblptrl	equ	0xFF6
 10961                           tablat	equ	0xFF5
 10962                           prodh	equ	0xFF4
 10963                           prodl	equ	0xFF3
 10964                           intcon	equ	0xFF2
 10965                           intcon2	equ	0xFF1
 10966                           indf0	equ	0xFEF
 10967                           postinc0	equ	0xFEE
 10968                           fsr0h	equ	0xFEA
 10969                           fsr0l	equ	0xFE9
 10970                           wreg	equ	0xFE8
 10971                           indf1	equ	0xFE7
 10972                           fsr1h	equ	0xFE2
 10973                           fsr1l	equ	0xFE1
 10974                           indf2	equ	0xFDF
 10975                           postinc2	equ	0xFDE
 10976                           postdec2	equ	0xFDD
 10977                           fsr2h	equ	0xFDA
 10978                           fsr2l	equ	0xFD9
 10979                           status	equ	0xFD8
 10980                           
 10981 ;; *************** function ___ftge *****************
 10982 ;; Defined at:
 10983 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\ftge.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;  ff1             3   16[COMRAM] float 
 10986 ;;  ff2             3   19[COMRAM] float 
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;		None               void
 10991 ;; Registers used:
 10992 ;;		wreg, status,2, status,0
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;Total ram usage:        9 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    4
 11005 ;; This function calls:
 11006 ;;		Nothing
 11007 ;; This function is called by:
 11008 ;;		_Process4TO20Transmitter
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           	psect	text71
 11013  003200                     __ptext71:
 11014                           	opt stack 0
 11015  003200                     ___ftge:
 11016                           	opt stack 23
 11017                           
 11018                           ;incstack = 0
 11019  003200  AE13               	btfss	___ftge@ff1+2,7,c
 11020  003202  D016               	goto	l6962
 11021  003204  C011  F017         	movff	___ftge@ff1,??___ftge
 11022  003208  C012  F018         	movff	___ftge@ff1+1,??___ftge+1
 11023  00320C  C013  F019         	movff	___ftge@ff1+2,??___ftge+2
 11024  003210  1E17               	comf	??___ftge,f,c
 11025  003212  1E18               	comf	??___ftge+1,f,c
 11026  003214  1E19               	comf	??___ftge+2,f,c
 11027  003216  2A17               	incf	??___ftge,f,c
 11028  003218  0E00               	movlw	0
 11029  00321A  2218               	addwfc	??___ftge+1,f,c
 11030  00321C  2219               	addwfc	??___ftge+2,f,c
 11031  00321E  0E00               	movlw	0
 11032  003220  2417               	addwf	??___ftge,w,c
 11033  003222  6E11               	movwf	___ftge@ff1,c
 11034  003224  0E00               	movlw	0
 11035  003226  2018               	addwfc	??___ftge+1,w,c
 11036  003228  6E12               	movwf	___ftge@ff1+1,c
 11037  00322A  0E80               	movlw	128
 11038  00322C  2019               	addwfc	??___ftge+2,w,c
 11039  00322E  6E13               	movwf	___ftge@ff1+2,c
 11040  003230                     l6962:
 11041  003230  AE16               	btfss	___ftge@ff2+2,7,c
 11042  003232  D016               	goto	l6966
 11043  003234  C014  F017         	movff	___ftge@ff2,??___ftge
 11044  003238  C015  F018         	movff	___ftge@ff2+1,??___ftge+1
 11045  00323C  C016  F019         	movff	___ftge@ff2+2,??___ftge+2
 11046  003240  1E17               	comf	??___ftge,f,c
 11047  003242  1E18               	comf	??___ftge+1,f,c
 11048  003244  1E19               	comf	??___ftge+2,f,c
 11049  003246  2A17               	incf	??___ftge,f,c
 11050  003248  0E00               	movlw	0
 11051  00324A  2218               	addwfc	??___ftge+1,f,c
 11052  00324C  2219               	addwfc	??___ftge+2,f,c
 11053  00324E  0E00               	movlw	0
 11054  003250  2417               	addwf	??___ftge,w,c
 11055  003252  6E14               	movwf	___ftge@ff2,c
 11056  003254  0E00               	movlw	0
 11057  003256  2018               	addwfc	??___ftge+1,w,c
 11058  003258  6E15               	movwf	___ftge@ff2+1,c
 11059  00325A  0E80               	movlw	128
 11060  00325C  2019               	addwfc	??___ftge+2,w,c
 11061  00325E  6E16               	movwf	___ftge@ff2+2,c
 11062  003260                     l6966:
 11063  003260  0E00               	movlw	0
 11064  003262  1A11               	xorwf	___ftge@ff1,f,c
 11065  003264  0E00               	movlw	0
 11066  003266  1A12               	xorwf	___ftge@ff1+1,f,c
 11067  003268  0E80               	movlw	128
 11068  00326A  1A13               	xorwf	___ftge@ff1+2,f,c
 11069  00326C  0E00               	movlw	0
 11070  00326E  1A14               	xorwf	___ftge@ff2,f,c
 11071  003270  0E00               	movlw	0
 11072  003272  1A15               	xorwf	___ftge@ff2+1,f,c
 11073  003274  0E80               	movlw	128
 11074  003276  1A16               	xorwf	___ftge@ff2+2,f,c
 11075  003278  5014               	movf	___ftge@ff2,w,c
 11076  00327A  5C11               	subwf	___ftge@ff1,w,c
 11077  00327C  5015               	movf	___ftge@ff2+1,w,c
 11078  00327E  5812               	subwfb	___ftge@ff1+1,w,c
 11079  003280  5016               	movf	___ftge@ff2+2,w,c
 11080  003282  5813               	subwfb	___ftge@ff1+2,w,c
 11081  003284  B0D8               	btfsc	status,0,c
 11082  003286  D002               	goto	l6972
 11083  003288  90D8               	bcf	status,0,c
 11084  00328A  0012               	return	
 11085  00328C                     l6972:
 11086  00328C  80D8               	bsf	status,0,c
 11087  00328E  0012               	return	
 11088  003290                     __end_of___ftge:
 11089                           	opt stack 0
 11090                           tblptru	equ	0xFF8
 11091                           tblptrh	equ	0xFF7
 11092                           tblptrl	equ	0xFF6
 11093                           tablat	equ	0xFF5
 11094                           prodh	equ	0xFF4
 11095                           prodl	equ	0xFF3
 11096                           intcon	equ	0xFF2
 11097                           intcon2	equ	0xFF1
 11098                           indf0	equ	0xFEF
 11099                           postinc0	equ	0xFEE
 11100                           fsr0h	equ	0xFEA
 11101                           fsr0l	equ	0xFE9
 11102                           wreg	equ	0xFE8
 11103                           indf1	equ	0xFE7
 11104                           fsr1h	equ	0xFE2
 11105                           fsr1l	equ	0xFE1
 11106                           indf2	equ	0xFDF
 11107                           postinc2	equ	0xFDE
 11108                           postdec2	equ	0xFDD
 11109                           fsr2h	equ	0xFDA
 11110                           fsr2l	equ	0xFD9
 11111                           status	equ	0xFD8
 11112                           
 11113 ;; *************** function ___ftdiv *****************
 11114 ;; Defined at:
 11115 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 11116 ;; Parameters:    Size  Location     Type
 11117 ;;  f1              3   39[COMRAM] float 
 11118 ;;  f2              3   42[COMRAM] float 
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;  f3              3   49[COMRAM] float 
 11121 ;;  sign            1   53[COMRAM] unsigned char 
 11122 ;;  exp             1   52[COMRAM] unsigned char 
 11123 ;;  cntr            1   48[COMRAM] unsigned char 
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  3   39[COMRAM] float 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11133 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:       15 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    5
 11140 ;; This function calls:
 11141 ;;		___ftpack
 11142 ;; This function is called by:
 11143 ;;		_Process4TO20Transmitter
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text72
 11148  002B38                     __ptext72:
 11149                           	opt stack 0
 11150  002B38                     ___ftdiv:
 11151                           	opt stack 22
 11152                           
 11153                           ;incstack = 0
 11154  002B38  C02A  F02E         	movff	___ftdiv@f1+2,??___ftdiv
 11155  002B3C  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
 11156  002B3E  6A30               	clrf	(??___ftdiv+2)& (0+255),c
 11157  002B40  3429               	rlcf	___ftdiv@f1+1,w,c
 11158  002B42  362E               	rlcf	??___ftdiv& (0+255),f,c
 11159  002B44  E301               	bnc	u5111
 11160  002B46  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
 11161  002B48                     u5111:
 11162  002B48  502E               	movf	??___ftdiv,w,c
 11163  002B4A  6E35               	movwf	___ftdiv@exp,c
 11164  002B4C  5035               	movf	___ftdiv@exp,w,c
 11165  002B4E  A4D8               	btfss	status,2,c
 11166  002B50  D007               	goto	l6870
 11167  002B52  0E00               	movlw	0
 11168  002B54  6E28               	movwf	?___ftdiv,c
 11169  002B56  0E00               	movlw	0
 11170  002B58  6E29               	movwf	?___ftdiv+1,c
 11171  002B5A  0E00               	movlw	0
 11172  002B5C  6E2A               	movwf	?___ftdiv+2,c
 11173  002B5E  0012               	return	
 11174  002B60                     l6870:
 11175  002B60  C02D  F02E         	movff	___ftdiv@f2+2,??___ftdiv
 11176  002B64  6A2F               	clrf	(??___ftdiv+1)& (0+255),c
 11177  002B66  6A30               	clrf	(??___ftdiv+2)& (0+255),c
 11178  002B68  342C               	rlcf	___ftdiv@f2+1,w,c
 11179  002B6A  362E               	rlcf	??___ftdiv& (0+255),f,c
 11180  002B6C  E301               	bnc	u5131
 11181  002B6E  802F               	bsf	(??___ftdiv+1)& (0+255),0,c
 11182  002B70                     u5131:
 11183  002B70  502E               	movf	??___ftdiv,w,c
 11184  002B72  6E36               	movwf	___ftdiv@sign,c
 11185  002B74  5036               	movf	___ftdiv@sign,w,c
 11186  002B76  A4D8               	btfss	status,2,c
 11187  002B78  D007               	goto	l6876
 11188  002B7A  0E00               	movlw	0
 11189  002B7C  6E28               	movwf	?___ftdiv,c
 11190  002B7E  0E00               	movlw	0
 11191  002B80  6E29               	movwf	?___ftdiv+1,c
 11192  002B82  0E00               	movlw	0
 11193  002B84  6E2A               	movwf	?___ftdiv+2,c
 11194  002B86  0012               	return	
 11195  002B88                     l6876:
 11196  002B88  0E00               	movlw	0
 11197  002B8A  6E32               	movwf	___ftdiv@f3,c
 11198  002B8C  0E00               	movlw	0
 11199  002B8E  6E33               	movwf	___ftdiv@f3+1,c
 11200  002B90  0E00               	movlw	0
 11201  002B92  6E34               	movwf	___ftdiv@f3+2,c
 11202  002B94  5036               	movf	___ftdiv@sign,w,c
 11203  002B96  0F89               	addlw	137
 11204  002B98  5E35               	subwf	___ftdiv@exp,f,c
 11205  002B9A  C02A  F036         	movff	___ftdiv@f1+2,___ftdiv@sign
 11206  002B9E  502D               	movf	___ftdiv@f2+2,w,c
 11207  002BA0  1A36               	xorwf	___ftdiv@sign,f,c
 11208  002BA2  0E80               	movlw	128
 11209  002BA4  1636               	andwf	___ftdiv@sign,f,c
 11210  002BA6  8E29               	bsf	___ftdiv@f1+1,7,c
 11211  002BA8  0EFF               	movlw	255
 11212  002BAA  1628               	andwf	___ftdiv@f1,f,c
 11213  002BAC  0EFF               	movlw	255
 11214  002BAE  1629               	andwf	___ftdiv@f1+1,f,c
 11215  002BB0  0E00               	movlw	0
 11216  002BB2  162A               	andwf	___ftdiv@f1+2,f,c
 11217  002BB4  8E2C               	bsf	___ftdiv@f2+1,7,c
 11218  002BB6  0EFF               	movlw	255
 11219  002BB8  162B               	andwf	___ftdiv@f2,f,c
 11220  002BBA  0EFF               	movlw	255
 11221  002BBC  162C               	andwf	___ftdiv@f2+1,f,c
 11222  002BBE  0E00               	movlw	0
 11223  002BC0  162D               	andwf	___ftdiv@f2+2,f,c
 11224  002BC2  0E18               	movlw	24
 11225  002BC4  6E31               	movwf	___ftdiv@cntr,c
 11226  002BC6                     l6896:
 11227  002BC6  90D8               	bcf	status,0,c
 11228  002BC8  3632               	rlcf	___ftdiv@f3,f,c
 11229  002BCA  3633               	rlcf	___ftdiv@f3+1,f,c
 11230  002BCC  3634               	rlcf	___ftdiv@f3+2,f,c
 11231  002BCE  502B               	movf	___ftdiv@f2,w,c
 11232  002BD0  5C28               	subwf	___ftdiv@f1,w,c
 11233  002BD2  502C               	movf	___ftdiv@f2+1,w,c
 11234  002BD4  5829               	subwfb	___ftdiv@f1+1,w,c
 11235  002BD6  502D               	movf	___ftdiv@f2+2,w,c
 11236  002BD8  582A               	subwfb	___ftdiv@f1+2,w,c
 11237  002BDA  A0D8               	btfss	status,0,c
 11238  002BDC  D007               	goto	l1813
 11239  002BDE  502B               	movf	___ftdiv@f2,w,c
 11240  002BE0  5E28               	subwf	___ftdiv@f1,f,c
 11241  002BE2  502C               	movf	___ftdiv@f2+1,w,c
 11242  002BE4  5A29               	subwfb	___ftdiv@f1+1,f,c
 11243  002BE6  502D               	movf	___ftdiv@f2+2,w,c
 11244  002BE8  5A2A               	subwfb	___ftdiv@f1+2,f,c
 11245  002BEA  8032               	bsf	___ftdiv@f3,0,c
 11246  002BEC                     l1813:
 11247  002BEC  90D8               	bcf	status,0,c
 11248  002BEE  3628               	rlcf	___ftdiv@f1,f,c
 11249  002BF0  3629               	rlcf	___ftdiv@f1+1,f,c
 11250  002BF2  362A               	rlcf	___ftdiv@f1+2,f,c
 11251  002BF4  2E31               	decfsz	___ftdiv@cntr,f,c
 11252  002BF6  D7E7               	goto	l6896
 11253  002BF8  C032  F011         	movff	___ftdiv@f3,___ftpack@arg
 11254  002BFC  C033  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11255  002C00  C034  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11256  002C04  C035  F014         	movff	___ftdiv@exp,___ftpack@exp
 11257  002C08  C036  F015         	movff	___ftdiv@sign,___ftpack@sign
 11258  002C0C  ECA8  F017         	call	___ftpack	;wreg free
 11259  002C10  C011  F028         	movff	?___ftpack,?___ftdiv
 11260  002C14  C012  F029         	movff	?___ftpack+1,?___ftdiv+1
 11261  002C18  C013  F02A         	movff	?___ftpack+2,?___ftdiv+2
 11262  002C1C  0012               	return	
 11263  002C1E                     __end_of___ftdiv:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           indf1	equ	0xFE7
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           fsr2h	equ	0xFDA
 11285                           fsr2l	equ	0xFD9
 11286                           status	equ	0xFD8
 11287                           
 11288 ;; *************** function ___ftpack *****************
 11289 ;; Defined at:
 11290 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\float.c"
 11291 ;; Parameters:    Size  Location     Type
 11292 ;;  arg             3   16[COMRAM] unsigned um
 11293 ;;  exp             1   19[COMRAM] unsigned char 
 11294 ;;  sign            1   20[COMRAM] unsigned char 
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  3   16[COMRAM] float 
 11299 ;; Registers used:
 11300 ;;		wreg, status,2, status,0
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11306 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;Total ram usage:        8 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    4
 11313 ;; This function calls:
 11314 ;;		Nothing
 11315 ;; This function is called by:
 11316 ;;		___altoft
 11317 ;;		___ftadd
 11318 ;;		___ftdiv
 11319 ;;		___ftmul
 11320 ;;		___lwtoft
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text73
 11325  002F50                     __ptext73:
 11326                           	opt stack 0
 11327  002F50                     ___ftpack:
 11328                           	opt stack 20
 11329                           
 11330                           ;incstack = 0
 11331  002F50  5014               	movf	___ftpack@exp,w,c
 11332  002F52  B4D8               	btfsc	status,2,c
 11333  002F54  D005               	goto	l6414
 11334  002F56  5011               	movf	___ftpack@arg,w,c
 11335  002F58  1012               	iorwf	___ftpack@arg+1,w,c
 11336  002F5A  1013               	iorwf	___ftpack@arg+2,w,c
 11337  002F5C  A4D8               	btfss	status,2,c
 11338  002F5E  D00C               	goto	l6420
 11339  002F60                     l6414:
 11340  002F60  0E00               	movlw	0
 11341  002F62  6E11               	movwf	?___ftpack,c
 11342  002F64  0E00               	movlw	0
 11343  002F66  6E12               	movwf	?___ftpack+1,c
 11344  002F68  0E00               	movlw	0
 11345  002F6A  6E13               	movwf	?___ftpack+2,c
 11346  002F6C  0012               	return	
 11347  002F6E                     l6418:
 11348  002F6E  2A14               	incf	___ftpack@exp,f,c
 11349  002F70  90D8               	bcf	status,0,c
 11350  002F72  3213               	rrcf	___ftpack@arg+2,f,c
 11351  002F74  3212               	rrcf	___ftpack@arg+1,f,c
 11352  002F76  3211               	rrcf	___ftpack@arg,f,c
 11353  002F78                     l6420:
 11354  002F78  0E00               	movlw	0
 11355  002F7A  1411               	andwf	___ftpack@arg,w,c
 11356  002F7C  6E16               	movwf	??___ftpack& (0+255),c
 11357  002F7E  0E00               	movlw	0
 11358  002F80  1412               	andwf	___ftpack@arg+1,w,c
 11359  002F82  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11360  002F84  0EFE               	movlw	254
 11361  002F86  1413               	andwf	___ftpack@arg+2,w,c
 11362  002F88  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11363  002F8A  5016               	movf	??___ftpack,w,c
 11364  002F8C  1017               	iorwf	??___ftpack+1,w,c
 11365  002F8E  1018               	iorwf	??___ftpack+2,w,c
 11366  002F90  B4D8               	btfsc	status,2,c
 11367  002F92  D00C               	goto	l6426
 11368  002F94  D7EC               	goto	l6418
 11369  002F96                     l6422:
 11370  002F96  2A14               	incf	___ftpack@exp,f,c
 11371  002F98  0E01               	movlw	1
 11372  002F9A  2611               	addwf	___ftpack@arg,f,c
 11373  002F9C  0E00               	movlw	0
 11374  002F9E  2212               	addwfc	___ftpack@arg+1,f,c
 11375  002FA0  0E00               	movlw	0
 11376  002FA2  2213               	addwfc	___ftpack@arg+2,f,c
 11377  002FA4  90D8               	bcf	status,0,c
 11378  002FA6  3213               	rrcf	___ftpack@arg+2,f,c
 11379  002FA8  3212               	rrcf	___ftpack@arg+1,f,c
 11380  002FAA  3211               	rrcf	___ftpack@arg,f,c
 11381  002FAC                     l6426:
 11382  002FAC  0E00               	movlw	0
 11383  002FAE  1411               	andwf	___ftpack@arg,w,c
 11384  002FB0  6E16               	movwf	??___ftpack& (0+255),c
 11385  002FB2  0E00               	movlw	0
 11386  002FB4  1412               	andwf	___ftpack@arg+1,w,c
 11387  002FB6  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11388  002FB8  0EFF               	movlw	255
 11389  002FBA  1413               	andwf	___ftpack@arg+2,w,c
 11390  002FBC  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11391  002FBE  5016               	movf	??___ftpack,w,c
 11392  002FC0  1017               	iorwf	??___ftpack+1,w,c
 11393  002FC2  1018               	iorwf	??___ftpack+2,w,c
 11394  002FC4  B4D8               	btfsc	status,2,c
 11395  002FC6  D006               	goto	l6430
 11396  002FC8  D7E6               	goto	l6422
 11397  002FCA                     l6428:
 11398  002FCA  0614               	decf	___ftpack@exp,f,c
 11399  002FCC  90D8               	bcf	status,0,c
 11400  002FCE  3611               	rlcf	___ftpack@arg,f,c
 11401  002FD0  3612               	rlcf	___ftpack@arg+1,f,c
 11402  002FD2  3613               	rlcf	___ftpack@arg+2,f,c
 11403  002FD4                     l6430:
 11404  002FD4  BE12               	btfsc	___ftpack@arg+1,7,c
 11405  002FD6  D003               	goto	l1755
 11406  002FD8  0E02               	movlw	2
 11407  002FDA  6014               	cpfslt	___ftpack@exp,c
 11408  002FDC  D7F6               	goto	l6428
 11409  002FDE                     l1755:
 11410  002FDE  A014               	btfss	___ftpack@exp,0,c
 11411  002FE0  9E12               	bcf	___ftpack@arg+1,7,c
 11412  002FE2  90D8               	bcf	status,0,c
 11413  002FE4  3214               	rrcf	___ftpack@exp,f,c
 11414  002FE6  5014               	movf	___ftpack@exp,w,c
 11415  002FE8  1213               	iorwf	___ftpack@arg+2,f,c
 11416  002FEA  5015               	movf	___ftpack@sign,w,c
 11417  002FEC  A4D8               	btfss	status,2,c
 11418  002FEE  8E13               	bsf	___ftpack@arg+2,7,c
 11419  002FF0  C011  F011         	movff	___ftpack@arg,?___ftpack
 11420  002FF4  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 11421  002FF8  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 11422  002FFC  0012               	return	
 11423  002FFE                     __end_of___ftpack:
 11424                           	opt stack 0
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           intcon2	equ	0xFF1
 11433                           indf0	equ	0xFEF
 11434                           postinc0	equ	0xFEE
 11435                           fsr0h	equ	0xFEA
 11436                           fsr0l	equ	0xFE9
 11437                           wreg	equ	0xFE8
 11438                           indf1	equ	0xFE7
 11439                           fsr1h	equ	0xFE2
 11440                           fsr1l	equ	0xFE1
 11441                           indf2	equ	0xFDF
 11442                           postinc2	equ	0xFDE
 11443                           postdec2	equ	0xFDD
 11444                           fsr2h	equ	0xFDA
 11445                           fsr2l	equ	0xFD9
 11446                           status	equ	0xFD8
 11447                           
 11448 ;; *************** function _PWM5_LoadDutyValue *****************
 11449 ;; Defined at:
 11450 ;;		line 81 in file "pwm5.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;  dutyValue       2   21[BANK0 ] unsigned int 
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;                  1    wreg      void 
 11457 ;; Registers used:
 11458 ;;		wreg, status,2, status,0
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11464 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;Total ram usage:        4 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    4
 11471 ;; This function calls:
 11472 ;;		Nothing
 11473 ;; This function is called by:
 11474 ;;		_InitTasks
 11475 ;;		_Process4TO20Transmitter
 11476 ;; This function uses a non-reentrant model
 11477 ;;
 11478                           
 11479                           	psect	text74
 11480  003BCC                     __ptext74:
 11481                           	opt stack 0
 11482  003BCC                     _PWM5_LoadDutyValue:
 11483                           	opt stack 25
 11484                           
 11485                           ;pwm5.c: 84: CCPR5L = ((dutyValue & 0x03FC)>>2);
 11486                           
 11487                           ;incstack = 0
 11488  003BCC  C0EF  F03D         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
 11489  003BD0  C0F0  F03E         	movff	PWM5_LoadDutyValue@dutyValue+1,??_PWM5_LoadDutyValue+1
 11490  003BD4  90D8               	bcf	status,0,c
 11491  003BD6  323E               	rrcf	??_PWM5_LoadDutyValue+1,f,c
 11492  003BD8  323D               	rrcf	??_PWM5_LoadDutyValue,f,c
 11493  003BDA  90D8               	bcf	status,0,c
 11494  003BDC  323E               	rrcf	??_PWM5_LoadDutyValue+1,f,c
 11495  003BDE  323D               	rrcf	??_PWM5_LoadDutyValue,f,c
 11496  003BE0  503D               	movf	??_PWM5_LoadDutyValue,w,c
 11497  003BE2  010F               	movlb	15	; () banked
 11498  003BE4  6F55               	movwf	85,b	;volatile
 11499                           
 11500                           ;pwm5.c: 87: CCP5CON = (CCP5CON & 0xCF) | ((dutyValue & 0x0003)<<4);
 11501  003BE6  C0EF  F03D         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
 11502  003BEA  0E03               	movlw	3
 11503  003BEC  163D               	andwf	??_PWM5_LoadDutyValue,f,c
 11504  003BEE  3A3D               	swapf	??_PWM5_LoadDutyValue,f,c
 11505  003BF0  0EF0               	movlw	240
 11506  003BF2  163D               	andwf	??_PWM5_LoadDutyValue,f,c
 11507  003BF4  010F               	movlb	15	; () banked
 11508  003BF6  5154               	movf	84,w,b	;volatile
 11509  003BF8  0BCF               	andlw	207
 11510  003BFA  103D               	iorwf	??_PWM5_LoadDutyValue,w,c
 11511  003BFC  010F               	movlb	15	; () banked
 11512  003BFE  6F54               	movwf	84,b	;volatile
 11513                           
 11514                           ; BSR set to: 15
 11515  003C00  0012               	return		;funcret
 11516  003C02                     __end_of_PWM5_LoadDutyValue:
 11517                           	opt stack 0
 11518                           tblptru	equ	0xFF8
 11519                           tblptrh	equ	0xFF7
 11520                           tblptrl	equ	0xFF6
 11521                           tablat	equ	0xFF5
 11522                           prodh	equ	0xFF4
 11523                           prodl	equ	0xFF3
 11524                           intcon	equ	0xFF2
 11525                           intcon2	equ	0xFF1
 11526                           indf0	equ	0xFEF
 11527                           postinc0	equ	0xFEE
 11528                           fsr0h	equ	0xFEA
 11529                           fsr0l	equ	0xFE9
 11530                           wreg	equ	0xFE8
 11531                           indf1	equ	0xFE7
 11532                           fsr1h	equ	0xFE2
 11533                           fsr1l	equ	0xFE1
 11534                           indf2	equ	0xFDF
 11535                           postinc2	equ	0xFDE
 11536                           postdec2	equ	0xFDD
 11537                           fsr2h	equ	0xFDA
 11538                           fsr2l	equ	0xFD9
 11539                           status	equ	0xFD8
 11540                           
 11541 ;; *************** function _PWM4_LoadDutyValue *****************
 11542 ;; Defined at:
 11543 ;;		line 81 in file "pwm4.c"
 11544 ;; Parameters:    Size  Location     Type
 11545 ;;  dutyValue       2   21[BANK0 ] unsigned int 
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;		None
 11548 ;; Return value:  Size  Location     Type
 11549 ;;                  1    wreg      void 
 11550 ;; Registers used:
 11551 ;;		wreg, status,2, status,0
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;Total ram usage:        4 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    4
 11564 ;; This function calls:
 11565 ;;		Nothing
 11566 ;; This function is called by:
 11567 ;;		_InitTasks
 11568 ;;		_Process4TO20Transmitter
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text75
 11573  003C02                     __ptext75:
 11574                           	opt stack 0
 11575  003C02                     _PWM4_LoadDutyValue:
 11576                           	opt stack 25
 11577                           
 11578                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
 11579                           
 11580                           ; BSR set to: 15
 11581                           ;incstack = 0
 11582  003C02  C0EF  F03D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 11583  003C06  C0F0  F03E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
 11584  003C0A  90D8               	bcf	status,0,c
 11585  003C0C  323E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 11586  003C0E  323D               	rrcf	??_PWM4_LoadDutyValue,f,c
 11587  003C10  90D8               	bcf	status,0,c
 11588  003C12  323E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
 11589  003C14  323D               	rrcf	??_PWM4_LoadDutyValue,f,c
 11590  003C16  503D               	movf	??_PWM4_LoadDutyValue,w,c
 11591  003C18  010F               	movlb	15	; () banked
 11592  003C1A  6F58               	movwf	88,b	;volatile
 11593                           
 11594                           ;pwm4.c: 87: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4);
 11595  003C1C  C0EF  F03D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
 11596  003C20  0E03               	movlw	3
 11597  003C22  163D               	andwf	??_PWM4_LoadDutyValue,f,c
 11598  003C24  3A3D               	swapf	??_PWM4_LoadDutyValue,f,c
 11599  003C26  0EF0               	movlw	240
 11600  003C28  163D               	andwf	??_PWM4_LoadDutyValue,f,c
 11601  003C2A  010F               	movlb	15	; () banked
 11602  003C2C  5157               	movf	87,w,b	;volatile
 11603  003C2E  0BCF               	andlw	207
 11604  003C30  103D               	iorwf	??_PWM4_LoadDutyValue,w,c
 11605  003C32  010F               	movlb	15	; () banked
 11606  003C34  6F57               	movwf	87,b	;volatile
 11607                           
 11608                           ; BSR set to: 15
 11609  003C36  0012               	return		;funcret
 11610  003C38                     __end_of_PWM4_LoadDutyValue:
 11611                           	opt stack 0
 11612                           tblptru	equ	0xFF8
 11613                           tblptrh	equ	0xFF7
 11614                           tblptrl	equ	0xFF6
 11615                           tablat	equ	0xFF5
 11616                           prodh	equ	0xFF4
 11617                           prodl	equ	0xFF3
 11618                           intcon	equ	0xFF2
 11619                           intcon2	equ	0xFF1
 11620                           indf0	equ	0xFEF
 11621                           postinc0	equ	0xFEE
 11622                           fsr0h	equ	0xFEA
 11623                           fsr0l	equ	0xFE9
 11624                           wreg	equ	0xFE8
 11625                           indf1	equ	0xFE7
 11626                           fsr1h	equ	0xFE2
 11627                           fsr1l	equ	0xFE1
 11628                           indf2	equ	0xFDF
 11629                           postinc2	equ	0xFDE
 11630                           postdec2	equ	0xFDD
 11631                           fsr2h	equ	0xFDA
 11632                           fsr2l	equ	0xFD9
 11633                           status	equ	0xFD8
 11634                           
 11635 ;; *************** function _EPWM3_LoadDutyValue *****************
 11636 ;; Defined at:
 11637 ;;		line 91 in file "epwm3.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;  dutyValue       2   21[BANK0 ] unsigned int 
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;		None
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  1    wreg      void 
 11644 ;; Registers used:
 11645 ;;		wreg, status,2, status,0
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11651 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11654 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11655 ;;Total ram usage:        4 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    4
 11658 ;; This function calls:
 11659 ;;		Nothing
 11660 ;; This function is called by:
 11661 ;;		_InitTasks
 11662 ;;		_Process4TO20Transmitter
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           	psect	text76
 11667  003C38                     __ptext76:
 11668                           	opt stack 0
 11669  003C38                     _EPWM3_LoadDutyValue:
 11670                           	opt stack 25
 11671                           
 11672                           ;epwm3.c: 94: CCPR3L = ((dutyValue & 0x03FC)>>2);
 11673                           
 11674                           ; BSR set to: 15
 11675                           ;incstack = 0
 11676  003C38  C0EF  F03D         	movff	EPWM3_LoadDutyValue@dutyValue,??_EPWM3_LoadDutyValue
 11677  003C3C  C0F0  F03E         	movff	EPWM3_LoadDutyValue@dutyValue+1,??_EPWM3_LoadDutyValue+1
 11678  003C40  90D8               	bcf	status,0,c
 11679  003C42  323E               	rrcf	??_EPWM3_LoadDutyValue+1,f,c
 11680  003C44  323D               	rrcf	??_EPWM3_LoadDutyValue,f,c
 11681  003C46  90D8               	bcf	status,0,c
 11682  003C48  323E               	rrcf	??_EPWM3_LoadDutyValue+1,f,c
 11683  003C4A  323D               	rrcf	??_EPWM3_LoadDutyValue,f,c
 11684  003C4C  503D               	movf	??_EPWM3_LoadDutyValue,w,c
 11685  003C4E  010F               	movlb	15	; () banked
 11686  003C50  6F5E               	movwf	94,b	;volatile
 11687                           
 11688                           ;epwm3.c: 97: CCP3CON = (CCP3CON & 0xCF) | ((dutyValue & 0x0003)<<4);
 11689  003C52  C0EF  F03D         	movff	EPWM3_LoadDutyValue@dutyValue,??_EPWM3_LoadDutyValue
 11690  003C56  0E03               	movlw	3
 11691  003C58  163D               	andwf	??_EPWM3_LoadDutyValue,f,c
 11692  003C5A  3A3D               	swapf	??_EPWM3_LoadDutyValue,f,c
 11693  003C5C  0EF0               	movlw	240
 11694  003C5E  163D               	andwf	??_EPWM3_LoadDutyValue,f,c
 11695  003C60  010F               	movlb	15	; () banked
 11696  003C62  515D               	movf	93,w,b	;volatile
 11697  003C64  0BCF               	andlw	207
 11698  003C66  103D               	iorwf	??_EPWM3_LoadDutyValue,w,c
 11699  003C68  010F               	movlb	15	; () banked
 11700  003C6A  6F5D               	movwf	93,b	;volatile
 11701                           
 11702                           ; BSR set to: 15
 11703  003C6C  0012               	return		;funcret
 11704  003C6E                     __end_of_EPWM3_LoadDutyValue:
 11705                           	opt stack 0
 11706                           tblptru	equ	0xFF8
 11707                           tblptrh	equ	0xFF7
 11708                           tblptrl	equ	0xFF6
 11709                           tablat	equ	0xFF5
 11710                           prodh	equ	0xFF4
 11711                           prodl	equ	0xFF3
 11712                           intcon	equ	0xFF2
 11713                           intcon2	equ	0xFF1
 11714                           indf0	equ	0xFEF
 11715                           postinc0	equ	0xFEE
 11716                           fsr0h	equ	0xFEA
 11717                           fsr0l	equ	0xFE9
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function _EPWM1_LoadDutyValue *****************
 11730 ;; Defined at:
 11731 ;;		line 90 in file "mcc_generated_files/epwm1.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;  dutyValue       2   21[BANK0 ] unsigned int 
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		wreg, status,2, status,0
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:        4 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    4
 11752 ;; This function calls:
 11753 ;;		Nothing
 11754 ;; This function is called by:
 11755 ;;		_InitTasks
 11756 ;;		_Process4TO20Transmitter
 11757 ;;		_Referencia_SetTorque
 11758 ;;		_Referencia_Block
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           	psect	text77
 11763  003D34                     __ptext77:
 11764                           	opt stack 0
 11765  003D34                     _EPWM1_LoadDutyValue:
 11766                           	opt stack 25
 11767                           
 11768                           ;epwm1.c: 93: CCPR1L = ((dutyValue & 0x03FC)>>2);
 11769                           
 11770                           ; BSR set to: 15
 11771                           ;incstack = 0
 11772  003D34  C0EF  F03D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11773  003D38  C0F0  F03E         	movff	EPWM1_LoadDutyValue@dutyValue+1,??_EPWM1_LoadDutyValue+1
 11774  003D3C  90D8               	bcf	status,0,c
 11775  003D3E  323E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 11776  003D40  323D               	rrcf	??_EPWM1_LoadDutyValue,f,c
 11777  003D42  90D8               	bcf	status,0,c
 11778  003D44  323E               	rrcf	??_EPWM1_LoadDutyValue+1,f,c
 11779  003D46  323D               	rrcf	??_EPWM1_LoadDutyValue,f,c
 11780  003D48  503D               	movf	??_EPWM1_LoadDutyValue,w,c
 11781  003D4A  6EBE               	movwf	4030,c	;volatile
 11782                           
 11783                           ;epwm1.c: 96: CCP1CON = (CCP1CON & 0xCF) | ((dutyValue & 0x0003)<<4);
 11784  003D4C  C0EF  F03D         	movff	EPWM1_LoadDutyValue@dutyValue,??_EPWM1_LoadDutyValue
 11785  003D50  0E03               	movlw	3
 11786  003D52  163D               	andwf	??_EPWM1_LoadDutyValue,f,c
 11787  003D54  3A3D               	swapf	??_EPWM1_LoadDutyValue,f,c
 11788  003D56  0EF0               	movlw	240
 11789  003D58  163D               	andwf	??_EPWM1_LoadDutyValue,f,c
 11790  003D5A  50BD               	movf	4029,w,c	;volatile
 11791  003D5C  0BCF               	andlw	207
 11792  003D5E  103D               	iorwf	??_EPWM1_LoadDutyValue,w,c
 11793  003D60  6EBD               	movwf	4029,c	;volatile
 11794  003D62  0012               	return		;funcret
 11795  003D64                     __end_of_EPWM1_LoadDutyValue:
 11796                           	opt stack 0
 11797                           tblptru	equ	0xFF8
 11798                           tblptrh	equ	0xFF7
 11799                           tblptrl	equ	0xFF6
 11800                           tablat	equ	0xFF5
 11801                           prodh	equ	0xFF4
 11802                           prodl	equ	0xFF3
 11803                           intcon	equ	0xFF2
 11804                           intcon2	equ	0xFF1
 11805                           indf0	equ	0xFEF
 11806                           postinc0	equ	0xFEE
 11807                           fsr0h	equ	0xFEA
 11808                           fsr0l	equ	0xFE9
 11809                           wreg	equ	0xFE8
 11810                           indf1	equ	0xFE7
 11811                           fsr1h	equ	0xFE2
 11812                           fsr1l	equ	0xFE1
 11813                           indf2	equ	0xFDF
 11814                           postinc2	equ	0xFDE
 11815                           postdec2	equ	0xFDD
 11816                           fsr2h	equ	0xFDA
 11817                           fsr2l	equ	0xFD9
 11818                           status	equ	0xFD8
 11819                           
 11820 ;; *************** function _I2C_GetNewMessages *****************
 11821 ;; Defined at:
 11822 ;;		line 36 in file "I2C.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;		None
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;  msg             2   30[COMRAM] PTR struct .
 11827 ;;		 -> I2CQueue(160), 
 11828 ;;  i2c_lastChar    1   32[COMRAM] unsigned char 
 11829 ;; Return value:  Size  Location     Type
 11830 ;;                  1    wreg      void 
 11831 ;; Registers used:
 11832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11833 ;; Tracked objects:
 11834 ;;		On entry : 0/0
 11835 ;;		On exit  : 0/0
 11836 ;;		Unchanged: 0/0
 11837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11840 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11841 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11842 ;;Total ram usage:        8 bytes
 11843 ;; Hardware stack levels used:    1
 11844 ;; Hardware stack levels required when called:    8
 11845 ;; This function calls:
 11846 ;;		_I2C1_DataReady
 11847 ;;		_I2C_FillPacket
 11848 ;;		_LCD_WriteChar
 11849 ;;		___awmod
 11850 ;;		_i2c_getch
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           	psect	text78
 11857  00263C                     __ptext78:
 11858                           	opt stack 0
 11859  00263C                     _I2C_GetNewMessages:
 11860                           	opt stack 22
 11861                           
 11862                           ;I2C.c: 68: if (!i2c_data_pending)
 11863                           
 11864                           ;incstack = 0
 11865  00263C  0100               	movlb	0	; () banked
 11866  00263E  51C8               	movf	_i2c_data_pending& (0+255),w,b
 11867  002640  0100               	movlb	0	; () banked
 11868  002642  A4D8               	btfss	status,2,c
 11869  002644  D01C               	goto	l7404
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;I2C.c: 69: {
 11873                           ;I2C.c: 71: i2c_index = 0;
 11874  002646  0E00               	movlw	0
 11875  002648  6E40               	movwf	_i2c_index+1,c
 11876  00264A  0E00               	movlw	0
 11877  00264C  6E3F               	movwf	_i2c_index,c
 11878                           
 11879                           ;I2C.c: 72: unsigned char i2c_lastCharRead = (0);
 11880  00264E  0E00               	movlw	0
 11881  002650  6E21               	movwf	I2C_GetNewMessages@i2c_lastCharRead,c
 11882  002652                     l7386:
 11883                           
 11884                           ;I2C.c: 74: {
 11885                           ;I2C.c: 76: if (I2C1_DataReady())
 11886  002652  EC4C  F020         	call	_I2C1_DataReady	;wreg free
 11887  002656  0900               	iorlw	0
 11888  002658  B4D8               	btfsc	status,2,c
 11889  00265A  D008               	goto	l7394
 11890                           
 11891                           ;I2C.c: 77: {
 11892                           ;I2C.c: 78: i2c_lastCharRead = i2c_getch();
 11893  00265C  EC37  F01E         	call	_i2c_getch	;wreg free
 11894  002660  6E21               	movwf	I2C_GetNewMessages@i2c_lastCharRead,c
 11895                           
 11896                           ;I2C.c: 79: i2c_Paquete[0] = i2c_lastCharRead;
 11897  002662  C021  F0A0         	movff	I2C_GetNewMessages@i2c_lastCharRead,_i2c_Paquete
 11898                           
 11899                           ;I2C.c: 82: }
 11900                           ;I2C.c: 83: while (i2c_lastCharRead != 0x01);
 11901                           
 11902                           ;I2C.c: 81: else break;
 11903                           
 11904                           ;I2C.c: 80: }
 11905  002666  0421               	decf	I2C_GetNewMessages@i2c_lastCharRead,w,c
 11906  002668  A4D8               	btfss	status,2,c
 11907  00266A  D7F3               	goto	l7386
 11908  00266C                     l7394:
 11909                           
 11910                           ;I2C.c: 86: if (i2c_lastCharRead != 0x01) return;
 11911  00266C  0421               	decf	I2C_GetNewMessages@i2c_lastCharRead,w,c
 11912  00266E  A4D8               	btfss	status,2,c
 11913  002670  0012               	return	
 11914                           
 11915                           ;I2C.c: 87: else { i2c_data_pending = 1; i2c_index++; }
 11916  002672  0E01               	movlw	1
 11917  002674  0100               	movlb	0	; () banked
 11918  002676  6FC8               	movwf	_i2c_data_pending& (0+255),b
 11919                           
 11920                           ; BSR set to: 0
 11921  002678  4A3F               	infsnz	_i2c_index,f,c
 11922  00267A  2A40               	incf	_i2c_index+1,f,c
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;I2C.c: 88: }
 11926  00267C  0012               	return	
 11927  00267E                     l7404:
 11928                           
 11929                           ;I2C.c: 93: {
 11930                           ;I2C.c: 95: if (I2C1_DataReady())
 11931  00267E  EC4C  F020         	call	_I2C1_DataReady	;wreg free
 11932  002682  0900               	iorlw	0
 11933  002684  B4D8               	btfsc	status,2,c
 11934  002686  D028               	goto	l7412
 11935                           
 11936                           ;I2C.c: 96: {
 11937                           ;I2C.c: 97: i2c_Paquete[i2c_index] = i2c_getch();
 11938  002688  EC37  F01E         	call	_i2c_getch	;wreg free
 11939  00268C  6E1A               	movwf	??_I2C_GetNewMessages& (0+255),c
 11940  00268E  0EA0               	movlw	low _i2c_Paquete
 11941  002690  243F               	addwf	_i2c_index,w,c
 11942  002692  6ED9               	movwf	fsr2l,c
 11943  002694  0E00               	movlw	high _i2c_Paquete
 11944  002696  2040               	addwfc	_i2c_index+1,w,c
 11945  002698  6EDA               	movwf	fsr2h,c
 11946  00269A  C01A  FFDF         	movff	??_I2C_GetNewMessages,indf2
 11947                           
 11948                           ;I2C.c: 98: LCD_WriteChar(i2c_Paquete[i2c_index], 3, i2c_index);
 11949  00269E  0E03               	movlw	3
 11950  0026A0  6E15               	movwf	LCD_WriteChar@linea,c
 11951  0026A2  C03F  F016         	movff	_i2c_index,LCD_WriteChar@offset
 11952  0026A6  0EA0               	movlw	low _i2c_Paquete
 11953  0026A8  243F               	addwf	_i2c_index,w,c
 11954  0026AA  6ED9               	movwf	fsr2l,c
 11955  0026AC  0E00               	movlw	high _i2c_Paquete
 11956  0026AE  2040               	addwfc	_i2c_index+1,w,c
 11957  0026B0  6EDA               	movwf	fsr2h,c
 11958  0026B2  50DF               	movf	indf2,w,c
 11959  0026B4  ECEE  F01C         	call	_LCD_WriteChar
 11960                           
 11961                           ;I2C.c: 101: } while (i2c_Paquete[i2c_index++] != 0x04);
 11962                           
 11963                           ;I2C.c: 100: else break;
 11964                           
 11965                           ;I2C.c: 99: }
 11966  0026B8  503F               	movf	_i2c_index,w,c
 11967  0026BA  6E1A               	movwf	??_I2C_GetNewMessages& (0+255),c
 11968  0026BC  5040               	movf	_i2c_index+1,w,c
 11969  0026BE  6E1B               	movwf	(??_I2C_GetNewMessages+1)& (0+255),c
 11970  0026C0  4A3F               	infsnz	_i2c_index,f,c
 11971  0026C2  2A40               	incf	_i2c_index+1,f,c
 11972  0026C4  0EA0               	movlw	low _i2c_Paquete
 11973  0026C6  241A               	addwf	??_I2C_GetNewMessages,w,c
 11974  0026C8  6ED9               	movwf	fsr2l,c
 11975  0026CA  0E00               	movlw	high _i2c_Paquete
 11976  0026CC  201B               	addwfc	??_I2C_GetNewMessages+1,w,c
 11977  0026CE  6EDA               	movwf	fsr2h,c
 11978  0026D0  0E04               	movlw	4
 11979  0026D2  18DE               	xorwf	postinc2,w,c
 11980  0026D4  A4D8               	btfss	status,2,c
 11981  0026D6  D7D3               	goto	l7404
 11982  0026D8                     l7412:
 11983                           
 11984                           ;I2C.c: 104: i2c_data_pending = (i2c_Paquete[i2c_index - 1] != 0x04);
 11985  0026D8  0EFF               	movlw	255
 11986  0026DA  6E1A               	movwf	??_I2C_GetNewMessages& (0+255),c
 11987  0026DC  0EFF               	movlw	255
 11988  0026DE  6E1B               	movwf	(??_I2C_GetNewMessages+1)& (0+255),c
 11989  0026E0  C03F  F01C         	movff	_i2c_index,??_I2C_GetNewMessages+2
 11990  0026E4  C040  F01D         	movff	_i2c_index+1,??_I2C_GetNewMessages+3
 11991  0026E8  501A               	movf	??_I2C_GetNewMessages,w,c
 11992  0026EA  261C               	addwf	??_I2C_GetNewMessages+2,f,c
 11993  0026EC  501B               	movf	??_I2C_GetNewMessages+1,w,c
 11994  0026EE  221D               	addwfc	??_I2C_GetNewMessages+3,f,c
 11995  0026F0  0EA0               	movlw	low _i2c_Paquete
 11996  0026F2  241C               	addwf	??_I2C_GetNewMessages+2,w,c
 11997  0026F4  6ED9               	movwf	fsr2l,c
 11998  0026F6  0E00               	movlw	high _i2c_Paquete
 11999  0026F8  201D               	addwfc	??_I2C_GetNewMessages+3,w,c
 12000  0026FA  6EDA               	movwf	fsr2h,c
 12001  0026FC  0E04               	movlw	4
 12002  0026FE  18DE               	xorwf	postinc2,w,c
 12003  002700  B4D8               	btfsc	status,2,c
 12004  002702  D002               	goto	u5550
 12005  002704  0E01               	movlw	1
 12006  002706  D001               	goto	u5560
 12007  002708                     u5550:
 12008  002708  0E00               	movlw	0
 12009  00270A                     u5560:
 12010  00270A  0100               	movlb	0	; () banked
 12011  00270C  6FC8               	movwf	_i2c_data_pending& (0+255),b
 12012                           
 12013                           ; BSR set to: 0
 12014                           ;I2C.c: 105: if (i2c_data_pending) return;
 12015  00270E  0100               	movlb	0	; () banked
 12016  002710  51C8               	movf	_i2c_data_pending& (0+255),w,b
 12017  002712  0100               	movlb	0	; () banked
 12018  002714  A4D8               	btfss	status,2,c
 12019  002716  0012               	return	
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;I2C.c: 109: tPacket* msg = &I2CQueue[I2C_QueueInPointer];
 12023                           
 12024                           ; BSR set to: 0
 12025                           
 12026                           ; BSR set to: 0
 12027  002718  5042               	movf	_I2C_QueueInPointer,w,c
 12028  00271A  0D10               	mullw	16
 12029  00271C  0E00               	movlw	low _I2CQueue
 12030  00271E  24F3               	addwf	prodl,w,c
 12031  002720  6E1F               	movwf	I2C_GetNewMessages@msg,c
 12032  002722  0E05               	movlw	high _I2CQueue
 12033  002724  20F4               	addwfc	prodh,w,c
 12034  002726  6E20               	movwf	I2C_GetNewMessages@msg+1,c
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;I2C.c: 110: I2C_FillPacket(msg);
 12038  002728  C01F  F011         	movff	I2C_GetNewMessages@msg,I2C_FillPacket@msg
 12039  00272C  C020  F012         	movff	I2C_GetNewMessages@msg+1,I2C_FillPacket@msg+1
 12040  002730  EC7B  F011         	call	_I2C_FillPacket	;wreg free
 12041                           
 12042                           ;I2C.c: 113: if (msg->Valid) { I2C_QueueInPointer = (I2C_QueueInPointer + 1) % 10; }
 12043  002734  EE20 F00F          	lfsr	2,15
 12044  002738  501F               	movf	I2C_GetNewMessages@msg,w,c
 12045  00273A  26D9               	addwf	fsr2l,f,c
 12046  00273C  5020               	movf	I2C_GetNewMessages@msg+1,w,c
 12047  00273E  22DA               	addwfc	fsr2h,f,c
 12048  002740  50DF               	movf	indf2,w,c
 12049  002742  B4D8               	btfsc	status,2,c
 12050  002744  0012               	return	
 12051  002746  0E01               	movlw	1
 12052  002748  2442               	addwf	_I2C_QueueInPointer,w,c
 12053  00274A  6E11               	movwf	___awmod@dividend,c
 12054  00274C  6A12               	clrf	___awmod@dividend+1,c
 12055  00274E  0E00               	movlw	0
 12056  002750  2212               	addwfc	___awmod@dividend+1,f,c
 12057  002752  0E00               	movlw	0
 12058  002754  6E14               	movwf	___awmod@divisor+1,c
 12059  002756  0E0A               	movlw	10
 12060  002758  6E13               	movwf	___awmod@divisor,c
 12061  00275A  EC3D  F01B         	call	___awmod	;wreg free
 12062  00275E  5011               	movf	?___awmod,w,c
 12063  002760  6E42               	movwf	_I2C_QueueInPointer,c
 12064  002762  0012               	return	
 12065  002764                     __end_of_I2C_GetNewMessages:
 12066                           	opt stack 0
 12067                           tblptru	equ	0xFF8
 12068                           tblptrh	equ	0xFF7
 12069                           tblptrl	equ	0xFF6
 12070                           tablat	equ	0xFF5
 12071                           prodh	equ	0xFF4
 12072                           prodl	equ	0xFF3
 12073                           intcon	equ	0xFF2
 12074                           intcon2	equ	0xFF1
 12075                           indf0	equ	0xFEF
 12076                           postinc0	equ	0xFEE
 12077                           fsr0h	equ	0xFEA
 12078                           fsr0l	equ	0xFE9
 12079                           wreg	equ	0xFE8
 12080                           indf1	equ	0xFE7
 12081                           fsr1h	equ	0xFE2
 12082                           fsr1l	equ	0xFE1
 12083                           indf2	equ	0xFDF
 12084                           postinc2	equ	0xFDE
 12085                           postdec2	equ	0xFDD
 12086                           fsr2h	equ	0xFDA
 12087                           fsr2l	equ	0xFD9
 12088                           status	equ	0xFD8
 12089                           
 12090 ;; *************** function _i2c_getch *****************
 12091 ;; Defined at:
 12092 ;;		line 207 in file "mcc_generated_files/i2c1.c"
 12093 ;; Parameters:    Size  Location     Type
 12094 ;;		None
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  character       1   16[COMRAM] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;                  1    wreg      unsigned char 
 12099 ;; Registers used:
 12100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12110 ;;Total ram usage:        1 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:    4
 12113 ;; This function calls:
 12114 ;;		Nothing
 12115 ;; This function is called by:
 12116 ;;		_I2C_GetNewMessages
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           	psect	text79
 12121  003C6E                     __ptext79:
 12122                           	opt stack 0
 12123  003C6E                     _i2c_getch:
 12124                           	opt stack 25
 12125                           
 12126                           ;i2c1.c: 209: unsigned char character = 0;
 12127                           
 12128                           ;incstack = 0
 12129  003C6E  0E00               	movlw	0
 12130  003C70  6E11               	movwf	i2c_getch@character,c
 12131                           
 12132                           ;i2c1.c: 210: if (I2C_Input.outPointer != I2C_Input.inPointer)
 12133  003C72  0102               	movlb	2	; () banked
 12134  003C74  5100               	movf	_I2C_Input& (0+255),w,b
 12135  003C76  0102               	movlb	2	; () banked
 12136  003C78  1901               	xorwf	(_I2C_Input+1)& (0+255),w,b
 12137  003C7A  B4D8               	btfsc	status,2,c
 12138  003C7C  D010               	goto	l5516
 12139                           
 12140                           ; BSR set to: 2
 12141                           ;i2c1.c: 211: {
 12142                           ;i2c1.c: 212: character = I2C_Input.Buffer[I2C_Input.outPointer];
 12143  003C7E  0102               	movlb	2	; () banked
 12144  003C80  5101               	movf	(_I2C_Input+1)& (0+255),w,b
 12145  003C82  0D01               	mullw	1
 12146  003C84  0E02               	movlw	low (_I2C_Input+2)
 12147  003C86  24F3               	addwf	prodl,w,c
 12148  003C88  6ED9               	movwf	fsr2l,c
 12149  003C8A  0E02               	movlw	high (_I2C_Input+2)
 12150  003C8C  20F4               	addwfc	prodh,w,c
 12151  003C8E  6EDA               	movwf	fsr2h,c
 12152  003C90  50DF               	movf	indf2,w,c
 12153  003C92  6E11               	movwf	i2c_getch@character,c
 12154                           
 12155                           ; BSR set to: 2
 12156                           ;i2c1.c: 213: I2C_Input.outPointer = (I2C_Input.outPointer + 1) % 128;
 12157  003C94  0102               	movlb	2	; () banked
 12158  003C96  2901               	incf	(_I2C_Input+1)& (0+255),w,b
 12159  003C98  0B7F               	andlw	127
 12160  003C9A  0102               	movlb	2	; () banked
 12161  003C9C  6F01               	movwf	(_I2C_Input+1)& (0+255),b
 12162  003C9E                     l5516:
 12163                           
 12164                           ; BSR set to: 2
 12165                           ;i2c1.c: 214: }
 12166                           ;i2c1.c: 215: return character;
 12167  003C9E  5011               	movf	i2c_getch@character,w,c
 12168  003CA0  0012               	return	
 12169  003CA2                     __end_of_i2c_getch:
 12170                           	opt stack 0
 12171                           tblptru	equ	0xFF8
 12172                           tblptrh	equ	0xFF7
 12173                           tblptrl	equ	0xFF6
 12174                           tablat	equ	0xFF5
 12175                           prodh	equ	0xFF4
 12176                           prodl	equ	0xFF3
 12177                           intcon	equ	0xFF2
 12178                           intcon2	equ	0xFF1
 12179                           indf0	equ	0xFEF
 12180                           postinc0	equ	0xFEE
 12181                           fsr0h	equ	0xFEA
 12182                           fsr0l	equ	0xFE9
 12183                           wreg	equ	0xFE8
 12184                           indf1	equ	0xFE7
 12185                           fsr1h	equ	0xFE2
 12186                           fsr1l	equ	0xFE1
 12187                           indf2	equ	0xFDF
 12188                           postinc2	equ	0xFDE
 12189                           postdec2	equ	0xFDD
 12190                           fsr2h	equ	0xFDA
 12191                           fsr2l	equ	0xFD9
 12192                           status	equ	0xFD8
 12193                           
 12194 ;; *************** function ___awmod *****************
 12195 ;; Defined at:
 12196 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.41\sources\common\awmod.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  dividend        2   16[COMRAM] int 
 12199 ;;  divisor         2   18[COMRAM] int 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  sign            1   21[COMRAM] unsigned char 
 12202 ;;  counter         1   20[COMRAM] unsigned char 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  2   16[COMRAM] int 
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12212 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;Total ram usage:        6 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    4
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		_I2C_GetNewMessages
 12223 ;;		_I2C_ProcessMessages
 12224 ;;		_UART_GetNewMessages
 12225 ;;		_UART_ProcessMessages
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text80
 12230  00367A                     __ptext80:
 12231                           	opt stack 0
 12232  00367A                     ___awmod:
 12233                           	opt stack 25
 12234                           
 12235                           ; BSR set to: 2
 12236                           ;incstack = 0
 12237  00367A  0E00               	movlw	0
 12238  00367C  6E16               	movwf	___awmod@sign,c
 12239  00367E  AE12               	btfss	___awmod@dividend+1,7,c
 12240  003680  D006               	goto	l5648
 12241  003682  6C11               	negf	___awmod@dividend,c
 12242  003684  1E12               	comf	___awmod@dividend+1,f,c
 12243  003686  B0D8               	btfsc	status,0,c
 12244  003688  2A12               	incf	___awmod@dividend+1,f,c
 12245  00368A  0E01               	movlw	1
 12246  00368C  6E16               	movwf	___awmod@sign,c
 12247  00368E                     l5648:
 12248  00368E  AE14               	btfss	___awmod@divisor+1,7,c
 12249  003690  D004               	goto	l5652
 12250  003692  6C13               	negf	___awmod@divisor,c
 12251  003694  1E14               	comf	___awmod@divisor+1,f,c
 12252  003696  B0D8               	btfsc	status,0,c
 12253  003698  2A14               	incf	___awmod@divisor+1,f,c
 12254  00369A                     l5652:
 12255  00369A  5013               	movf	___awmod@divisor,w,c
 12256  00369C  1014               	iorwf	___awmod@divisor+1,w,c
 12257  00369E  B4D8               	btfsc	status,2,c
 12258  0036A0  D018               	goto	l5668
 12259  0036A2  0E01               	movlw	1
 12260  0036A4  6E15               	movwf	___awmod@counter,c
 12261  0036A6  D004               	goto	l5658
 12262  0036A8                     l5656:
 12263  0036A8  90D8               	bcf	status,0,c
 12264  0036AA  3613               	rlcf	___awmod@divisor,f,c
 12265  0036AC  3614               	rlcf	___awmod@divisor+1,f,c
 12266  0036AE  2A15               	incf	___awmod@counter,f,c
 12267  0036B0                     l5658:
 12268  0036B0  AE14               	btfss	___awmod@divisor+1,7,c
 12269  0036B2  D7FA               	goto	l5656
 12270  0036B4                     l5660:
 12271  0036B4  5013               	movf	___awmod@divisor,w,c
 12272  0036B6  5C11               	subwf	___awmod@dividend,w,c
 12273  0036B8  5014               	movf	___awmod@divisor+1,w,c
 12274  0036BA  5812               	subwfb	___awmod@dividend+1,w,c
 12275  0036BC  A0D8               	btfss	status,0,c
 12276  0036BE  D004               	goto	l5664
 12277  0036C0  5013               	movf	___awmod@divisor,w,c
 12278  0036C2  5E11               	subwf	___awmod@dividend,f,c
 12279  0036C4  5014               	movf	___awmod@divisor+1,w,c
 12280  0036C6  5A12               	subwfb	___awmod@dividend+1,f,c
 12281  0036C8                     l5664:
 12282  0036C8  90D8               	bcf	status,0,c
 12283  0036CA  3214               	rrcf	___awmod@divisor+1,f,c
 12284  0036CC  3213               	rrcf	___awmod@divisor,f,c
 12285  0036CE  2E15               	decfsz	___awmod@counter,f,c
 12286  0036D0  D7F1               	goto	l5660
 12287  0036D2                     l5668:
 12288  0036D2  5016               	movf	___awmod@sign,w,c
 12289  0036D4  B4D8               	btfsc	status,2,c
 12290  0036D6  D004               	goto	l5672
 12291  0036D8  6C11               	negf	___awmod@dividend,c
 12292  0036DA  1E12               	comf	___awmod@dividend+1,f,c
 12293  0036DC  B0D8               	btfsc	status,0,c
 12294  0036DE  2A12               	incf	___awmod@dividend+1,f,c
 12295  0036E0                     l5672:
 12296  0036E0  C011  F011         	movff	___awmod@dividend,?___awmod
 12297  0036E4  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
 12298  0036E8  0012               	return	
 12299  0036EA                     __end_of___awmod:
 12300                           	opt stack 0
 12301                           tblptru	equ	0xFF8
 12302                           tblptrh	equ	0xFF7
 12303                           tblptrl	equ	0xFF6
 12304                           tablat	equ	0xFF5
 12305                           prodh	equ	0xFF4
 12306                           prodl	equ	0xFF3
 12307                           intcon	equ	0xFF2
 12308                           intcon2	equ	0xFF1
 12309                           indf0	equ	0xFEF
 12310                           postinc0	equ	0xFEE
 12311                           fsr0h	equ	0xFEA
 12312                           fsr0l	equ	0xFE9
 12313                           wreg	equ	0xFE8
 12314                           indf1	equ	0xFE7
 12315                           fsr1h	equ	0xFE2
 12316                           fsr1l	equ	0xFE1
 12317                           indf2	equ	0xFDF
 12318                           postinc2	equ	0xFDE
 12319                           postdec2	equ	0xFDD
 12320                           fsr2h	equ	0xFDA
 12321                           fsr2l	equ	0xFD9
 12322                           status	equ	0xFD8
 12323                           
 12324 ;; *************** function _LCD_WriteChar *****************
 12325 ;; Defined at:
 12326 ;;		line 90 in file "displayLCD20x4.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  character       1    wreg     unsigned char 
 12329 ;;  linea           1   20[COMRAM] unsigned char 
 12330 ;;  offset          1   21[COMRAM] unsigned char 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  character       1   22[COMRAM] unsigned char 
 12333 ;;  dlinea          1   23[COMRAM] unsigned char 
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2, status,0, cstack
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12343 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;Total ram usage:        4 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:    7
 12350 ;; This function calls:
 12351 ;;		_lcd_write_character_4d
 12352 ;;		_lcd_write_instruction_4d
 12353 ;; This function is called by:
 12354 ;;		_I2C_GetNewMessages
 12355 ;;		_UpdateSensores
 12356 ;;		_UpdateMotores
 12357 ;;		_UpdateMuxPos
 12358 ;; This function uses a non-reentrant model
 12359 ;;
 12360                           
 12361                           	psect	text81
 12362  0039DC                     __ptext81:
 12363                           	opt stack 0
 12364  0039DC                     _LCD_WriteChar:
 12365                           	opt stack 22
 12366                           
 12367                           ;incstack = 0
 12368                           ;LCD_WriteChar@character stored from wreg
 12369  0039DC  6E17               	movwf	LCD_WriteChar@character,c
 12370                           
 12371                           ;displayLCD20x4.c: 92: unsigned char dlinea = 0x00;
 12372  0039DE  0E00               	movlw	0
 12373  0039E0  6E18               	movwf	LCD_WriteChar@dlinea,c
 12374                           
 12375                           ;displayLCD20x4.c: 95: switch(linea)
 12376  0039E2  D009               	goto	l7338
 12377  0039E4                     l7328:
 12378                           
 12379                           ;displayLCD20x4.c: 98: dlinea = 0x00;
 12380  0039E4  0E00               	movlw	0
 12381  0039E6  D005               	goto	L14
 12382  0039E8                     l7330:
 12383                           
 12384                           ;displayLCD20x4.c: 101: dlinea = 0x40;
 12385  0039E8  0E40               	movlw	64
 12386  0039EA  D003               	goto	L14
 12387  0039EC                     l7332:
 12388                           
 12389                           ;displayLCD20x4.c: 104: dlinea = 0x14;
 12390  0039EC  0E14               	movlw	20
 12391  0039EE  D001               	goto	L14
 12392  0039F0                     l7334:
 12393                           
 12394                           ;displayLCD20x4.c: 107: dlinea = 0x54;
 12395  0039F0  0E54               	movlw	84
 12396  0039F2                     L14:
 12397  0039F2  6E18               	movwf	LCD_WriteChar@dlinea,c
 12398                           
 12399                           ;displayLCD20x4.c: 109: }
 12400                           
 12401                           ;displayLCD20x4.c: 108: break;
 12402  0039F4  D00D               	goto	l7340
 12403  0039F6                     l7338:
 12404  0039F6  5015               	movf	LCD_WriteChar@linea,w,c
 12405                           
 12406                           ; Switch size 1, requested type "space"
 12407                           ; Number of cases is 4, Range of values is 1 to 4
 12408                           ; switch strategies available:
 12409                           ; Name         Instructions Cycles
 12410                           ; simple_byte           13     7 (average)
 12411                           ;	Chosen strategy is simple_byte
 12412  0039F8  0A01               	xorlw	1	; case 1
 12413  0039FA  B4D8               	btfsc	status,2,c
 12414  0039FC  D7F3               	goto	l7328
 12415  0039FE  0A03               	xorlw	3	; case 2
 12416  003A00  B4D8               	btfsc	status,2,c
 12417  003A02  D7F2               	goto	l7330
 12418  003A04  0A01               	xorlw	1	; case 3
 12419  003A06  B4D8               	btfsc	status,2,c
 12420  003A08  D7F1               	goto	l7332
 12421  003A0A  0A07               	xorlw	7	; case 4
 12422  003A0C  B4D8               	btfsc	status,2,c
 12423  003A0E  D7F0               	goto	l7334
 12424  003A10                     l7340:
 12425                           
 12426                           ;displayLCD20x4.c: 111: lcd_write_instruction_4d(0b10000000 | dlinea + offset);
 12427  003A10  5018               	movf	LCD_WriteChar@dlinea,w,c
 12428  003A12  2416               	addwf	LCD_WriteChar@offset,w,c
 12429  003A14  0980               	iorlw	128
 12430  003A16  EC22  F020         	call	_lcd_write_instruction_4d
 12431                           
 12432                           ;displayLCD20x4.c: 112: lcd_write_character_4d(character);
 12433  003A1A  5017               	movf	LCD_WriteChar@character,w,c
 12434  003A1C  EC2D  F020         	call	_lcd_write_character_4d
 12435  003A20  0012               	return		;funcret
 12436  003A22                     __end_of_LCD_WriteChar:
 12437                           	opt stack 0
 12438                           tblptru	equ	0xFF8
 12439                           tblptrh	equ	0xFF7
 12440                           tblptrl	equ	0xFF6
 12441                           tablat	equ	0xFF5
 12442                           prodh	equ	0xFF4
 12443                           prodl	equ	0xFF3
 12444                           intcon	equ	0xFF2
 12445                           intcon2	equ	0xFF1
 12446                           indf0	equ	0xFEF
 12447                           postinc0	equ	0xFEE
 12448                           fsr0h	equ	0xFEA
 12449                           fsr0l	equ	0xFE9
 12450                           wreg	equ	0xFE8
 12451                           indf1	equ	0xFE7
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           fsr2h	equ	0xFDA
 12458                           fsr2l	equ	0xFD9
 12459                           status	equ	0xFD8
 12460                           
 12461 ;; *************** function _lcd_write_instruction_4d *****************
 12462 ;; Defined at:
 12463 ;;		line 252 in file "displayLCD20x4.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;  theInstructi    1    wreg     unsigned char 
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;  theInstructi    1   19[COMRAM] unsigned char 
 12468 ;; Return value:  Size  Location     Type
 12469 ;;                  1    wreg      void 
 12470 ;; Registers used:
 12471 ;;		wreg, status,2, status,0, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;Total ram usage:        1 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    6
 12484 ;; This function calls:
 12485 ;;		_lcd_write_4
 12486 ;; This function is called by:
 12487 ;;		_LCD_Write
 12488 ;;		_LCD_WriteChar
 12489 ;;		_lcd_init_4d
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text82
 12494  004044                     __ptext82:
 12495                           	opt stack 0
 12496  004044                     _lcd_write_instruction_4d:
 12497                           	opt stack 20
 12498                           
 12499                           ;incstack = 0
 12500                           ;lcd_write_instruction_4d@theInstruction stored from wreg
 12501  004044  6E14               	movwf	lcd_write_instruction_4d@theInstruction,c
 12502                           
 12503                           ;displayLCD20x4.c: 254: do { LATE1 = 0; } while(0);
 12504  004046  928D               	bcf	3981,1,c	;volatile
 12505                           
 12506                           ;displayLCD20x4.c: 255: do { LATA5 = 0; } while(0);
 12507  004048  9A89               	bcf	3977,5,c	;volatile
 12508                           
 12509                           ;displayLCD20x4.c: 256: lcd_write_4(theInstruction);
 12510  00404A  5014               	movf	lcd_write_instruction_4d@theInstruction,w,c
 12511  00404C  ECA7  F01C         	call	_lcd_write_4
 12512                           
 12513                           ;displayLCD20x4.c: 257: lcd_write_4(theInstruction << 4);
 12514  004050  3814               	swapf	lcd_write_instruction_4d@theInstruction,w,c
 12515  004052  0BF0               	andlw	240
 12516  004054  ECA7  F01C         	call	_lcd_write_4
 12517  004058  0012               	return		;funcret
 12518  00405A                     __end_of_lcd_write_instruction_4d:
 12519                           	opt stack 0
 12520                           tblptru	equ	0xFF8
 12521                           tblptrh	equ	0xFF7
 12522                           tblptrl	equ	0xFF6
 12523                           tablat	equ	0xFF5
 12524                           prodh	equ	0xFF4
 12525                           prodl	equ	0xFF3
 12526                           intcon	equ	0xFF2
 12527                           intcon2	equ	0xFF1
 12528                           indf0	equ	0xFEF
 12529                           postinc0	equ	0xFEE
 12530                           fsr0h	equ	0xFEA
 12531                           fsr0l	equ	0xFE9
 12532                           wreg	equ	0xFE8
 12533                           indf1	equ	0xFE7
 12534                           fsr1h	equ	0xFE2
 12535                           fsr1l	equ	0xFE1
 12536                           indf2	equ	0xFDF
 12537                           postinc2	equ	0xFDE
 12538                           postdec2	equ	0xFDD
 12539                           fsr2h	equ	0xFDA
 12540                           fsr2l	equ	0xFD9
 12541                           status	equ	0xFD8
 12542                           
 12543 ;; *************** function _lcd_write_character_4d *****************
 12544 ;; Defined at:
 12545 ;;		line 237 in file "displayLCD20x4.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;  theData         1    wreg     unsigned char 
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;  theData         1   19[COMRAM] unsigned char 
 12550 ;; Return value:  Size  Location     Type
 12551 ;;                  1    wreg      void 
 12552 ;; Registers used:
 12553 ;;		wreg, status,2, status,0, cstack
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12563 ;;Total ram usage:        1 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    6
 12566 ;; This function calls:
 12567 ;;		_lcd_write_4
 12568 ;; This function is called by:
 12569 ;;		_LCD_WriteChar
 12570 ;;		_lcd_write_string_4d
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           	psect	text83
 12575  00405A                     __ptext83:
 12576                           	opt stack 0
 12577  00405A                     _lcd_write_character_4d:
 12578                           	opt stack 19
 12579                           
 12580                           ;incstack = 0
 12581                           ;lcd_write_character_4d@theData stored from wreg
 12582  00405A  6E14               	movwf	lcd_write_character_4d@theData,c
 12583                           
 12584                           ;displayLCD20x4.c: 239: do { LATE1 = 1; } while(0);
 12585  00405C  828D               	bsf	3981,1,c	;volatile
 12586                           
 12587                           ;displayLCD20x4.c: 240: do { LATA5 = 0; } while(0);
 12588  00405E  9A89               	bcf	3977,5,c	;volatile
 12589                           
 12590                           ;displayLCD20x4.c: 241: lcd_write_4(theData);
 12591  004060  5014               	movf	lcd_write_character_4d@theData,w,c
 12592  004062  ECA7  F01C         	call	_lcd_write_4
 12593                           
 12594                           ;displayLCD20x4.c: 242: lcd_write_4(theData << 4);
 12595  004066  3814               	swapf	lcd_write_character_4d@theData,w,c
 12596  004068  0BF0               	andlw	240
 12597  00406A  ECA7  F01C         	call	_lcd_write_4
 12598  00406E  0012               	return		;funcret
 12599  004070                     __end_of_lcd_write_character_4d:
 12600                           	opt stack 0
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           intcon	equ	0xFF2
 12608                           intcon2	equ	0xFF1
 12609                           indf0	equ	0xFEF
 12610                           postinc0	equ	0xFEE
 12611                           fsr0h	equ	0xFEA
 12612                           fsr0l	equ	0xFE9
 12613                           wreg	equ	0xFE8
 12614                           indf1	equ	0xFE7
 12615                           fsr1h	equ	0xFE2
 12616                           fsr1l	equ	0xFE1
 12617                           indf2	equ	0xFDF
 12618                           postinc2	equ	0xFDE
 12619                           postdec2	equ	0xFDD
 12620                           fsr2h	equ	0xFDA
 12621                           fsr2l	equ	0xFD9
 12622                           status	equ	0xFD8
 12623                           
 12624 ;; *************** function _lcd_write_4 *****************
 12625 ;; Defined at:
 12626 ;;		line 270 in file "displayLCD20x4.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;  theByte         1    wreg     unsigned char 
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;  theByte         1   18[COMRAM] unsigned char 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      void 
 12633 ;; Registers used:
 12634 ;;		wreg, status,2, status,0, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;Total ram usage:        1 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    5
 12647 ;; This function calls:
 12648 ;;		_Delay
 12649 ;; This function is called by:
 12650 ;;		_lcd_init_4d
 12651 ;;		_lcd_write_character_4d
 12652 ;;		_lcd_write_instruction_4d
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           	psect	text84
 12657  00394E                     __ptext84:
 12658                           	opt stack 0
 12659  00394E                     _lcd_write_4:
 12660                           	opt stack 19
 12661                           
 12662                           ;incstack = 0
 12663                           ;lcd_write_4@theByte stored from wreg
 12664  00394E  6E13               	movwf	lcd_write_4@theByte,c
 12665                           
 12666                           ;displayLCD20x4.c: 272: if (theByte & (1 << 7)) do { LATD3 = 1; } while(0);
 12667  003950  AE13               	btfss	lcd_write_4@theByte,7,c
 12668  003952  D002               	goto	l1357
 12669  003954  868C               	bsf	3980,3,c	;volatile
 12670  003956  D001               	goto	l6360
 12671  003958                     l1357:
 12672  003958  968C               	bcf	3980,3,c	;volatile
 12673  00395A                     l6360:
 12674                           
 12675                           ;displayLCD20x4.c: 275: if (theByte & 1<<6) do { LATD2 = 1; } while(0);
 12676  00395A  AC13               	btfss	lcd_write_4@theByte,6,c
 12677  00395C  D002               	goto	l1363
 12678  00395E  848C               	bsf	3980,2,c	;volatile
 12679  003960  D001               	goto	l6362
 12680  003962                     l1363:
 12681  003962  948C               	bcf	3980,2,c	;volatile
 12682  003964                     l6362:
 12683                           
 12684                           ;displayLCD20x4.c: 278: if (theByte & 1<<5) do { LATD1 = 1; } while(0);
 12685  003964  AA13               	btfss	lcd_write_4@theByte,5,c
 12686  003966  D002               	goto	l1369
 12687  003968  828C               	bsf	3980,1,c	;volatile
 12688  00396A  D001               	goto	l6364
 12689  00396C                     l1369:
 12690  00396C  928C               	bcf	3980,1,c	;volatile
 12691  00396E                     l6364:
 12692                           
 12693                           ;displayLCD20x4.c: 281: if (theByte & 1<<4) do { LATD0 = 1; } while(0);
 12694  00396E  A813               	btfss	lcd_write_4@theByte,4,c
 12695  003970  D002               	goto	l1375
 12696  003972  808C               	bsf	3980,0,c	;volatile
 12697  003974  D001               	goto	l1377
 12698  003976                     l1375:
 12699  003976  908C               	bcf	3980,0,c	;volatile
 12700  003978                     l1377:
 12701  003978  8A89               	bsf	3977,5,c	;volatile
 12702                           
 12703                           ;displayLCD20x4.c: 287: Delay(1 * ((unsigned long)(2)));
 12704  00397A  0E00               	movlw	0
 12705  00397C  6E12               	movwf	Delay@Timeout+1,c
 12706  00397E  0E02               	movlw	2
 12707  003980  6E11               	movwf	Delay@Timeout,c
 12708  003982  ECB9  F01F         	call	_Delay	;wreg free
 12709                           
 12710                           ;displayLCD20x4.c: 288: do { LATA5 = 0; } while(0);
 12711  003986  9A89               	bcf	3977,5,c	;volatile
 12712                           
 12713                           ;displayLCD20x4.c: 289: Delay(1 * ((unsigned long)(2)));
 12714  003988  0E00               	movlw	0
 12715  00398A  6E12               	movwf	Delay@Timeout+1,c
 12716  00398C  0E02               	movlw	2
 12717  00398E  6E11               	movwf	Delay@Timeout,c
 12718  003990  ECB9  F01F         	call	_Delay	;wreg free
 12719  003994  0012               	return		;funcret
 12720  003996                     __end_of_lcd_write_4:
 12721                           	opt stack 0
 12722                           tblptru	equ	0xFF8
 12723                           tblptrh	equ	0xFF7
 12724                           tblptrl	equ	0xFF6
 12725                           tablat	equ	0xFF5
 12726                           prodh	equ	0xFF4
 12727                           prodl	equ	0xFF3
 12728                           intcon	equ	0xFF2
 12729                           intcon2	equ	0xFF1
 12730                           indf0	equ	0xFEF
 12731                           postinc0	equ	0xFEE
 12732                           fsr0h	equ	0xFEA
 12733                           fsr0l	equ	0xFE9
 12734                           wreg	equ	0xFE8
 12735                           indf1	equ	0xFE7
 12736                           fsr1h	equ	0xFE2
 12737                           fsr1l	equ	0xFE1
 12738                           indf2	equ	0xFDF
 12739                           postinc2	equ	0xFDE
 12740                           postdec2	equ	0xFDD
 12741                           fsr2h	equ	0xFDA
 12742                           fsr2l	equ	0xFD9
 12743                           status	equ	0xFD8
 12744                           
 12745 ;; *************** function _Delay *****************
 12746 ;; Defined at:
 12747 ;;		line 160 in file "tasks.c"
 12748 ;; Parameters:    Size  Location     Type
 12749 ;;  Timeout         2   16[COMRAM] unsigned int 
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;		None
 12752 ;; Return value:  Size  Location     Type
 12753 ;;                  1    wreg      void 
 12754 ;; Registers used:
 12755 ;;		wreg, status,2, status,0
 12756 ;; Tracked objects:
 12757 ;;		On entry : 0/0
 12758 ;;		On exit  : 0/0
 12759 ;;		Unchanged: 0/0
 12760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12764 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;Total ram usage:        2 bytes
 12766 ;; Hardware stack levels used:    1
 12767 ;; Hardware stack levels required when called:    4
 12768 ;; This function calls:
 12769 ;;		Nothing
 12770 ;; This function is called by:
 12771 ;;		_Send
 12772 ;;		_lcd_init_4d
 12773 ;;		_lcd_write_string_4d
 12774 ;;		_lcd_write_4
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778                           	psect	text85
 12779  003F72                     __ptext85:
 12780                           	opt stack 0
 12781  003F72                     _Delay:
 12782                           	opt stack 0
 12783                           
 12784                           ;incstack = 0
 12785  003F72  D007               	goto	l6354
 12786  003F74                     l6350:
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;tasks.c: 166: {
 12790                           ;tasks.c: 167: if (DelayTimerTicked)
 12791  003F74  0100               	movlb	0	; () banked
 12792  003F76  51C9               	movf	_DelayTimerTicked& (0+255),w,b
 12793  003F78  B4D8               	btfsc	status,2,c
 12794  003F7A  D006               	goto	l6356
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;tasks.c: 168: {
 12798                           ;tasks.c: 169: Timeout--;
 12799  003F7C  0611               	decf	Delay@Timeout,f,c
 12800  003F7E  A0D8               	btfss	status,0,c
 12801  003F80  0612               	decf	Delay@Timeout+1,f,c
 12802  003F82                     l6354:
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;tasks.c: 170: DelayTimerTicked = 0;
 12806  003F82  0E00               	movlw	0
 12807  003F84  0100               	movlb	0	; () banked
 12808  003F86  6FC9               	movwf	_DelayTimerTicked& (0+255),b
 12809  003F88                     l6356:
 12810                           
 12811                           ; BSR set to: 0
 12812  003F88  5011               	movf	Delay@Timeout,w,c
 12813  003F8A  1012               	iorwf	Delay@Timeout+1,w,c
 12814  003F8C  B4D8               	btfsc	status,2,c
 12815  003F8E  0012               	return	
 12816  003F90  D7F1               	goto	l6350
 12817  003F92                     __end_of_Delay:
 12818                           	opt stack 0
 12819                           tblptru	equ	0xFF8
 12820                           tblptrh	equ	0xFF7
 12821                           tblptrl	equ	0xFF6
 12822                           tablat	equ	0xFF5
 12823                           prodh	equ	0xFF4
 12824                           prodl	equ	0xFF3
 12825                           intcon	equ	0xFF2
 12826                           intcon2	equ	0xFF1
 12827                           indf0	equ	0xFEF
 12828                           postinc0	equ	0xFEE
 12829                           fsr0h	equ	0xFEA
 12830                           fsr0l	equ	0xFE9
 12831                           wreg	equ	0xFE8
 12832                           indf1	equ	0xFE7
 12833                           fsr1h	equ	0xFE2
 12834                           fsr1l	equ	0xFE1
 12835                           indf2	equ	0xFDF
 12836                           postinc2	equ	0xFDE
 12837                           postdec2	equ	0xFDD
 12838                           fsr2h	equ	0xFDA
 12839                           fsr2l	equ	0xFD9
 12840                           status	equ	0xFD8
 12841                           
 12842 ;; *************** function _I2C_FillPacket *****************
 12843 ;; Defined at:
 12844 ;;		line 167 in file "I2C.c"
 12845 ;; Parameters:    Size  Location     Type
 12846 ;;  msg             2   16[COMRAM] PTR struct .
 12847 ;;		 -> I2CQueue(160), 
 12848 ;; Auto vars:     Size  Location     Type
 12849 ;;  j               2   21[COMRAM] int 
 12850 ;;  i               2   23[COMRAM] int 
 12851 ;; Return value:  Size  Location     Type
 12852 ;;                  1    wreg      void 
 12853 ;; Registers used:
 12854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12855 ;; Tracked objects:
 12856 ;;		On entry : 0/0
 12857 ;;		On exit  : 0/0
 12858 ;;		Unchanged: 0/0
 12859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12860 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12861 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12862 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;Total ram usage:        9 bytes
 12865 ;; Hardware stack levels used:    1
 12866 ;; Hardware stack levels required when called:    4
 12867 ;; This function calls:
 12868 ;;		Nothing
 12869 ;; This function is called by:
 12870 ;;		_I2C_GetNewMessages
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text86
 12875  0022F6                     __ptext86:
 12876                           	opt stack 0
 12877  0022F6                     _I2C_FillPacket:
 12878                           	opt stack 25
 12879                           
 12880                           ;I2C.c: 169: int i = 0;
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;incstack = 0
 12884  0022F6  0E00               	movlw	0
 12885  0022F8  6E19               	movwf	I2C_FillPacket@i+1,c
 12886  0022FA  0E00               	movlw	0
 12887  0022FC  6E18               	movwf	I2C_FillPacket@i,c
 12888                           
 12889                           ;I2C.c: 171: msg->Start = i2c_Paquete[i++];
 12890  0022FE  0EA0               	movlw	low _i2c_Paquete
 12891  002300  2418               	addwf	I2C_FillPacket@i,w,c
 12892  002302  6ED9               	movwf	fsr2l,c
 12893  002304  0E00               	movlw	high _i2c_Paquete
 12894  002306  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12895  002308  6EDA               	movwf	fsr2h,c
 12896  00230A  C011  FFE1         	movff	I2C_FillPacket@msg,fsr1l
 12897  00230E  C012  FFE2         	movff	I2C_FillPacket@msg+1,fsr1h
 12898  002312  CFDF FFE7          	movff	indf2,indf1
 12899  002316  4A18               	infsnz	I2C_FillPacket@i,f,c
 12900  002318  2A19               	incf	I2C_FillPacket@i+1,f,c
 12901                           
 12902                           ;I2C.c: 172: msg->Direction = i2c_Paquete[i] & 0xF0;
 12903  00231A  EE20 F001          	lfsr	2,1
 12904  00231E  5011               	movf	I2C_FillPacket@msg,w,c
 12905  002320  26D9               	addwf	fsr2l,f,c
 12906  002322  5012               	movf	I2C_FillPacket@msg+1,w,c
 12907  002324  22DA               	addwfc	fsr2h,f,c
 12908  002326  0EA0               	movlw	low _i2c_Paquete
 12909  002328  2418               	addwf	I2C_FillPacket@i,w,c
 12910  00232A  6EE1               	movwf	fsr1l,c
 12911  00232C  0E00               	movlw	high _i2c_Paquete
 12912  00232E  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12913  002330  6EE2               	movwf	fsr1h,c
 12914  002332  50E7               	movf	indf1,w,c
 12915  002334  0BF0               	andlw	240
 12916  002336  6EDF               	movwf	indf2,c
 12917                           
 12918                           ;I2C.c: 173: msg->ParamCount = i2c_Paquete[i++] & 0x0F;
 12919  002338  EE20 F00D          	lfsr	2,13
 12920  00233C  5011               	movf	I2C_FillPacket@msg,w,c
 12921  00233E  26D9               	addwf	fsr2l,f,c
 12922  002340  5012               	movf	I2C_FillPacket@msg+1,w,c
 12923  002342  22DA               	addwfc	fsr2h,f,c
 12924  002344  0EA0               	movlw	low _i2c_Paquete
 12925  002346  2418               	addwf	I2C_FillPacket@i,w,c
 12926  002348  6EE1               	movwf	fsr1l,c
 12927  00234A  0E00               	movlw	high _i2c_Paquete
 12928  00234C  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12929  00234E  6EE2               	movwf	fsr1h,c
 12930  002350  50E7               	movf	indf1,w,c
 12931  002352  0B0F               	andlw	15
 12932  002354  6EDF               	movwf	indf2,c
 12933  002356  4A18               	infsnz	I2C_FillPacket@i,f,c
 12934  002358  2A19               	incf	I2C_FillPacket@i+1,f,c
 12935                           
 12936                           ;I2C.c: 174: msg->Class = i2c_Paquete[i++];
 12937  00235A  0EA0               	movlw	low _i2c_Paquete
 12938  00235C  2418               	addwf	I2C_FillPacket@i,w,c
 12939  00235E  6ED9               	movwf	fsr2l,c
 12940  002360  0E00               	movlw	high _i2c_Paquete
 12941  002362  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12942  002364  6EDA               	movwf	fsr2h,c
 12943  002366  EE10 F002          	lfsr	1,2
 12944  00236A  5011               	movf	I2C_FillPacket@msg,w,c
 12945  00236C  26E1               	addwf	fsr1l,f,c
 12946  00236E  5012               	movf	I2C_FillPacket@msg+1,w,c
 12947  002370  22E2               	addwfc	fsr1h,f,c
 12948  002372  CFDF FFE7          	movff	indf2,indf1
 12949  002376  4A18               	infsnz	I2C_FillPacket@i,f,c
 12950  002378  2A19               	incf	I2C_FillPacket@i+1,f,c
 12951                           
 12952                           ;I2C.c: 175: msg->ID = i2c_Paquete[i++] - '0';
 12953  00237A  EE20 F003          	lfsr	2,3
 12954  00237E  5011               	movf	I2C_FillPacket@msg,w,c
 12955  002380  26D9               	addwf	fsr2l,f,c
 12956  002382  5012               	movf	I2C_FillPacket@msg+1,w,c
 12957  002384  22DA               	addwfc	fsr2h,f,c
 12958  002386  0EA0               	movlw	low _i2c_Paquete
 12959  002388  2418               	addwf	I2C_FillPacket@i,w,c
 12960  00238A  6EE1               	movwf	fsr1l,c
 12961  00238C  0E00               	movlw	high _i2c_Paquete
 12962  00238E  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12963  002390  6EE2               	movwf	fsr1h,c
 12964  002392  50E7               	movf	indf1,w,c
 12965  002394  0FD0               	addlw	208
 12966  002396  6EDF               	movwf	indf2,c
 12967  002398  4A18               	infsnz	I2C_FillPacket@i,f,c
 12968  00239A  2A19               	incf	I2C_FillPacket@i+1,f,c
 12969                           
 12970                           ;I2C.c: 177: msg->CommandH = i2c_Paquete[i++];
 12971  00239C  0EA0               	movlw	low _i2c_Paquete
 12972  00239E  2418               	addwf	I2C_FillPacket@i,w,c
 12973  0023A0  6ED9               	movwf	fsr2l,c
 12974  0023A2  0E00               	movlw	high _i2c_Paquete
 12975  0023A4  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12976  0023A6  6EDA               	movwf	fsr2h,c
 12977  0023A8  EE10 F004          	lfsr	1,4
 12978  0023AC  5011               	movf	I2C_FillPacket@msg,w,c
 12979  0023AE  26E1               	addwf	fsr1l,f,c
 12980  0023B0  5012               	movf	I2C_FillPacket@msg+1,w,c
 12981  0023B2  22E2               	addwfc	fsr1h,f,c
 12982  0023B4  CFDF FFE7          	movff	indf2,indf1
 12983  0023B8  4A18               	infsnz	I2C_FillPacket@i,f,c
 12984  0023BA  2A19               	incf	I2C_FillPacket@i+1,f,c
 12985                           
 12986                           ;I2C.c: 178: msg->CommandL = i2c_Paquete[i++];
 12987  0023BC  0EA0               	movlw	low _i2c_Paquete
 12988  0023BE  2418               	addwf	I2C_FillPacket@i,w,c
 12989  0023C0  6ED9               	movwf	fsr2l,c
 12990  0023C2  0E00               	movlw	high _i2c_Paquete
 12991  0023C4  2019               	addwfc	I2C_FillPacket@i+1,w,c
 12992  0023C6  6EDA               	movwf	fsr2h,c
 12993  0023C8  EE10 F005          	lfsr	1,5
 12994  0023CC  5011               	movf	I2C_FillPacket@msg,w,c
 12995  0023CE  26E1               	addwf	fsr1l,f,c
 12996  0023D0  5012               	movf	I2C_FillPacket@msg+1,w,c
 12997  0023D2  22E2               	addwfc	fsr1h,f,c
 12998  0023D4  CFDF FFE7          	movff	indf2,indf1
 12999  0023D8  4A18               	infsnz	I2C_FillPacket@i,f,c
 13000  0023DA  2A19               	incf	I2C_FillPacket@i+1,f,c
 13001                           
 13002                           ;I2C.c: 179: for (int j = 0; j < msg->ParamCount; j++)
 13003  0023DC  0E00               	movlw	0
 13004  0023DE  6E17               	movwf	I2C_FillPacket@j+1,c
 13005  0023E0  0E00               	movlw	0
 13006  0023E2  6E16               	movwf	I2C_FillPacket@j,c
 13007  0023E4  D018               	goto	l5628
 13008  0023E6                     l5622:
 13009                           
 13010                           ;I2C.c: 180: msg->Params[j] = i2c_Paquete[i++];
 13011  0023E6  0EA0               	movlw	low _i2c_Paquete
 13012  0023E8  2418               	addwf	I2C_FillPacket@i,w,c
 13013  0023EA  6ED9               	movwf	fsr2l,c
 13014  0023EC  0E00               	movlw	high _i2c_Paquete
 13015  0023EE  2019               	addwfc	I2C_FillPacket@i+1,w,c
 13016  0023F0  6EDA               	movwf	fsr2h,c
 13017  0023F2  0E06               	movlw	6
 13018  0023F4  2416               	addwf	I2C_FillPacket@j,w,c
 13019  0023F6  6E13               	movwf	??_I2C_FillPacket& (0+255),c
 13020  0023F8  0E00               	movlw	0
 13021  0023FA  2017               	addwfc	I2C_FillPacket@j+1,w,c
 13022  0023FC  6E14               	movwf	(??_I2C_FillPacket+1)& (0+255),c
 13023  0023FE  5013               	movf	??_I2C_FillPacket,w,c
 13024  002400  2411               	addwf	I2C_FillPacket@msg,w,c
 13025  002402  6EE1               	movwf	fsr1l,c
 13026  002404  5014               	movf	??_I2C_FillPacket+1,w,c
 13027  002406  2012               	addwfc	I2C_FillPacket@msg+1,w,c
 13028  002408  6EE2               	movwf	fsr1h,c
 13029  00240A  CFDF FFE7          	movff	indf2,indf1
 13030  00240E  4A18               	infsnz	I2C_FillPacket@i,f,c
 13031  002410  2A19               	incf	I2C_FillPacket@i+1,f,c
 13032  002412  4A16               	infsnz	I2C_FillPacket@j,f,c
 13033  002414  2A17               	incf	I2C_FillPacket@j+1,f,c
 13034  002416                     l5628:
 13035  002416  EE20 F00D          	lfsr	2,13
 13036  00241A  5011               	movf	I2C_FillPacket@msg,w,c
 13037  00241C  26D9               	addwf	fsr2l,f,c
 13038  00241E  5012               	movf	I2C_FillPacket@msg+1,w,c
 13039  002420  22DA               	addwfc	fsr2h,f,c
 13040  002422  50DF               	movf	indf2,w,c
 13041  002424  6E13               	movwf	??_I2C_FillPacket& (0+255),c
 13042  002426  6A14               	clrf	(??_I2C_FillPacket+1)& (0+255),c
 13043  002428  5013               	movf	??_I2C_FillPacket,w,c
 13044  00242A  5C16               	subwf	I2C_FillPacket@j,w,c
 13045  00242C  5017               	movf	I2C_FillPacket@j+1,w,c
 13046  00242E  0A80               	xorlw	128
 13047  002430  6E15               	movwf	(??_I2C_FillPacket+2)& (0+255),c
 13048  002432  5014               	movf	??_I2C_FillPacket+1,w,c
 13049  002434  0A80               	xorlw	128
 13050  002436  5815               	subwfb	(??_I2C_FillPacket+2)& (0+255),w,c
 13051  002438  A0D8               	btfss	status,0,c
 13052  00243A  D7D5               	goto	l5622
 13053                           
 13054                           ;I2C.c: 182: msg->Checksum = i2c_Paquete[i++];
 13055  00243C  0EA0               	movlw	low _i2c_Paquete
 13056  00243E  2418               	addwf	I2C_FillPacket@i,w,c
 13057  002440  6ED9               	movwf	fsr2l,c
 13058  002442  0E00               	movlw	high _i2c_Paquete
 13059  002444  2019               	addwfc	I2C_FillPacket@i+1,w,c
 13060  002446  6EDA               	movwf	fsr2h,c
 13061  002448  EE10 F00B          	lfsr	1,11
 13062  00244C  5011               	movf	I2C_FillPacket@msg,w,c
 13063  00244E  26E1               	addwf	fsr1l,f,c
 13064  002450  5012               	movf	I2C_FillPacket@msg+1,w,c
 13065  002452  22E2               	addwfc	fsr1h,f,c
 13066  002454  CFDF FFE7          	movff	indf2,indf1
 13067  002458  4A18               	infsnz	I2C_FillPacket@i,f,c
 13068  00245A  2A19               	incf	I2C_FillPacket@i+1,f,c
 13069                           
 13070                           ;I2C.c: 183: msg->End = i2c_Paquete[i];
 13071  00245C  0EA0               	movlw	low _i2c_Paquete
 13072  00245E  2418               	addwf	I2C_FillPacket@i,w,c
 13073  002460  6ED9               	movwf	fsr2l,c
 13074  002462  0E00               	movlw	high _i2c_Paquete
 13075  002464  2019               	addwfc	I2C_FillPacket@i+1,w,c
 13076  002466  6EDA               	movwf	fsr2h,c
 13077  002468  EE10 F00C          	lfsr	1,12
 13078  00246C  5011               	movf	I2C_FillPacket@msg,w,c
 13079  00246E  26E1               	addwf	fsr1l,f,c
 13080  002470  5012               	movf	I2C_FillPacket@msg+1,w,c
 13081  002472  22E2               	addwfc	fsr1h,f,c
 13082  002474  CFDF FFE7          	movff	indf2,indf1
 13083                           
 13084                           ;I2C.c: 185: msg->IOInterface = 3;
 13085  002478  EE20 F00E          	lfsr	2,14
 13086  00247C  5011               	movf	I2C_FillPacket@msg,w,c
 13087  00247E  26D9               	addwf	fsr2l,f,c
 13088  002480  5012               	movf	I2C_FillPacket@msg+1,w,c
 13089  002482  22DA               	addwfc	fsr2h,f,c
 13090  002484  0E03               	movlw	3
 13091  002486  6EDF               	movwf	indf2,c
 13092                           
 13093                           ;I2C.c: 186: msg->Valid = 1;
 13094  002488  EE20 F00F          	lfsr	2,15
 13095  00248C  5011               	movf	I2C_FillPacket@msg,w,c
 13096  00248E  26D9               	addwf	fsr2l,f,c
 13097  002490  5012               	movf	I2C_FillPacket@msg+1,w,c
 13098  002492  22DA               	addwfc	fsr2h,f,c
 13099  002494  0E01               	movlw	1
 13100  002496  6EDF               	movwf	indf2,c
 13101  002498  0012               	return		;funcret
 13102  00249A                     __end_of_I2C_FillPacket:
 13103                           	opt stack 0
 13104                           tblptru	equ	0xFF8
 13105                           tblptrh	equ	0xFF7
 13106                           tblptrl	equ	0xFF6
 13107                           tablat	equ	0xFF5
 13108                           prodh	equ	0xFF4
 13109                           prodl	equ	0xFF3
 13110                           intcon	equ	0xFF2
 13111                           intcon2	equ	0xFF1
 13112                           indf0	equ	0xFEF
 13113                           postinc0	equ	0xFEE
 13114                           fsr0h	equ	0xFEA
 13115                           fsr0l	equ	0xFE9
 13116                           wreg	equ	0xFE8
 13117                           indf1	equ	0xFE7
 13118                           fsr1h	equ	0xFE2
 13119                           fsr1l	equ	0xFE1
 13120                           indf2	equ	0xFDF
 13121                           postinc2	equ	0xFDE
 13122                           postdec2	equ	0xFDD
 13123                           fsr2h	equ	0xFDA
 13124                           fsr2l	equ	0xFD9
 13125                           status	equ	0xFD8
 13126                           
 13127 ;; *************** function _I2C1_DataReady *****************
 13128 ;; Defined at:
 13129 ;;		line 203 in file "mcc_generated_files/i2c1.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;		None
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;		None
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  1    wreg      unsigned char 
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13147 ;;Total ram usage:        0 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    4
 13150 ;; This function calls:
 13151 ;;		Nothing
 13152 ;; This function is called by:
 13153 ;;		_I2C_GetNewMessages
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           	psect	text87
 13158  004098                     __ptext87:
 13159                           	opt stack 0
 13160  004098                     _I2C1_DataReady:
 13161                           	opt stack 25
 13162                           
 13163                           ;i2c1.c: 205: return (I2C_Input.outPointer != I2C_Input.inPointer);
 13164                           
 13165                           ;incstack = 0
 13166  004098  0102               	movlb	2	; () banked
 13167  00409A  5100               	movf	_I2C_Input& (0+255),w,b
 13168  00409C  0102               	movlb	2	; () banked
 13169  00409E  1901               	xorwf	(_I2C_Input+1)& (0+255),w,b
 13170  0040A0  B4D8               	btfsc	status,2,c
 13171  0040A2  D002               	goto	u3550
 13172  0040A4  0E01               	movlw	1
 13173  0040A6  0012               	return	
 13174  0040A8                     u3550:
 13175  0040A8  0E00               	movlw	0
 13176  0040AA  0012               	return	
 13177  0040AC                     __end_of_I2C1_DataReady:
 13178                           	opt stack 0
 13179                           tblptru	equ	0xFF8
 13180                           tblptrh	equ	0xFF7
 13181                           tblptrl	equ	0xFF6
 13182                           tablat	equ	0xFF5
 13183                           prodh	equ	0xFF4
 13184                           prodl	equ	0xFF3
 13185                           intcon	equ	0xFF2
 13186                           intcon2	equ	0xFF1
 13187                           indf0	equ	0xFEF
 13188                           postinc0	equ	0xFEE
 13189                           fsr0h	equ	0xFEA
 13190                           fsr0l	equ	0xFE9
 13191                           wreg	equ	0xFE8
 13192                           indf1	equ	0xFE7
 13193                           fsr1h	equ	0xFE2
 13194                           fsr1l	equ	0xFE1
 13195                           indf2	equ	0xFDF
 13196                           postinc2	equ	0xFDE
 13197                           postdec2	equ	0xFDD
 13198                           fsr2h	equ	0xFDA
 13199                           fsr2l	equ	0xFD9
 13200                           status	equ	0xFD8
 13201                           
 13202 ;; *************** function _INTERRUPT_InterruptManager *****************
 13203 ;; Defined at:
 13204 ;;		line 75 in file "mcc_generated_files/interrupt_manager.c"
 13205 ;; Parameters:    Size  Location     Type
 13206 ;;		None
 13207 ;; Auto vars:     Size  Location     Type
 13208 ;;		None
 13209 ;; Return value:  Size  Location     Type
 13210 ;;                  1    wreg      void 
 13211 ;; Registers used:
 13212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 13213 ;; Tracked objects:
 13214 ;;		On entry : 0/0
 13215 ;;		On exit  : 0/0
 13216 ;;		Unchanged: 0/0
 13217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13220 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13221 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13222 ;;Total ram usage:       14 bytes
 13223 ;; Hardware stack levels used:    1
 13224 ;; Hardware stack levels required when called:    3
 13225 ;; This function calls:
 13226 ;;		_EUSART1_Receive_ISR
 13227 ;;		_EUSART1_Transmit_ISR
 13228 ;;		_I2C1_ISR
 13229 ;;		_TMR2_ISR
 13230 ;;		_TMR4_ISR
 13231 ;; This function is called by:
 13232 ;;		Interrupt level 2
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           	psect	intcode
 13237  000008                     __pintcode:
 13238                           	opt stack 0
 13239  000008                     _INTERRUPT_InterruptManager:
 13240                           	opt stack 17
 13241                           
 13242                           ; BSR set to: 2
 13243                           ;incstack = 0
 13244  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13245  00000A  CFFA F003          	movff	pclath,??_INTERRUPT_InterruptManager
 13246  00000E  CFFB F004          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 13247  000012  CFE9 F005          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 13248  000016  CFEA F006          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 13249  00001A  CFE1 F007          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 13250  00001E  CFE2 F008          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 13251  000022  CFD9 F009          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 13252  000026  CFDA F00A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 13253  00002A  CFF3 F00B          	movff	prodl,??_INTERRUPT_InterruptManager+8
 13254  00002E  CFF4 F00C          	movff	prodh,??_INTERRUPT_InterruptManager+9
 13255  000032  CFF6 F00D          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 13256  000036  CFF7 F00E          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 13257  00003A  CFF8 F00F          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 13258  00003E  CFF5 F010          	movff	tablat,??_INTERRUPT_InterruptManager+13
 13259                           
 13260                           ;interrupt_manager.c: 78: if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bits.SS
      +                          P1IF == 1)
 13261  000042  BCF2               	btfsc	intcon,6,c	;volatile
 13262  000044  A69D               	btfss	3997,3,c	;volatile
 13263  000046  D003               	goto	i2l5890
 13264  000048  B69E               	btfsc	3998,3,c	;volatile
 13265                           
 13266                           ;interrupt_manager.c: 79: {
 13267                           ;interrupt_manager.c: 80: I2C1_ISR();
 13268  00004A  EC32  F01D         	call	_I2C1_ISR	;wreg free
 13269  00004E                     i2l5890:
 13270                           
 13271                           ;interrupt_manager.c: 81: }
 13272                           ;interrupt_manager.c: 82: if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bits.TX1
      +                          IF == 1)
 13273  00004E  BCF2               	btfsc	intcon,6,c	;volatile
 13274  000050  A89D               	btfss	3997,4,c	;volatile
 13275  000052  D003               	goto	i2l5898
 13276  000054  B89E               	btfsc	3998,4,c	;volatile
 13277                           
 13278                           ;interrupt_manager.c: 83: {
 13279                           ;interrupt_manager.c: 84: EUSART1_Transmit_ISR();
 13280  000056  EC51  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 13281  00005A                     i2l5898:
 13282                           
 13283                           ;interrupt_manager.c: 85: }
 13284                           ;interrupt_manager.c: 86: if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bits.RC1
      +                          IF == 1)
 13285  00005A  BCF2               	btfsc	intcon,6,c	;volatile
 13286  00005C  AA9D               	btfss	3997,5,c	;volatile
 13287  00005E  D003               	goto	i2l5906
 13288  000060  BA9E               	btfsc	3998,5,c	;volatile
 13289                           
 13290                           ;interrupt_manager.c: 87: {
 13291                           ;interrupt_manager.c: 88: EUSART1_Receive_ISR();
 13292  000062  ECC8  F01E         	call	_EUSART1_Receive_ISR	;wreg free
 13293  000066                     i2l5906:
 13294                           
 13295                           ;interrupt_manager.c: 89: }
 13296                           ;interrupt_manager.c: 90: if(INTCONbits.PEIE == 1 && PIE5bits.TMR4IE == 1 && PIR5bits.TM
      +                          R4IF == 1)
 13297  000066  BCF2               	btfsc	intcon,6,c	;volatile
 13298  000068  A07D               	btfss	3965,0,c	;volatile
 13299  00006A  D003               	goto	i2l5914
 13300  00006C  B07E               	btfsc	3966,0,c	;volatile
 13301                           
 13302                           ;interrupt_manager.c: 91: {
 13303                           ;interrupt_manager.c: 92: TMR4_ISR();
 13304  00006E  EC97  F020         	call	_TMR4_ISR	;wreg free
 13305  000072                     i2l5914:
 13306                           
 13307                           ;interrupt_manager.c: 93: }
 13308                           ;interrupt_manager.c: 94: if(INTCONbits.PEIE == 1 && PIE1bits.TMR2IE == 1 && PIR1bits.TM
      +                          R2IF == 1)
 13309  000072  BCF2               	btfsc	intcon,6,c	;volatile
 13310  000074  A29D               	btfss	3997,1,c	;volatile
 13311  000076  D003               	goto	i2l228
 13312  000078  B29E               	btfsc	3998,1,c	;volatile
 13313                           
 13314                           ;interrupt_manager.c: 95: {
 13315                           ;interrupt_manager.c: 96: TMR2_ISR();
 13316  00007A  EC9B  F020         	call	_TMR2_ISR	;wreg free
 13317  00007E                     i2l228:
 13318  00007E  C010  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 13319  000082  C00F  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 13320  000086  C00E  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 13321  00008A  C00D  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 13322  00008E  C00C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 13323  000092  C00B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 13324  000096  C00A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 13325  00009A  C009  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 13326  00009E  C008  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 13327  0000A2  C007  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 13328  0000A6  C006  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 13329  0000AA  C005  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 13330  0000AE  C004  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 13331  0000B2  C003  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 13332  0000B6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13333  0000B8  0011               	retfie		f
 13334  0000BA                     __end_of_INTERRUPT_InterruptManager:
 13335                           	opt stack 0
 13336                           pclatu	equ	0xFFB
 13337                           pclath	equ	0xFFA
 13338                           tblptru	equ	0xFF8
 13339                           tblptrh	equ	0xFF7
 13340                           tblptrl	equ	0xFF6
 13341                           tablat	equ	0xFF5
 13342                           prodh	equ	0xFF4
 13343                           prodl	equ	0xFF3
 13344                           intcon	equ	0xFF2
 13345                           intcon2	equ	0xFF1
 13346                           indf0	equ	0xFEF
 13347                           postinc0	equ	0xFEE
 13348                           fsr0h	equ	0xFEA
 13349                           fsr0l	equ	0xFE9
 13350                           wreg	equ	0xFE8
 13351                           indf1	equ	0xFE7
 13352                           fsr1h	equ	0xFE2
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function _TMR4_ISR *****************
 13362 ;; Defined at:
 13363 ;;		line 115 in file "mcc_generated_files/tmr4.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;		None
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;		None
 13368 ;; Return value:  Size  Location     Type
 13369 ;;                  1    wreg      void 
 13370 ;; Registers used:
 13371 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13372 ;; Tracked objects:
 13373 ;;		On entry : 0/0
 13374 ;;		On exit  : 0/0
 13375 ;;		Unchanged: 0/0
 13376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;Total ram usage:        0 bytes
 13382 ;; Hardware stack levels used:    1
 13383 ;; Hardware stack levels required when called:    2
 13384 ;; This function calls:
 13385 ;;		_TMR4_CallBack
 13386 ;; This function is called by:
 13387 ;;		_INTERRUPT_InterruptManager
 13388 ;; This function uses a non-reentrant model
 13389 ;;
 13390                           
 13391                           	psect	text89
 13392  00412E                     __ptext89:
 13393                           	opt stack 0
 13394  00412E                     _TMR4_ISR:
 13395                           	opt stack 17
 13396                           
 13397                           ;tmr4.c: 119: PIR5bits.TMR4IF = 0;
 13398                           
 13399                           ;incstack = 0
 13400  00412E  907E               	bcf	3966,0,c	;volatile
 13401                           
 13402                           ;tmr4.c: 123: TMR4_CallBack();
 13403  004130  EC74  F01F         	call	_TMR4_CallBack	;wreg free
 13404  004134  0012               	return		;funcret
 13405  004136                     __end_of_TMR4_ISR:
 13406                           	opt stack 0
 13407                           pclatu	equ	0xFFB
 13408                           pclath	equ	0xFFA
 13409                           tblptru	equ	0xFF8
 13410                           tblptrh	equ	0xFF7
 13411                           tblptrl	equ	0xFF6
 13412                           tablat	equ	0xFF5
 13413                           prodh	equ	0xFF4
 13414                           prodl	equ	0xFF3
 13415                           intcon	equ	0xFF2
 13416                           intcon2	equ	0xFF1
 13417                           indf0	equ	0xFEF
 13418                           postinc0	equ	0xFEE
 13419                           fsr0h	equ	0xFEA
 13420                           fsr0l	equ	0xFE9
 13421                           wreg	equ	0xFE8
 13422                           indf1	equ	0xFE7
 13423                           fsr1h	equ	0xFE2
 13424                           fsr1l	equ	0xFE1
 13425                           indf2	equ	0xFDF
 13426                           postinc2	equ	0xFDE
 13427                           postdec2	equ	0xFDD
 13428                           fsr2h	equ	0xFDA
 13429                           fsr2l	equ	0xFD9
 13430                           status	equ	0xFD8
 13431                           
 13432 ;; *************** function _TMR4_CallBack *****************
 13433 ;; Defined at:
 13434 ;;		line 126 in file "mcc_generated_files/tmr4.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;		None
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13452 ;;Total ram usage:        0 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    1
 13455 ;; This function calls:
 13456 ;;		Absolute function
 13457 ;;		_TMR4_DefaultInterruptHandler
 13458 ;;		_Timer4Tick
 13459 ;; This function is called by:
 13460 ;;		_TMR4_ISR
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           	psect	text90
 13465  003EE8                     __ptext90:
 13466                           	opt stack 0
 13467  003EE8                     _TMR4_CallBack:
 13468                           	opt stack 17
 13469                           
 13470                           ;tmr4.c: 130: if(TMR4_InterruptHandler)
 13471                           
 13472                           ;incstack = 0
 13473  003EE8  0100               	movlb	0	; () banked
 13474  003EEA  51FA               	movf	_TMR4_InterruptHandler& (0+255),w,b
 13475  003EEC  0100               	movlb	0	; () banked
 13476  003EEE  11FB               	iorwf	(_TMR4_InterruptHandler+1)& (0+255),w,b
 13477  003EF0  B4D8               	btfsc	status,2,c
 13478  003EF2  0012               	return	
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;tmr4.c: 131: {
 13482                           ;tmr4.c: 132: TMR4_InterruptHandler();
 13483  003EF4  D801               	call	i2u349_48
 13484  003EF6  0012               	return	
 13485  003EF8                     i2u349_48:
 13486  003EF8  0005               	push	
 13487  003EFA  6EFA               	movwf	pclath,c
 13488  003EFC  0100               	movlb	0	; () banked
 13489  003EFE  51FA               	movf	_TMR4_InterruptHandler& (0+255),w,b
 13490  003F00  6EFD               	movwf	tosl,c
 13491  003F02  51FB               	movf	(_TMR4_InterruptHandler+1)& (0+255),w,b
 13492  003F04  6EFE               	movwf	tosh,c
 13493  003F06  6AFF               	clrf	tosu,c
 13494  003F08  50FA               	movf	pclath,w,c
 13495  003F0A  0012               	return		;indir
 13496  003F0C                     __end_of_TMR4_CallBack:
 13497                           	opt stack 0
 13498                           tosu	equ	0xFFF
 13499                           tosh	equ	0xFFE
 13500                           tosl	equ	0xFFD
 13501                           pclatu	equ	0xFFB
 13502                           pclath	equ	0xFFA
 13503                           tblptru	equ	0xFF8
 13504                           tblptrh	equ	0xFF7
 13505                           tblptrl	equ	0xFF6
 13506                           tablat	equ	0xFF5
 13507                           prodh	equ	0xFF4
 13508                           prodl	equ	0xFF3
 13509                           intcon	equ	0xFF2
 13510                           intcon2	equ	0xFF1
 13511                           indf0	equ	0xFEF
 13512                           postinc0	equ	0xFEE
 13513                           fsr0h	equ	0xFEA
 13514                           fsr0l	equ	0xFE9
 13515                           wreg	equ	0xFE8
 13516                           indf1	equ	0xFE7
 13517                           fsr1h	equ	0xFE2
 13518                           fsr1l	equ	0xFE1
 13519                           indf2	equ	0xFDF
 13520                           postinc2	equ	0xFDE
 13521                           postdec2	equ	0xFDD
 13522                           fsr2h	equ	0xFDA
 13523                           fsr2l	equ	0xFD9
 13524                           status	equ	0xFD8
 13525                           
 13526 ;; *************** function _TMR4_DefaultInterruptHandler *****************
 13527 ;; Defined at:
 13528 ;;		line 140 in file "mcc_generated_files/tmr4.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;		None
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;		None
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      void 
 13535 ;; Registers used:
 13536 ;;		None
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;Total ram usage:        0 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_TMR4_Initialize
 13552 ;;		_TMR4_CallBack
 13553 ;; This function uses a non-reentrant model
 13554 ;;
 13555                           
 13556                           	psect	text91
 13557  004152                     __ptext91:
 13558                           	opt stack 0
 13559  004152                     _TMR4_DefaultInterruptHandler:
 13560                           	opt stack 17
 13561                           
 13562                           ;incstack = 0
 13563  004152  0012               	return		;funcret
 13564  004154                     __end_of_TMR4_DefaultInterruptHandler:
 13565                           	opt stack 0
 13566                           tosu	equ	0xFFF
 13567                           tosh	equ	0xFFE
 13568                           tosl	equ	0xFFD
 13569                           pclatu	equ	0xFFB
 13570                           pclath	equ	0xFFA
 13571                           tblptru	equ	0xFF8
 13572                           tblptrh	equ	0xFF7
 13573                           tblptrl	equ	0xFF6
 13574                           tablat	equ	0xFF5
 13575                           prodh	equ	0xFF4
 13576                           prodl	equ	0xFF3
 13577                           intcon	equ	0xFF2
 13578                           intcon2	equ	0xFF1
 13579                           indf0	equ	0xFEF
 13580                           postinc0	equ	0xFEE
 13581                           fsr0h	equ	0xFEA
 13582                           fsr0l	equ	0xFE9
 13583                           wreg	equ	0xFE8
 13584                           indf1	equ	0xFE7
 13585                           fsr1h	equ	0xFE2
 13586                           fsr1l	equ	0xFE1
 13587                           indf2	equ	0xFDF
 13588                           postinc2	equ	0xFDE
 13589                           postdec2	equ	0xFDD
 13590                           fsr2h	equ	0xFDA
 13591                           fsr2l	equ	0xFD9
 13592                           status	equ	0xFD8
 13593                           
 13594 ;; *************** function _Timer4Tick *****************
 13595 ;; Defined at:
 13596 ;;		line 175 in file "tasks.c"
 13597 ;; Parameters:    Size  Location     Type
 13598 ;;		None
 13599 ;; Auto vars:     Size  Location     Type
 13600 ;;		None
 13601 ;; Return value:  Size  Location     Type
 13602 ;;                  1    wreg      void 
 13603 ;; Registers used:
 13604 ;;		wreg, status,2, status,0
 13605 ;; Tracked objects:
 13606 ;;		On entry : 0/0
 13607 ;;		On exit  : 0/0
 13608 ;;		Unchanged: 0/0
 13609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13614 ;;Total ram usage:        0 bytes
 13615 ;; Hardware stack levels used:    1
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		_InitTasks
 13620 ;;		_TMR4_CallBack
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624                           	psect	text92
 13625  003D64                     __ptext92:
 13626                           	opt stack 0
 13627  003D64                     _Timer4Tick:
 13628                           	opt stack 17
 13629                           
 13630                           ;tasks.c: 177: static unsigned int led_toggle_counter;
 13631                           ;tasks.c: 178: if (++led_toggle_counter > 5 * 100)
 13632                           
 13633                           ;incstack = 0
 13634  003D64  0100               	movlb	0	; () banked
 13635  003D66  4BC2               	infsnz	Timer4Tick@led_toggle_counter& (0+255),f,b
 13636  003D68  2BC3               	incf	(Timer4Tick@led_toggle_counter+1)& (0+255),f,b
 13637  003D6A  0EF5               	movlw	245
 13638  003D6C  0100               	movlb	0	; () banked
 13639  003D6E  5DC2               	subwf	Timer4Tick@led_toggle_counter& (0+255),w,b
 13640  003D70  0E01               	movlw	1
 13641  003D72  0100               	movlb	0	; () banked
 13642  003D74  59C3               	subwfb	(Timer4Tick@led_toggle_counter+1)& (0+255),w,b
 13643  003D76  A0D8               	btfss	status,0,c
 13644  003D78  0012               	return	
 13645                           
 13646                           ; BSR set to: 0
 13647                           
 13648                           ;tasks.c: 179: {
 13649                           ;tasks.c: 180: do { LATA0 = ~LATA0; } while(0);
 13650  003D7A  B089               	btfsc	3977,0,c	;volatile
 13651  003D7C  D002               	goto	i2u317_40
 13652  003D7E  8089               	bsf	3977,0,c	;volatile
 13653  003D80  D001               	goto	i2l5074
 13654  003D82                     i2u317_40:
 13655  003D82  9089               	bcf	3977,0,c	;volatile
 13656  003D84                     i2l5074:
 13657                           
 13658                           ;tasks.c: 181: led_toggle_counter = 0;
 13659  003D84  0E00               	movlw	0
 13660  003D86  0100               	movlb	0	; () banked
 13661  003D88  6FC3               	movwf	(Timer4Tick@led_toggle_counter+1)& (0+255),b
 13662  003D8A  0E00               	movlw	0
 13663  003D8C  6FC2               	movwf	Timer4Tick@led_toggle_counter& (0+255),b
 13664  003D8E  0012               	return	
 13665  003D90                     __end_of_Timer4Tick:
 13666                           	opt stack 0
 13667                           tosu	equ	0xFFF
 13668                           tosh	equ	0xFFE
 13669                           tosl	equ	0xFFD
 13670                           pclatu	equ	0xFFB
 13671                           pclath	equ	0xFFA
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           intcon2	equ	0xFF1
 13680                           indf0	equ	0xFEF
 13681                           postinc0	equ	0xFEE
 13682                           fsr0h	equ	0xFEA
 13683                           fsr0l	equ	0xFE9
 13684                           wreg	equ	0xFE8
 13685                           indf1	equ	0xFE7
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function _TMR2_ISR *****************
 13696 ;; Defined at:
 13697 ;;		line 115 in file "mcc_generated_files/tmr2.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;		None
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;		None
 13702 ;; Return value:  Size  Location     Type
 13703 ;;                  1    wreg      void 
 13704 ;; Registers used:
 13705 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13706 ;; Tracked objects:
 13707 ;;		On entry : 0/0
 13708 ;;		On exit  : 0/0
 13709 ;;		Unchanged: 0/0
 13710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13715 ;;Total ram usage:        0 bytes
 13716 ;; Hardware stack levels used:    1
 13717 ;; Hardware stack levels required when called:    2
 13718 ;; This function calls:
 13719 ;;		_TMR2_CallBack
 13720 ;; This function is called by:
 13721 ;;		_INTERRUPT_InterruptManager
 13722 ;; This function uses a non-reentrant model
 13723 ;;
 13724                           
 13725                           	psect	text93
 13726  004136                     __ptext93:
 13727                           	opt stack 0
 13728  004136                     _TMR2_ISR:
 13729                           	opt stack 17
 13730                           
 13731                           ;tmr2.c: 119: PIR1bits.TMR2IF = 0;
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;incstack = 0
 13735  004136  929E               	bcf	3998,1,c	;volatile
 13736                           
 13737                           ;tmr2.c: 123: TMR2_CallBack();
 13738  004138  EC86  F01F         	call	_TMR2_CallBack	;wreg free
 13739  00413C  0012               	return		;funcret
 13740  00413E                     __end_of_TMR2_ISR:
 13741                           	opt stack 0
 13742                           tosu	equ	0xFFF
 13743                           tosh	equ	0xFFE
 13744                           tosl	equ	0xFFD
 13745                           pclatu	equ	0xFFB
 13746                           pclath	equ	0xFFA
 13747                           tblptru	equ	0xFF8
 13748                           tblptrh	equ	0xFF7
 13749                           tblptrl	equ	0xFF6
 13750                           tablat	equ	0xFF5
 13751                           prodh	equ	0xFF4
 13752                           prodl	equ	0xFF3
 13753                           intcon	equ	0xFF2
 13754                           intcon2	equ	0xFF1
 13755                           indf0	equ	0xFEF
 13756                           postinc0	equ	0xFEE
 13757                           fsr0h	equ	0xFEA
 13758                           fsr0l	equ	0xFE9
 13759                           wreg	equ	0xFE8
 13760                           indf1	equ	0xFE7
 13761                           fsr1h	equ	0xFE2
 13762                           fsr1l	equ	0xFE1
 13763                           indf2	equ	0xFDF
 13764                           postinc2	equ	0xFDE
 13765                           postdec2	equ	0xFDD
 13766                           fsr2h	equ	0xFDA
 13767                           fsr2l	equ	0xFD9
 13768                           status	equ	0xFD8
 13769                           
 13770 ;; *************** function _TMR2_CallBack *****************
 13771 ;; Defined at:
 13772 ;;		line 126 in file "mcc_generated_files/tmr2.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;		None
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  1    wreg      void 
 13779 ;; Registers used:
 13780 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13790 ;;Total ram usage:        0 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    1
 13793 ;; This function calls:
 13794 ;;		Absolute function
 13795 ;;		_TMR2_DefaultInterruptHandler
 13796 ;;		_Timer2Tick
 13797 ;; This function is called by:
 13798 ;;		_TMR2_ISR
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           	psect	text94
 13803  003F0C                     __ptext94:
 13804                           	opt stack 0
 13805  003F0C                     _TMR2_CallBack:
 13806                           	opt stack 17
 13807                           
 13808                           ;tmr2.c: 130: if(TMR2_InterruptHandler)
 13809                           
 13810                           ;incstack = 0
 13811  003F0C  0100               	movlb	0	; () banked
 13812  003F0E  51FC               	movf	_TMR2_InterruptHandler& (0+255),w,b
 13813  003F10  0100               	movlb	0	; () banked
 13814  003F12  11FD               	iorwf	(_TMR2_InterruptHandler+1)& (0+255),w,b
 13815  003F14  B4D8               	btfsc	status,2,c
 13816  003F16  0012               	return	
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;tmr2.c: 131: {
 13820                           ;tmr2.c: 132: TMR2_InterruptHandler();
 13821  003F18  D801               	call	i2u345_48
 13822  003F1A  0012               	return	
 13823  003F1C                     i2u345_48:
 13824  003F1C  0005               	push	
 13825  003F1E  6EFA               	movwf	pclath,c
 13826  003F20  0100               	movlb	0	; () banked
 13827  003F22  51FC               	movf	_TMR2_InterruptHandler& (0+255),w,b
 13828  003F24  6EFD               	movwf	tosl,c
 13829  003F26  51FD               	movf	(_TMR2_InterruptHandler+1)& (0+255),w,b
 13830  003F28  6EFE               	movwf	tosh,c
 13831  003F2A  6AFF               	clrf	tosu,c
 13832  003F2C  50FA               	movf	pclath,w,c
 13833  003F2E  0012               	return		;indir
 13834  003F30                     __end_of_TMR2_CallBack:
 13835                           	opt stack 0
 13836                           tosu	equ	0xFFF
 13837                           tosh	equ	0xFFE
 13838                           tosl	equ	0xFFD
 13839                           pclatu	equ	0xFFB
 13840                           pclath	equ	0xFFA
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           intcon	equ	0xFF2
 13848                           intcon2	equ	0xFF1
 13849                           indf0	equ	0xFEF
 13850                           postinc0	equ	0xFEE
 13851                           fsr0h	equ	0xFEA
 13852                           fsr0l	equ	0xFE9
 13853                           wreg	equ	0xFE8
 13854                           indf1	equ	0xFE7
 13855                           fsr1h	equ	0xFE2
 13856                           fsr1l	equ	0xFE1
 13857                           indf2	equ	0xFDF
 13858                           postinc2	equ	0xFDE
 13859                           postdec2	equ	0xFDD
 13860                           fsr2h	equ	0xFDA
 13861                           fsr2l	equ	0xFD9
 13862                           status	equ	0xFD8
 13863                           
 13864 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13865 ;; Defined at:
 13866 ;;		line 140 in file "mcc_generated_files/tmr2.c"
 13867 ;; Parameters:    Size  Location     Type
 13868 ;;		None
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;		None
 13871 ;; Return value:  Size  Location     Type
 13872 ;;                  1    wreg      void 
 13873 ;; Registers used:
 13874 ;;		None
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;Total ram usage:        0 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; This function calls:
 13887 ;;		Nothing
 13888 ;; This function is called by:
 13889 ;;		_TMR2_Initialize
 13890 ;;		_TMR2_CallBack
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           	psect	text95
 13895  004154                     __ptext95:
 13896                           	opt stack 0
 13897  004154                     _TMR2_DefaultInterruptHandler:
 13898                           	opt stack 17
 13899                           
 13900                           ;incstack = 0
 13901  004154  0012               	return		;funcret
 13902  004156                     __end_of_TMR2_DefaultInterruptHandler:
 13903                           	opt stack 0
 13904                           tosu	equ	0xFFF
 13905                           tosh	equ	0xFFE
 13906                           tosl	equ	0xFFD
 13907                           pclatu	equ	0xFFB
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           intcon2	equ	0xFF1
 13917                           indf0	equ	0xFEF
 13918                           postinc0	equ	0xFEE
 13919                           fsr0h	equ	0xFEA
 13920                           fsr0l	equ	0xFE9
 13921                           wreg	equ	0xFE8
 13922                           indf1	equ	0xFE7
 13923                           fsr1h	equ	0xFE2
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function _Timer2Tick *****************
 13933 ;; Defined at:
 13934 ;;		line 151 in file "tasks.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;		None
 13937 ;; Auto vars:     Size  Location     Type
 13938 ;;		None
 13939 ;; Return value:  Size  Location     Type
 13940 ;;                  1    wreg      void 
 13941 ;; Registers used:
 13942 ;;		wreg, status,2, status,0
 13943 ;; Tracked objects:
 13944 ;;		On entry : 0/0
 13945 ;;		On exit  : 0/0
 13946 ;;		Unchanged: 0/0
 13947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;Total ram usage:        0 bytes
 13953 ;; Hardware stack levels used:    1
 13954 ;; This function calls:
 13955 ;;		Nothing
 13956 ;; This function is called by:
 13957 ;;		_InitTasks
 13958 ;;		_TMR2_CallBack
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text96
 13963  0040BE                     __ptext96:
 13964                           	opt stack 0
 13965  0040BE                     _Timer2Tick:
 13966                           	opt stack 17
 13967                           
 13968                           ;tasks.c: 153: DividerTaskCounter++;
 13969                           
 13970                           ;incstack = 0
 13971  0040BE  0100               	movlb	0	; () banked
 13972  0040C0  4BC6               	infsnz	_DividerTaskCounter& (0+255),f,b
 13973  0040C2  2BC7               	incf	(_DividerTaskCounter+1)& (0+255),f,b
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;tasks.c: 154: DelayTimerTicked = 1;
 13977  0040C4  0E01               	movlw	1
 13978  0040C6  0100               	movlb	0	; () banked
 13979  0040C8  6FC9               	movwf	_DelayTimerTicked& (0+255),b
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;tasks.c: 155: MotorTimerTicked = 1;
 13983  0040CA  0E01               	movlw	1
 13984  0040CC  6E46               	movwf	_MotorTimerTicked,c
 13985                           
 13986                           ; BSR set to: 0
 13987  0040CE  0012               	return		;funcret
 13988  0040D0                     __end_of_Timer2Tick:
 13989                           	opt stack 0
 13990                           tosu	equ	0xFFF
 13991                           tosh	equ	0xFFE
 13992                           tosl	equ	0xFFD
 13993                           pclatu	equ	0xFFB
 13994                           pclath	equ	0xFFA
 13995                           tblptru	equ	0xFF8
 13996                           tblptrh	equ	0xFF7
 13997                           tblptrl	equ	0xFF6
 13998                           tablat	equ	0xFF5
 13999                           prodh	equ	0xFF4
 14000                           prodl	equ	0xFF3
 14001                           intcon	equ	0xFF2
 14002                           intcon2	equ	0xFF1
 14003                           indf0	equ	0xFEF
 14004                           postinc0	equ	0xFEE
 14005                           fsr0h	equ	0xFEA
 14006                           fsr0l	equ	0xFE9
 14007                           wreg	equ	0xFE8
 14008                           indf1	equ	0xFE7
 14009                           fsr1h	equ	0xFE2
 14010                           fsr1l	equ	0xFE1
 14011                           indf2	equ	0xFDF
 14012                           postinc2	equ	0xFDE
 14013                           postdec2	equ	0xFDD
 14014                           fsr2h	equ	0xFDA
 14015                           fsr2l	equ	0xFD9
 14016                           status	equ	0xFD8
 14017                           
 14018 ;; *************** function _I2C1_ISR *****************
 14019 ;; Defined at:
 14020 ;;		line 111 in file "mcc_generated_files/i2c1.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;		None
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;  i2c_data        1    1[COMRAM] unsigned char 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;Total ram usage:        1 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    1
 14041 ;; This function calls:
 14042 ;;		_I2C1_StatusCallback
 14043 ;; This function is called by:
 14044 ;;		_INTERRUPT_InterruptManager
 14045 ;; This function uses a non-reentrant model
 14046 ;;
 14047                           
 14048                           	psect	text97
 14049  003A64                     __ptext97:
 14050                           	opt stack 0
 14051  003A64                     _I2C1_ISR:
 14052                           	opt stack 18
 14053                           
 14054                           ;i2c1.c: 113: uint8_t i2c_data = 0x55;
 14055                           
 14056                           ; BSR set to: 0
 14057                           ;incstack = 0
 14058  003A64  0E55               	movlw	85
 14059  003A66  6E02               	movwf	I2C1_ISR@i2c_data,c
 14060                           
 14061                           ;i2c1.c: 117: PIR1bits.SSP1IF = 0;
 14062  003A68  969E               	bcf	3998,3,c	;volatile
 14063                           
 14064                           ;i2c1.c: 118: i2c_data = SSP1BUF;
 14065  003A6A  CFC9 F002          	movff	4041,I2C1_ISR@i2c_data	;volatile
 14066                           
 14067                           ;i2c1.c: 119: if(1 == SSP1STATbits.R_nW)
 14068  003A6E  A4C7               	btfss	4039,2,c	;volatile
 14069  003A70  D00B               	goto	i2l445
 14070                           
 14071                           ;i2c1.c: 120: {
 14072                           ;i2c1.c: 121: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
 14073  003A72  BAC7               	btfsc	4039,5,c	;volatile
 14074  003A74  ACC5               	btfss	4037,6,c	;volatile
 14075  003A76  D004               	goto	i2l5704
 14076                           
 14077                           ;i2c1.c: 122: {
 14078                           ;i2c1.c: 124: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
 14079  003A78  0E03               	movlw	3
 14080  003A7A  ECAB  F018         	call	_I2C1_StatusCallback
 14081                           
 14082                           ;i2c1.c: 125: }
 14083  003A7E  D011               	goto	i2l5712
 14084  003A80                     i2l5704:
 14085                           
 14086                           ;i2c1.c: 126: else
 14087                           ;i2c1.c: 127: {
 14088                           ;i2c1.c: 129: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
 14089  003A80  0E01               	movlw	1
 14090  003A82  ECAB  F018         	call	_I2C1_StatusCallback
 14091                           
 14092                           ;i2c1.c: 130: }
 14093                           ;i2c1.c: 131: }
 14094  003A86  D00D               	goto	i2l5712
 14095  003A88                     i2l445:
 14096                           
 14097                           ;i2c1.c: 132: else if(0 == SSP1STATbits.D_nA)
 14098  003A88  BAC7               	btfsc	4039,5,c	;volatile
 14099  003A8A  D006               	goto	i2l449
 14100                           
 14101                           ;i2c1.c: 133: {
 14102                           ;i2c1.c: 135: I2C1_targetAddress = i2c_data;
 14103  003A8C  C002  F04D         	movff	I2C1_ISR@i2c_data,_I2C1_targetAddress	;volatile
 14104                           
 14105                           ;i2c1.c: 138: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
 14106  003A90  0E00               	movlw	0
 14107  003A92  ECAB  F018         	call	_I2C1_StatusCallback
 14108                           
 14109                           ;i2c1.c: 139: }
 14110  003A96  D005               	goto	i2l5712
 14111  003A98                     i2l449:
 14112                           
 14113                           ;i2c1.c: 140: else
 14114                           ;i2c1.c: 141: {
 14115                           ;i2c1.c: 142: I2C1_slaveWriteData = i2c_data;
 14116  003A98  C002  F04E         	movff	I2C1_ISR@i2c_data,_I2C1_slaveWriteData	;volatile
 14117                           
 14118                           ;i2c1.c: 145: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
 14119  003A9C  0E02               	movlw	2
 14120  003A9E  ECAB  F018         	call	_I2C1_StatusCallback
 14121  003AA2                     i2l5712:
 14122                           
 14123                           ;i2c1.c: 146: }
 14124                           ;i2c1.c: 148: SSP1CON1bits.CKP = 1;
 14125  003AA2  88C6               	bsf	4038,4,c	;volatile
 14126  003AA4  0012               	return		;funcret
 14127  003AA6                     __end_of_I2C1_ISR:
 14128                           	opt stack 0
 14129                           tosu	equ	0xFFF
 14130                           tosh	equ	0xFFE
 14131                           tosl	equ	0xFFD
 14132                           pclatu	equ	0xFFB
 14133                           pclath	equ	0xFFA
 14134                           tblptru	equ	0xFF8
 14135                           tblptrh	equ	0xFF7
 14136                           tblptrl	equ	0xFF6
 14137                           tablat	equ	0xFF5
 14138                           prodh	equ	0xFF4
 14139                           prodl	equ	0xFF3
 14140                           intcon	equ	0xFF2
 14141                           intcon2	equ	0xFF1
 14142                           indf0	equ	0xFEF
 14143                           postinc0	equ	0xFEE
 14144                           fsr0h	equ	0xFEA
 14145                           fsr0l	equ	0xFE9
 14146                           wreg	equ	0xFE8
 14147                           indf1	equ	0xFE7
 14148                           fsr1h	equ	0xFE2
 14149                           fsr1l	equ	0xFE1
 14150                           indf2	equ	0xFDF
 14151                           postinc2	equ	0xFDE
 14152                           postdec2	equ	0xFDD
 14153                           fsr2h	equ	0xFDA
 14154                           fsr2l	equ	0xFD9
 14155                           status	equ	0xFD8
 14156                           
 14157 ;; *************** function _I2C1_StatusCallback *****************
 14158 ;; Defined at:
 14159 ;;		line 151 in file "mcc_generated_files/i2c1.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;  i2c_bus_stat    1    wreg     enum E6983
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;  i2c_bus_stat    1    0[COMRAM] enum E6983
 14164 ;; Return value:  Size  Location     Type
 14165 ;;                  1    wreg      void 
 14166 ;; Registers used:
 14167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;Total ram usage:        1 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		_I2C1_ISR
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           	psect	text98
 14187  003156                     __ptext98:
 14188                           	opt stack 0
 14189  003156                     _I2C1_StatusCallback:
 14190                           	opt stack 18
 14191                           
 14192                           ;incstack = 0
 14193                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
 14194  003156  6E01               	movwf	I2C1_StatusCallback@i2c_bus_state,c
 14195                           
 14196                           ;i2c1.c: 153: switch (i2c_bus_state)
 14197  003158  D045               	goto	i2l5502
 14198  00315A                     i2l5474:
 14199                           
 14200                           ;i2c1.c: 157: messageForMe = (I2C1_targetAddress == I2C_Address);
 14201  00315A  0100               	movlb	0	; () banked
 14202  00315C  51FE               	movf	_I2C_Address& (0+255),w,b
 14203  00315E  184D               	xorwf	_I2C1_targetAddress,w,c	;volatile
 14204  003160  A4D8               	btfss	status,2,c
 14205  003162  D002               	goto	i2u350_40
 14206  003164  0E01               	movlw	1
 14207  003166  D001               	goto	i2u351_40
 14208  003168                     i2u350_40:
 14209  003168  0E00               	movlw	0
 14210  00316A                     i2u351_40:
 14211  00316A  6E47               	movwf	_messageForMe,c
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;i2c1.c: 165: }
 14215                           ;i2c1.c: 166: break;
 14216                           
 14217                           ; BSR set to: 0
 14218                           
 14219                           ; BSR set to: 0
 14220                           ;i2c1.c: 162: }else{
 14221                           
 14222                           ; BSR set to: 0
 14223  00316C  0012               	return	
 14224  00316E                     i2l5480:
 14225                           
 14226                           ;i2c1.c: 169: if (messageForMe)
 14227  00316E  5047               	movf	_messageForMe,w,c
 14228  003170  B4D8               	btfsc	status,2,c
 14229  003172  0012               	return	
 14230                           
 14231                           ;i2c1.c: 170: {
 14232                           ;i2c1.c: 173: I2C_Input.Buffer[I2C_Input.inPointer] = I2C1_slaveWriteData;
 14233  003174  0102               	movlb	2	; () banked
 14234  003176  5100               	movf	_I2C_Input& (0+255),w,b
 14235  003178  0D01               	mullw	1
 14236  00317A  0E02               	movlw	low (_I2C_Input+2)
 14237  00317C  24F3               	addwf	prodl,w,c
 14238  00317E  6ED9               	movwf	fsr2l,c
 14239  003180  0E02               	movlw	high (_I2C_Input+2)
 14240  003182  20F4               	addwfc	prodh,w,c
 14241  003184  6EDA               	movwf	fsr2h,c
 14242  003186  C04E  FFDF         	movff	_I2C1_slaveWriteData,indf2	;volatile
 14243                           
 14244                           ; BSR set to: 2
 14245                           ;i2c1.c: 174: I2C_Input.inPointer = (I2C_Input.inPointer + 1) % 128;
 14246  00318A  0102               	movlb	2	; () banked
 14247  00318C  2900               	incf	_I2C_Input& (0+255),w,b
 14248  00318E  0B7F               	andlw	127
 14249  003190  0102               	movlb	2	; () banked
 14250  003192  6F00               	movwf	_I2C_Input& (0+255),b
 14251                           
 14252                           ; BSR set to: 2
 14253                           ;i2c1.c: 175: if (I2C1_slaveWriteData == 0x04) messageForMe = 0;
 14254  003194  0E04               	movlw	4
 14255  003196  184E               	xorwf	_I2C1_slaveWriteData,w,c	;volatile
 14256  003198  A4D8               	btfss	status,2,c
 14257  00319A  0012               	return	
 14258                           
 14259                           ; BSR set to: 2
 14260  00319C  0E00               	movlw	0
 14261  00319E  6E47               	movwf	_messageForMe,c
 14262                           
 14263                           ; BSR set to: 2
 14264                           ;i2c1.c: 176: }
 14265                           ;i2c1.c: 177: break;
 14266                           
 14267                           ; BSR set to: 2
 14268  0031A0  0012               	return	
 14269  0031A2                     i2l5490:
 14270                           
 14271                           ;i2c1.c: 180: if (I2C_Output.outPointer != I2C_Output.inPointer)
 14272  0031A2  0103               	movlb	3	; () banked
 14273  0031A4  5100               	movf	_I2C_Output& (0+255),w,b
 14274  0031A6  0103               	movlb	3	; () banked
 14275  0031A8  1901               	xorwf	(_I2C_Output+1)& (0+255),w,b
 14276  0031AA  B4D8               	btfsc	status,2,c
 14277  0031AC  D011               	goto	i2l5496
 14278                           
 14279                           ; BSR set to: 3
 14280                           ;i2c1.c: 181: {
 14281                           ;i2c1.c: 183: SSP1BUF = I2C_Output.Buffer[I2C_Output.outPointer];
 14282  0031AE  0103               	movlb	3	; () banked
 14283  0031B0  5101               	movf	(_I2C_Output+1)& (0+255),w,b
 14284  0031B2  0D01               	mullw	1
 14285  0031B4  0E02               	movlw	low (_I2C_Output+2)
 14286  0031B6  24F3               	addwf	prodl,w,c
 14287  0031B8  6ED9               	movwf	fsr2l,c
 14288  0031BA  0E03               	movlw	high (_I2C_Output+2)
 14289  0031BC  20F4               	addwfc	prodh,w,c
 14290  0031BE  6EDA               	movwf	fsr2h,c
 14291  0031C0  50DF               	movf	indf2,w,c
 14292  0031C2  6EC9               	movwf	4041,c	;volatile
 14293                           
 14294                           ; BSR set to: 3
 14295                           ;i2c1.c: 184: I2C_Output.outPointer = (I2C_Output.outPointer + 1) % 128;
 14296  0031C4  0103               	movlb	3	; () banked
 14297  0031C6  2901               	incf	(_I2C_Output+1)& (0+255),w,b
 14298  0031C8  0B7F               	andlw	127
 14299  0031CA  0103               	movlb	3	; () banked
 14300  0031CC  6F01               	movwf	(_I2C_Output+1)& (0+255),b
 14301                           
 14302                           ;i2c1.c: 185: }
 14303  0031CE  0012               	return	
 14304  0031D0                     i2l5496:
 14305                           
 14306                           ; BSR set to: 3
 14307                           ;i2c1.c: 186: else
 14308                           ;i2c1.c: 187: {
 14309                           ;i2c1.c: 190: SSP1BUF = 0x04;
 14310  0031D0  0E04               	movlw	4
 14311  0031D2  6EC9               	movwf	4041,c	;volatile
 14312                           
 14313                           ; BSR set to: 3
 14314                           ;i2c1.c: 191: }
 14315                           ;i2c1.c: 192: break;
 14316  0031D4  0012               	return	
 14317  0031D6                     i2l5498:
 14318                           
 14319                           ;i2c1.c: 195: Me.I2CMsgAvailable.Changed = 1;
 14320  0031D6  0E01               	movlw	1
 14321  0031D8  0101               	movlb	1	; () banked
 14322  0031DA  6FDC               	movwf	(_Me+220)& (0+255),b	;volatile
 14323                           
 14324                           ;i2c1.c: 196: Me.I2CMsgAvailable.Detecting = 0;
 14325  0031DC  0E00               	movlw	0
 14326  0031DE  0101               	movlb	1	; () banked
 14327  0031E0  6FDD               	movwf	(_Me+221)& (0+255),b	;volatile
 14328                           
 14329                           ; BSR set to: 1
 14330                           ;i2c1.c: 200: }
 14331                           
 14332                           ; BSR set to: 1
 14333                           ;i2c1.c: 199: break;
 14334                           
 14335                           ;i2c1.c: 198: default:
 14336                           
 14337                           ;i2c1.c: 197: break;
 14338  0031E2  0012               	return	
 14339  0031E4                     i2l5502:
 14340  0031E4  5001               	movf	I2C1_StatusCallback@i2c_bus_state,w,c
 14341                           
 14342                           ; Switch size 1, requested type "space"
 14343                           ; Number of cases is 4, Range of values is 0 to 3
 14344                           ; switch strategies available:
 14345                           ; Name         Instructions Cycles
 14346                           ; simple_byte           13     7 (average)
 14347                           ;	Chosen strategy is simple_byte
 14348  0031E6  0A00               	xorlw	0	; case 0
 14349  0031E8  B4D8               	btfsc	status,2,c
 14350  0031EA  D7B7               	goto	i2l5474
 14351  0031EC  0A01               	xorlw	1	; case 1
 14352  0031EE  B4D8               	btfsc	status,2,c
 14353  0031F0  D7D8               	goto	i2l5490
 14354  0031F2  0A03               	xorlw	3	; case 2
 14355  0031F4  B4D8               	btfsc	status,2,c
 14356  0031F6  D7BB               	goto	i2l5480
 14357  0031F8  0A01               	xorlw	1	; case 3
 14358  0031FA  A4D8               	btfss	status,2,c
 14359  0031FC  0012               	return	
 14360  0031FE  D7EB               	goto	i2l5498
 14361  003200                     __end_of_I2C1_StatusCallback:
 14362                           	opt stack 0
 14363                           tosu	equ	0xFFF
 14364                           tosh	equ	0xFFE
 14365                           tosl	equ	0xFFD
 14366                           pclatu	equ	0xFFB
 14367                           pclath	equ	0xFFA
 14368                           tblptru	equ	0xFF8
 14369                           tblptrh	equ	0xFF7
 14370                           tblptrl	equ	0xFF6
 14371                           tablat	equ	0xFF5
 14372                           prodh	equ	0xFF4
 14373                           prodl	equ	0xFF3
 14374                           intcon	equ	0xFF2
 14375                           intcon2	equ	0xFF1
 14376                           indf0	equ	0xFEF
 14377                           postinc0	equ	0xFEE
 14378                           fsr0h	equ	0xFEA
 14379                           fsr0l	equ	0xFE9
 14380                           wreg	equ	0xFE8
 14381                           indf1	equ	0xFE7
 14382                           fsr1h	equ	0xFE2
 14383                           fsr1l	equ	0xFE1
 14384                           indf2	equ	0xFDF
 14385                           postinc2	equ	0xFDE
 14386                           postdec2	equ	0xFDD
 14387                           fsr2h	equ	0xFDA
 14388                           fsr2l	equ	0xFD9
 14389                           status	equ	0xFD8
 14390                           
 14391 ;; *************** function _EUSART1_Transmit_ISR *****************
 14392 ;; Defined at:
 14393 ;;		line 169 in file "mcc_generated_files/eusart1.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;		None
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;		None
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      void 
 14400 ;; Registers used:
 14401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14402 ;; Tracked objects:
 14403 ;;		On entry : 0/0
 14404 ;;		On exit  : 0/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14411 ;;Total ram usage:        0 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; This function calls:
 14414 ;;		Nothing
 14415 ;; This function is called by:
 14416 ;;		_INTERRUPT_InterruptManager
 14417 ;; This function uses a non-reentrant model
 14418 ;;
 14419                           
 14420                           	psect	text99
 14421  003CA2                     __ptext99:
 14422                           	opt stack 0
 14423  003CA2                     _EUSART1_Transmit_ISR:
 14424                           	opt stack 19
 14425                           
 14426                           ;eusart1.c: 173: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 14427                           
 14428                           ;incstack = 0
 14429  003CA2  0E40               	movlw	64
 14430  003CA4  0100               	movlb	0	; () banked
 14431  003CA6  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 14432  003CA8  D013               	goto	i2l338
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;eusart1.c: 174: {
 14436                           ;eusart1.c: 175: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14437  003CAA  504B               	movf	_eusart1TxTail,w,c
 14438  003CAC  0D01               	mullw	1
 14439  003CAE  0E60               	movlw	low _eusart1TxBuffer
 14440  003CB0  24F3               	addwf	prodl,w,c
 14441  003CB2  6ED9               	movwf	fsr2l,c
 14442  003CB4  0E00               	movlw	high _eusart1TxBuffer
 14443  003CB6  20F4               	addwfc	prodh,w,c
 14444  003CB8  6EDA               	movwf	fsr2h,c
 14445  003CBA  50DF               	movf	indf2,w,c
 14446  003CBC  6EAD               	movwf	4013,c	;volatile
 14447                           
 14448                           ; BSR set to: 0
 14449  003CBE  2A4B               	incf	_eusart1TxTail,f,c
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;eusart1.c: 176: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 14453  003CC0  0E3F               	movlw	63
 14454  003CC2  644B               	cpfsgt	_eusart1TxTail,c
 14455  003CC4  D002               	goto	i2l5724
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;eusart1.c: 177: {
 14459                           ;eusart1.c: 178: eusart1TxTail = 0;
 14460  003CC6  0E00               	movlw	0
 14461  003CC8  6E4B               	movwf	_eusart1TxTail,c
 14462  003CCA                     i2l5724:
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;eusart1.c: 179: }
 14466                           ;eusart1.c: 180: eusart1TxBufferRemaining++;
 14467  003CCA  0100               	movlb	0	; () banked
 14468  003CCC  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 14469                           
 14470                           ;eusart1.c: 181: }
 14471  003CCE  0012               	return	
 14472  003CD0                     i2l338:
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;eusart1.c: 182: else
 14476                           ;eusart1.c: 183: {
 14477                           ;eusart1.c: 184: PIE1bits.TX1IE = 0;
 14478  003CD0  989D               	bcf	3997,4,c	;volatile
 14479  003CD2  0012               	return	
 14480  003CD4                     __end_of_EUSART1_Transmit_ISR:
 14481                           	opt stack 0
 14482                           tosu	equ	0xFFF
 14483                           tosh	equ	0xFFE
 14484                           tosl	equ	0xFFD
 14485                           pclatu	equ	0xFFB
 14486                           pclath	equ	0xFFA
 14487                           tblptru	equ	0xFF8
 14488                           tblptrh	equ	0xFF7
 14489                           tblptrl	equ	0xFF6
 14490                           tablat	equ	0xFF5
 14491                           prodh	equ	0xFF4
 14492                           prodl	equ	0xFF3
 14493                           intcon	equ	0xFF2
 14494                           intcon2	equ	0xFF1
 14495                           indf0	equ	0xFEF
 14496                           postinc0	equ	0xFEE
 14497                           fsr0h	equ	0xFEA
 14498                           fsr0l	equ	0xFE9
 14499                           wreg	equ	0xFE8
 14500                           indf1	equ	0xFE7
 14501                           fsr1h	equ	0xFE2
 14502                           fsr1l	equ	0xFE1
 14503                           indf2	equ	0xFDF
 14504                           postinc2	equ	0xFDE
 14505                           postdec2	equ	0xFDD
 14506                           fsr2h	equ	0xFDA
 14507                           fsr2l	equ	0xFD9
 14508                           status	equ	0xFD8
 14509                           
 14510 ;; *************** function _EUSART1_Receive_ISR *****************
 14511 ;; Defined at:
 14512 ;;		line 188 in file "mcc_generated_files/eusart1.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;		None
 14515 ;; Auto vars:     Size  Location     Type
 14516 ;;		None
 14517 ;; Return value:  Size  Location     Type
 14518 ;;                  1    wreg      void 
 14519 ;; Registers used:
 14520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14521 ;; Tracked objects:
 14522 ;;		On entry : 0/0
 14523 ;;		On exit  : 0/0
 14524 ;;		Unchanged: 0/0
 14525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14530 ;;Total ram usage:        0 bytes
 14531 ;; Hardware stack levels used:    1
 14532 ;; This function calls:
 14533 ;;		Nothing
 14534 ;; This function is called by:
 14535 ;;		_INTERRUPT_InterruptManager
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           	psect	text100
 14540  003D90                     __ptext100:
 14541                           	opt stack 0
 14542  003D90                     _EUSART1_Receive_ISR:
 14543                           	opt stack 19
 14544                           
 14545                           ;eusart1.c: 191: if(1 == RCSTA1bits.OERR)
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;incstack = 0
 14549  003D90  A2AB               	btfss	4011,1,c	;volatile
 14550  003D92  D002               	goto	i2l5730
 14551                           
 14552                           ;eusart1.c: 192: {
 14553                           ;eusart1.c: 195: RCSTA1bits.SPEN = 0;
 14554  003D94  9EAB               	bcf	4011,7,c	;volatile
 14555                           
 14556                           ;eusart1.c: 196: RCSTA1bits.SPEN = 1;
 14557  003D96  8EAB               	bsf	4011,7,c	;volatile
 14558  003D98                     i2l5730:
 14559                           
 14560                           ;eusart1.c: 197: }
 14561                           ;eusart1.c: 200: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 14562  003D98  504A               	movf	_eusart1RxHead,w,c
 14563  003D9A  0D01               	mullw	1
 14564  003D9C  0E82               	movlw	low _eusart1RxBuffer
 14565  003D9E  24F3               	addwf	prodl,w,c
 14566  003DA0  6ED9               	movwf	fsr2l,c
 14567  003DA2  0E02               	movlw	high _eusart1RxBuffer
 14568  003DA4  20F4               	addwfc	prodh,w,c
 14569  003DA6  6EDA               	movwf	fsr2h,c
 14570  003DA8  CFAE FFDF          	movff	4014,indf2	;volatile
 14571  003DAC  2A4A               	incf	_eusart1RxHead,f,c
 14572                           
 14573                           ;eusart1.c: 201: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 14574  003DAE  0E3F               	movlw	63
 14575  003DB0  644A               	cpfsgt	_eusart1RxHead,c
 14576  003DB2  D002               	goto	i2l5738
 14577                           
 14578                           ;eusart1.c: 202: {
 14579                           ;eusart1.c: 203: eusart1RxHead = 0;
 14580  003DB4  0E00               	movlw	0
 14581  003DB6  6E4A               	movwf	_eusart1RxHead,c
 14582  003DB8                     i2l5738:
 14583                           
 14584                           ;eusart1.c: 204: }
 14585                           ;eusart1.c: 205: eusart1RxCount++;
 14586  003DB8  2A48               	incf	_eusart1RxCount,f,c	;volatile
 14587  003DBA  0012               	return		;funcret
 14588  003DBC                     __end_of_EUSART1_Receive_ISR:
 14589                           	opt stack 0
 14590                           tosu	equ	0xFFF
 14591                           tosh	equ	0xFFE
 14592                           tosl	equ	0xFFD
 14593                           pclatu	equ	0xFFB
 14594                           pclath	equ	0xFFA
 14595                           tblptru	equ	0xFF8
 14596                           tblptrh	equ	0xFF7
 14597                           tblptrl	equ	0xFF6
 14598                           tablat	equ	0xFF5
 14599                           prodh	equ	0xFF4
 14600                           prodl	equ	0xFF3
 14601                           intcon	equ	0xFF2
 14602                           intcon2	equ	0xFF1
 14603                           indf0	equ	0xFEF
 14604                           postinc0	equ	0xFEE
 14605                           fsr0h	equ	0xFEA
 14606                           fsr0l	equ	0xFE9
 14607                           wreg	equ	0xFE8
 14608                           indf1	equ	0xFE7
 14609                           fsr1h	equ	0xFE2
 14610                           fsr1l	equ	0xFE1
 14611                           indf2	equ	0xFDF
 14612                           postinc2	equ	0xFDE
 14613                           postdec2	equ	0xFDD
 14614                           fsr2h	equ	0xFDA
 14615                           fsr2l	equ	0xFD9
 14616                           status	equ	0xFD8
 14617                           tosu	equ	0xFFF
 14618                           tosh	equ	0xFFE
 14619                           tosl	equ	0xFFD
 14620                           pclatu	equ	0xFFB
 14621                           pclath	equ	0xFFA
 14622                           tblptru	equ	0xFF8
 14623                           tblptrh	equ	0xFF7
 14624                           tblptrl	equ	0xFF6
 14625                           tablat	equ	0xFF5
 14626                           prodh	equ	0xFF4
 14627                           prodl	equ	0xFF3
 14628                           intcon	equ	0xFF2
 14629                           intcon2	equ	0xFF1
 14630                           indf0	equ	0xFEF
 14631                           postinc0	equ	0xFEE
 14632                           fsr0h	equ	0xFEA
 14633                           fsr0l	equ	0xFE9
 14634                           wreg	equ	0xFE8
 14635                           indf1	equ	0xFE7
 14636                           fsr1h	equ	0xFE2
 14637                           fsr1l	equ	0xFE1
 14638                           indf2	equ	0xFDF
 14639                           postinc2	equ	0xFDE
 14640                           postdec2	equ	0xFDD
 14641                           fsr2h	equ	0xFDA
 14642                           fsr2l	equ	0xFD9
 14643                           status	equ	0xFD8
 14644                           
 14645                           	psect	text101
 14646  000000                     __ptext101:
 14647                           	opt stack 0
 14648                           tosu	equ	0xFFF
 14649                           tosh	equ	0xFFE
 14650                           tosl	equ	0xFFD
 14651                           pclatu	equ	0xFFB
 14652                           pclath	equ	0xFFA
 14653                           tblptru	equ	0xFF8
 14654                           tblptrh	equ	0xFF7
 14655                           tblptrl	equ	0xFF6
 14656                           tablat	equ	0xFF5
 14657                           prodh	equ	0xFF4
 14658                           prodl	equ	0xFF3
 14659                           intcon	equ	0xFF2
 14660                           intcon2	equ	0xFF1
 14661                           indf0	equ	0xFEF
 14662                           postinc0	equ	0xFEE
 14663                           fsr0h	equ	0xFEA
 14664                           fsr0l	equ	0xFE9
 14665                           wreg	equ	0xFE8
 14666                           indf1	equ	0xFE7
 14667                           fsr1h	equ	0xFE2
 14668                           fsr1l	equ	0xFE1
 14669                           indf2	equ	0xFDF
 14670                           postinc2	equ	0xFDE
 14671                           postdec2	equ	0xFDD
 14672                           fsr2h	equ	0xFDA
 14673                           fsr2l	equ	0xFD9
 14674                           status	equ	0xFD8
 14675                           
 14676                           	psect	rparam
 14677  0000                     tosu	equ	0xFFF
 14678                           tosh	equ	0xFFE
 14679                           tosl	equ	0xFFD
 14680                           pclatu	equ	0xFFB
 14681                           pclath	equ	0xFFA
 14682                           tblptru	equ	0xFF8
 14683                           tblptrh	equ	0xFF7
 14684                           tblptrl	equ	0xFF6
 14685                           tablat	equ	0xFF5
 14686                           prodh	equ	0xFF4
 14687                           prodl	equ	0xFF3
 14688                           intcon	equ	0xFF2
 14689                           intcon2	equ	0xFF1
 14690                           indf0	equ	0xFEF
 14691                           postinc0	equ	0xFEE
 14692                           fsr0h	equ	0xFEA
 14693                           fsr0l	equ	0xFE9
 14694                           wreg	equ	0xFE8
 14695                           indf1	equ	0xFE7
 14696                           fsr1h	equ	0xFE2
 14697                           fsr1l	equ	0xFE1
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705                           	psect	temp
 14706  00004F                     btemp:
 14707                           	opt stack 0
 14708  00004F                     	ds	1
 14709  0000                     int$flags	set	btemp
 14710                           tosu	equ	0xFFF
 14711                           tosh	equ	0xFFE
 14712                           tosl	equ	0xFFD
 14713                           pclatu	equ	0xFFB
 14714                           pclath	equ	0xFFA
 14715                           tblptru	equ	0xFF8
 14716                           tblptrh	equ	0xFF7
 14717                           tblptrl	equ	0xFF6
 14718                           tablat	equ	0xFF5
 14719                           prodh	equ	0xFF4
 14720                           prodl	equ	0xFF3
 14721                           intcon	equ	0xFF2
 14722                           intcon2	equ	0xFF1
 14723                           indf0	equ	0xFEF
 14724                           postinc0	equ	0xFEE
 14725                           fsr0h	equ	0xFEA
 14726                           fsr0l	equ	0xFE9
 14727                           wreg	equ	0xFE8
 14728                           indf1	equ	0xFE7
 14729                           fsr1h	equ	0xFE2
 14730                           fsr1l	equ	0xFE1
 14731                           indf2	equ	0xFDF
 14732                           postinc2	equ	0xFDE
 14733                           postdec2	equ	0xFDD
 14734                           fsr2h	equ	0xFDA
 14735                           fsr2l	equ	0xFD9
 14736                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    10
    Data        2
    BSS         1005
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     62      78
    BANK0           160     32     160
    BANK1           256     11     236
    BANK2           256      0     194
    BANK3           256      0     130
    BANK4           256      0     160
    BANK5           256      0     160
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    Me.Phase.Current.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Current.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Current.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Current.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Current.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Current.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    Me.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Me.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    Me.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Me.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    Me.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Me.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Me.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    S1342$18$0	PTR struct _tStepperMotor size(2) Largest target is 252
		 -> Me(BANK1[225]), 

    S1342$16$0	PTR struct _tStepperMotor size(2) Largest target is 252
		 -> Me(BANK1[225]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> trunc@expon(COMRAM[2]), 

    I2C_FillPacket@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), 

    I2C_Send@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), Send_Status@msg(BANK0[16]), 

    I2C_GetNewMessages@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), 

    UART_Checksum@msg	PTR unsigned char  size(2) Largest target is 15
		 -> UART_Send@packet(COMRAM[15]), 

    UART_Send@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), Send_Status@msg(BANK0[16]), 

    lcd_write_string_4d@theString	PTR const unsigned char  size(2) Largest target is 21
		 -> LCD_WriteInt@string(BANK0[6]), VERSION_HARDWARE(CODE[6]), VERSION_FIRMWARE(CODE[4]), STR_4(CODE[21]), 
		 -> STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[21]), 

    LCD_Write@string	PTR const unsigned char  size(2) Largest target is 21
		 -> LCD_WriteInt@string(BANK0[6]), VERSION_HARDWARE(CODE[6]), VERSION_FIRMWARE(CODE[4]), STR_4(CODE[21]), 
		 -> STR_3(CODE[21]), STR_2(CODE[21]), STR_1(CODE[21]), 

    StepperMotor_GotoProductEnd@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductEnd@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoProductStart@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoReference@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GotoDark@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_GoHome@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_Update@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Update@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMotor_Init@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMotor_Init@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    Referencia_Block@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Referencia_Block@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    Referencia_Block@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Referencia_Block@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    Referencia_Block@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Referencia_Block@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_Block@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    Referencia_SetPhase@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Referencia_SetPhase@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3301.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3289.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step$3277.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Current.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    Step@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Step@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    Step@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Step@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    Step@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Step@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Step@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Step@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    SetSteps@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    SetSteps@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    SetSteps@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    SetSteps@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    SetSteps@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    SetSteps@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    SetSteps@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    SetSteps@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    StepperMove@Motor.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMove@Motor.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    StepperMove@Motor.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    StepperMove@Motor.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    StepperMove@Motor.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMove@Motor.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    StepperMove@Motor.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    StepperMove@Motor.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    ProcessForward@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    ProcessBotones@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    ProcessSensores@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    ProcessCompuerta@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    ProcessPaPReferencia@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    ProcessDevice@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    Process4TO20Transmitter@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), 

    I2C_ProcessPacket@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), 

    Send@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), Send_Status@msg(BANK0[16]), 

    Send_Hardware@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    Send_Firmware@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    Send_NAK@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    Send_ACK@msg	PTR struct . size(2) Largest target is 160
		 -> I2CQueue(BANK5[160]), UARTQueue(BANK4[160]), 

    S1342_tStepperMotor$StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    Me.Multiplexer.StatusHandler	PTR FTN()unsigned char  size(2) Largest target is 0

    S1342_tStepperMotor$ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Me.Multiplexer.ReleaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    S1342_tStepperMotor$TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    Me.Multiplexer.TorqueHandler	PTR FTN(PTR struct _tStepperMotor,unsigned char ,)void  size(2) Largest target is 0

    S1342_tStepperMotor$PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    Me.Multiplexer.PhaseHandler	PTR FTN(PTR struct _tStepperMotor,)void  size(2) Largest target is 0

    S1343_tHandlers$Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    Me.Multiplexer.Handlers.Target	PTR FTN(PTR struct _tStepperMotor,unsigned char ,unsigned char ,)void  size(2) Largest target is 0

    S1343_tHandlers$FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Me.Multiplexer.Handlers.FadeOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    S1343_tHandlers$FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    Me.Multiplexer.Handlers.FadeIn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0

    S1328$Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Current	PTR volatile struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase8.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase7.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase6.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase5.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase4.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase3.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase2.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase1.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.MicroStep.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.MicroStep.Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.WaveDrive.Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.WaveDrive.Next	PTR struct _tPhase size(2) Largest target is 0

    S1320_tStepMode$Prev	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.Normal.Prev	PTR struct _tPhase size(2) Largest target is 0

    S1320_tStepMode$Next	PTR struct _tPhase size(2) Largest target is 0

    Me.Multiplexer.Phase.Phase0.Normal.Next	PTR struct _tPhase size(2) Largest target is 0

    TMR4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> Timer4Tick(), TMR4_DefaultInterruptHandler(), 

    TMR4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer4Tick(), TMR4_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> Timer2Tick(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer2Tick(), Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _TMR4_Initialize->_TMR4_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _InitTasks->_EPWM1_LoadDutyValue
    _InitTasks->_EPWM3_LoadDutyValue
    _InitTasks->_PWM4_LoadDutyValue
    _InitTasks->_PWM5_LoadDutyValue
    _TC_Devices_Init->_SaveClass
    _TC_Devices_Init->_SaveID
    _ReadID->_DATAEE_ReadByte
    _ReadClass->_DATAEE_ReadByte
    _MemoryIsInit->_DATAEE_ReadByte
    _MemoryInit->_DATAEE_WriteByte
    _Setup_Display_LCD->_LCD_Write
    _lcd_init_4d->_lcd_write_instruction_4d
    _ProcessSensores->_Send_NAK
    _ProcessPaPReferencia->_Send_NAK
    _ProcessForward->_Send_NAK
    _UpdateID->_LCD_WriteInt
    _LCD_WriteInt->___lwmod
    ___lwmod->___lwdiv
    _LCD_Write->_lcd_write_string_4d
    _lcd_write_string_4d->_lcd_write_character_4d
    _Send_Hardware->_Send
    _Send_Firmware->_Send
    _Send_ACK->_Send
    _SaveID->_DATAEE_WriteByte
    _SaveClass->_DATAEE_WriteByte
    _ProcessCompuerta->_Send_NAK
    _ProcessBotones->_Send_NAK
    _Send_NAK->_Send
    _Send->_UART_Send
    _UART_Send->_UART_Checksum
    _putch->_EUSART1_Write
    _I2C_Send->_i2c_putch
    _Process4TO20Transmitter->_EPWM1_LoadDutyValue
    _Process4TO20Transmitter->_EPWM3_LoadDutyValue
    _Process4TO20Transmitter->_PWM4_LoadDutyValue
    _Process4TO20Transmitter->_PWM5_LoadDutyValue
    _round->_trunc
    _trunc->___altoft
    ___fttol->___lwtoft
    ___altoft->___fttol
    ___ftneg->_trunc
    ___ftadd->_trunc
    ___wmul->___fttol
    ___lwtoft->___ftpack
    ___lwdiv->___wmul
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    _I2C_GetNewMessages->_I2C_FillPacket
    _LCD_WriteChar->_lcd_write_character_4d
    _LCD_WriteChar->_lcd_write_instruction_4d
    _lcd_write_instruction_4d->_lcd_write_4
    _lcd_write_character_4d->_lcd_write_4
    _lcd_write_4->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback

Critical Paths under _main in BANK0

    _InitTasks->_EPWM1_LoadDutyValue
    _InitTasks->_EPWM3_LoadDutyValue
    _InitTasks->_PWM4_LoadDutyValue
    _InitTasks->_PWM5_LoadDutyValue
    _I2C_ProcessMessages->_I2C_ProcessPacket
    _I2C_ProcessPacket->_Process4TO20Transmitter
    _UpdateID->_LCD_WriteInt
    _Process4TO20Transmitter->_EPWM1_LoadDutyValue
    _Process4TO20Transmitter->_EPWM3_LoadDutyValue
    _Process4TO20Transmitter->_PWM4_LoadDutyValue
    _Process4TO20Transmitter->_PWM5_LoadDutyValue
    _round->___ftadd
    ___ftadd->___ftneg
    _PWM5_LoadDutyValue->_round
    _PWM4_LoadDutyValue->_round
    _EPWM3_LoadDutyValue->_round
    _EPWM1_LoadDutyValue->_round

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _I2C_ProcessPacket->_Process4TO20Transmitter

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  214650
                 _I2C_GetNewMessages
                _I2C_ProcessMessages
                          _InitTasks
                           _MainTask
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     300
                     _ADC_Initialize
                   _EPWM1_Initialize
                   _EPWM2_Initialize
                   _EPWM3_Initialize
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
                    _TMR6_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR6_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0     150
           _TMR4_SetInterruptHandler
                    _TMR4_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR4_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     150
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM3_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainTask                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTasks                                            0     0      0   36358
                _EPWM1_LoadDutyValue
                _EPWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
                  _Setup_Display_LCD
                    _TC_Devices_Init
           _TMR2_SetInterruptHandler
           _TMR4_SetInterruptHandler
                           _UpdateID
 ---------------------------------------------------------------------------------
 (3) _TMR4_SetInterruptHandler                             2     0      2     150
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2     150
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TC_Devices_Init                                      0     0      0   14963
                         _MemoryInit
                       _MemoryIsInit
                          _ReadClass
                             _ReadID
                          _SaveClass
                             _SaveID
 ---------------------------------------------------------------------------------
 (3) _ReadID                                               0     0      0    1452
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _ReadClass                                            0     0      0    1452
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _MemoryIsInit                                         0     0      0    1452
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_ReadByte                                      2     0      2    1452
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MemoryInit                                           0     0      0    3515
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Setup_Display_LCD                                    0     0      0    9317
                           _LCD_Init
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Init                                             0     0      0    3646
                        _lcd_init_4d
 ---------------------------------------------------------------------------------
 (4) _lcd_init_4d                                          0     0      0    3646
                              _Delay
                        _lcd_write_4
           _lcd_write_instruction_4d
 ---------------------------------------------------------------------------------
 (1) _I2C_ProcessMessages                                  0     0      0  172712
                  _I2C_ProcessPacket
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _I2C_ProcessPacket                                    3     1      2  171904
                                             29 BANK0      3     1      2
            _Process4TO20Transmitter
                     _ProcessBotones
                   _ProcessCompuerta
                      _ProcessDevice
                     _ProcessForward
               _ProcessPaPReferencia
                    _ProcessSensores
 ---------------------------------------------------------------------------------
 (3) _ProcessSensores                                      3     1      2   17180
                                             52 COMRAM     3     1      2
                           _Send_NAK
 ---------------------------------------------------------------------------------
 (3) _ProcessPaPReferencia                                 3     1      2   17583
                                             52 COMRAM     3     1      2
                           _Send_NAK
 ---------------------------------------------------------------------------------
 (3) _ProcessForward                                       3     1      2   20894
                                             52 COMRAM     3     1      2
                               _Send
                           _Send_NAK
 ---------------------------------------------------------------------------------
 (3) _ProcessDevice                                       11     9      2   47554
                                             17 BANK0     11     9      2
                          _SaveClass
                             _SaveID
                           _Send_ACK
                      _Send_Firmware
                      _Send_Hardware
                           _Send_NAK
                           _UpdateID
 ---------------------------------------------------------------------------------
 (2) _UpdateID                                             0     0      0   10452
                       _LCD_WriteInt
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteInt                                        19    14      5   10452
                                             60 COMRAM     2     2      0
                                              0 BANK0     17    12      5
                          _LCD_Write
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1002
                                             55 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            5     1      4    5671
                                             26 COMRAM     5     1      4
           _lcd_write_instruction_4d
                _lcd_write_string_4d
 ---------------------------------------------------------------------------------
 (5) _lcd_write_string_4d                                  6     4      2    2617
                                             20 COMRAM     6     4      2
                              _Delay
             _lcd_write_character_4d
 ---------------------------------------------------------------------------------
 (4) _Send_Hardware                                        6     4      2    4107
                                             49 COMRAM     6     4      2
                               _Send
 ---------------------------------------------------------------------------------
 (4) _Send_Firmware                                        6     4      2    4107
                                             49 COMRAM     6     4      2
                               _Send
 ---------------------------------------------------------------------------------
 (4) _Send_ACK                                             2     0      2    4331
                                             49 COMRAM     2     0      2
                               _Send
 ---------------------------------------------------------------------------------
 (3) _SaveID                                               1     1      0    3546
                                             20 COMRAM     1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _SaveClass                                            1     1      0    3546
                                             20 COMRAM     1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     4     1      3    3515
                                             16 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _ProcessCompuerta                                     3     1      2   17211
                                             52 COMRAM     3     1      2
                           _Send_NAK
 ---------------------------------------------------------------------------------
 (3) _ProcessBotones                                       3     1      2   17056
                                             52 COMRAM     3     1      2
                           _Send_NAK
 ---------------------------------------------------------------------------------
 (4) _Send_NAK                                             3     0      3   16713
                                             49 COMRAM     3     0      3
                               _Send
 ---------------------------------------------------------------------------------
 (5) _Send                                                 2     0      2    3683
                                             47 COMRAM     2     0      2
                              _Delay
                           _I2C_Send
                          _UART_Send
 ---------------------------------------------------------------------------------
 (6) _UART_Send                                           24    22      2    1422
                                             23 COMRAM    24    22      2
                      _UART_Checksum
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0      93
                                             17 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Write                                        1     1      0      62
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _UART_Checksum                                        7     4      3     216
                                             16 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (6) _I2C_Send                                             7     5      2     517
                                             17 COMRAM     7     5      2
                          _i2c_putch
 ---------------------------------------------------------------------------------
 (7) _i2c_putch                                            1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Process4TO20Transmitter                             38    36      2   33984
                                             23 BANK0      6     4      2
                                              0 BANK1     11    11      0
                _EPWM1_LoadDutyValue
                _EPWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
                 _PWM5_LoadDutyValue
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                              _round
 ---------------------------------------------------------------------------------
 (4) _round                                                6     3      3   10847
                                             15 BANK0      6     3      3
                            ___ftadd
                            ___ftneg
                           ___lwtoft (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (5) _trunc                                                8     5      3    5643
                                             52 COMRAM     8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     452
                                             16 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             15    11      4    1988
                                             27 COMRAM    15    11      4
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2805
                                             42 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     142
                                              0 BANK0      3     0      3
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4285
                                              3 BANK0     12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     540
                                             42 COMRAM     6     2      4
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             3     0      3    3787
                                             24 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4    1011
                                             48 COMRAM     7     3      4
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4820
                                             24 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     352
                                             16 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    5368
                                             39 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2524
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PWM5_LoadDutyValue                                   4     2      2     293
                                             60 COMRAM     2     2      0
                                             21 BANK0      2     0      2
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                              _round (ARG)
 ---------------------------------------------------------------------------------
 (2) _PWM4_LoadDutyValue                                   4     2      2     293
                                             60 COMRAM     2     2      0
                                             21 BANK0      2     0      2
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                              _round (ARG)
 ---------------------------------------------------------------------------------
 (2) _EPWM3_LoadDutyValue                                  4     2      2     293
                                             60 COMRAM     2     2      0
                                             21 BANK0      2     0      2
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                              _round (ARG)
 ---------------------------------------------------------------------------------
 (2) _EPWM1_LoadDutyValue                                  4     2      2     447
                                             60 COMRAM     2     2      0
                                             21 BANK0      2     0      2
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                              _round (ARG)
 ---------------------------------------------------------------------------------
 (1) _I2C_GetNewMessages                                   8     8      0    5280
                                             25 COMRAM     8     8      0
                     _I2C1_DataReady
                     _I2C_FillPacket
                      _LCD_WriteChar
                            ___awmod
                          _i2c_getch
 ---------------------------------------------------------------------------------
 (2) _i2c_getch                                            1     1      0      24
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     808
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteChar                                        4     2      2    3659
                                             20 COMRAM     4     2      2
             _lcd_write_character_4d
           _lcd_write_instruction_4d
 ---------------------------------------------------------------------------------
 (5) _lcd_write_instruction_4d                             1     1      0    1298
                                             19 COMRAM     1     1      0
                        _lcd_write_4
 ---------------------------------------------------------------------------------
 (6) _lcd_write_character_4d                               1     1      0    1298
                                             19 COMRAM     1     1      0
                        _lcd_write_4
 ---------------------------------------------------------------------------------
 (7) _lcd_write_4                                          1     1      0    1236
                                             18 COMRAM     1     1      0
                              _Delay
 ---------------------------------------------------------------------------------
 (8) _Delay                                                2     0      2    1112
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C_FillPacket                                       9     7      2     625
                                             16 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _I2C1_DataReady                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         14    14      0      68
                                              2 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _I2C1_ISR
                           _TMR2_ISR
                           _TMR4_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR4_ISR                                            0     0      0       0
                      _TMR4_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR4_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR4_DefaultInterruptHandler *
                         _Timer4Tick *
 ---------------------------------------------------------------------------------
 (14) _Timer4Tick                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR4_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR2_ISR                                            0     0      0       0
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (13) _TMR2_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
                         _Timer2Tick *
 ---------------------------------------------------------------------------------
 (14) _Timer2Tick                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C1_ISR                                            1     1      0      68
                                              1 COMRAM     1     1      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (13) _I2C1_StatusCallback                                 1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_GetNewMessages
     _I2C1_DataReady
     _I2C_FillPacket
     _LCD_WriteChar
       _lcd_write_character_4d
         _lcd_write_4
           _Delay
       _lcd_write_instruction_4d
         _lcd_write_4
           _Delay
     ___awmod
     _i2c_getch
   _I2C_ProcessMessages
     _I2C_ProcessPacket
       _Process4TO20Transmitter
         _EPWM1_LoadDutyValue
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _round (ARG)
             ___ftadd
               ___ftneg (ARG)
                 _trunc (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___fttol
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
               ___ftpack (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___ftneg
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___lwtoft (ARG)
               ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
         _EPWM3_LoadDutyValue
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _round (ARG)
             ___ftadd
               ___ftneg (ARG)
                 _trunc (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___fttol
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
               ___ftpack (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___ftneg
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___lwtoft (ARG)
               ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
         _PWM4_LoadDutyValue
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _round (ARG)
             ___ftadd
               ___ftneg (ARG)
                 _trunc (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___fttol
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
               ___ftpack (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___ftneg
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___lwtoft (ARG)
               ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
         _PWM5_LoadDutyValue
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _round (ARG)
             ___ftadd
               ___ftneg (ARG)
                 _trunc (ARG)
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___fttol
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
               ___ftpack (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___ftneg
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___lwtoft (ARG)
               ___ftpack
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___fttol
           ___lwtoft (ARG)
             ___ftpack
         ___lwdiv
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lwtoft
           ___ftpack
         ___wmul
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _round
           ___ftadd
             ___ftneg (ARG)
               _trunc (ARG)
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___fttol
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
             ___ftpack (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___ftneg
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___lwtoft (ARG)
             ___ftpack
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
       _ProcessBotones
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
       _ProcessCompuerta
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
       _ProcessDevice
         _SaveClass
           _DATAEE_WriteByte
         _SaveID
           _DATAEE_WriteByte
         _Send_ACK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
         _Send_Firmware
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
         _Send_Hardware
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
         _UpdateID
           _LCD_WriteInt
             _LCD_Write
               _lcd_write_instruction_4d
                 _lcd_write_4
                   _Delay
               _lcd_write_string_4d
                 _Delay
                 _lcd_write_character_4d
                   _lcd_write_4
                     _Delay
             ___lwdiv
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___wmul (ARG)
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
             ___lwmod
               ___lwdiv (ARG)
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___wmul (ARG)
                   ___fttol (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
       _ProcessForward
         _Send
           _Delay
           _I2C_Send
             _i2c_putch
           _UART_Send
             _UART_Checksum
             _putch
               _EUSART1_Write
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
       _ProcessPaPReferencia
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
       _ProcessSensores
         _Send_NAK
           _Send
             _Delay
             _I2C_Send
               _i2c_putch
             _UART_Send
               _UART_Checksum
               _putch
                 _EUSART1_Write
     ___awmod
   _InitTasks
     _EPWM1_LoadDutyValue
       ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _round (ARG)
         ___ftadd
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___ftpack (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___ftneg
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___lwtoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___lwtoft (ARG)
               ___ftpack
           _frexp
     _EPWM3_LoadDutyValue
       ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _round (ARG)
         ___ftadd
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___ftpack (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___ftneg
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___lwtoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___lwtoft (ARG)
               ___ftpack
           _frexp
     _PWM4_LoadDutyValue
       ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _round (ARG)
         ___ftadd
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___ftpack (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___ftneg
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___lwtoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___lwtoft (ARG)
               ___ftpack
           _frexp
     _PWM5_LoadDutyValue
       ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _round (ARG)
         ___ftadd
           ___ftneg (ARG)
             _trunc (ARG)
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___fttol
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
           ___ftpack (ARG)
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___ftneg
           _trunc (ARG)
             ___altoft
               ___ftpack
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
             ___fttol
               ___lwtoft (ARG)
                 ___ftpack
             _frexp
         ___lwtoft (ARG)
           ___ftpack
         _trunc (ARG)
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___fttol
             ___lwtoft (ARG)
               ___ftpack
           _frexp
     _Setup_Display_LCD
       _LCD_Init
         _lcd_init_4d
           _Delay
           _lcd_write_4
             _Delay
           _lcd_write_instruction_4d
             _lcd_write_4
               _Delay
       _LCD_Write
         _lcd_write_instruction_4d
           _lcd_write_4
             _Delay
         _lcd_write_string_4d
           _Delay
           _lcd_write_character_4d
             _lcd_write_4
               _Delay
     _TC_Devices_Init
       _MemoryInit
         _DATAEE_WriteByte
       _MemoryIsInit
         _DATAEE_ReadByte
       _ReadClass
         _DATAEE_ReadByte
       _ReadID
         _DATAEE_ReadByte
       _SaveClass
         _DATAEE_WriteByte
       _SaveID
         _DATAEE_WriteByte
     _TMR2_SetInterruptHandler
     _TMR4_SetInterruptHandler
     _UpdateID
       _LCD_WriteInt
         _LCD_Write
           _lcd_write_instruction_4d
             _lcd_write_4
               _Delay
           _lcd_write_string_4d
             _Delay
             _lcd_write_character_4d
               _lcd_write_4
                 _Delay
         ___lwdiv
           ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___wmul (ARG)
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___lwmod
           ___lwdiv (ARG)
             ___fttol (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___wmul (ARG)
               ___fttol (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
   _MainTask
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EPWM2_Initialize
     _EPWM3_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
       _TMR2_StartTimer
     _TMR4_Initialize
       _TMR4_SetInterruptHandler
       _TMR4_StartTimer
     _TMR6_Initialize
       _TMR6_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
   _TMR2_ISR
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _Timer2Tick *
   _TMR4_ISR
     _TMR4_CallBack
       Absolute function(Fake) *
       _TMR4_DefaultInterruptHandler *
       _Timer4Tick *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      A0      16       62.5%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      A0      14       62.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      82      11       50.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C2       9       75.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B      EC       7       92.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3E      4E       1       83.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     45E      12        0.0%
DATA                 0      0     45E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Nov 17 11:37:22 2017

                       _uart_data_pending 0043                           _ProcessSensores 2D02  
                            ___altoft@exp 0033          __end_of_TMR2_SetInterruptHandler 411C  
                _eusart1TxBufferRemaining 00FF                             ___altoft@sign 0034  
                                      l53 3B84                                        _Me 0100  
                       ??_TMR6_StartTimer 0011                              ?_lcd_write_4 0001  
                     ___wmul@multiplicand 002D                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 00E8  
                            ___ftadd@exp2 00E7                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 00E6                                       l326 3AF8  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                                     _PR4 000F52                              __CFG_CPD$OFF 000000  
                                     _PR6 000F4B               __end_of_I2C_ProcessMessages 39DC  
                        _i2c_data_pending 00C8                              ___awmod@sign 0016  
                         _TMR2_Initialize 3F30                           _PWM4_Initialize 3FB0  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                  __end_of_EPWM2_Initialize 3E7C  
                        ProcessDevice@msg 00EB                              ___ftdiv@cntr 0031  
                        __end_of_I2C1_ISR 3AA6                              ___ftdiv@sign 0036  
                                    l1021 12E6                                      l1030 1664  
                                    l1014 1090                                      l1024 1410  
                                    l1033 178E                                      l1018 11BC  
                                    l1027 153A                                      l1036 18B8  
                                    l1322 1E40                                      l1058 229E  
                                    l1363 3962                                      l1357 3958  
                                    l1375 3976                                      l1377 3978  
                                    l1369 396C                                      l1802 1C2C  
                                    l1813 2BEC                                      l1755 2FDE  
                                    l1835 3D26                                      l1933 3860  
                                    l1782 1B04                                      l1943 3A5A  
                                    l1784 1B2C                                      l1793 1C02  
                                    l1778 1ACA                                      l7002 21B2  
                                    l7100 2A88                                      l7020 2274  
                                    l7110 2AE2                                      l7102 2A9A  
                                    l7030 22A2                                      l7014 224A  
                                    l7104 2AAC                                      l6400 3328  
                                    l7024 228A                                      l7016 225C  
                                    l7202 11C6                                      l7106 2ABE  
                                    l7114 2AF4                                      l7018 226A  
                                    l7034 22B4                                      l7050 1F76  
                                    l7042 1F2E                                      l7130 2D50  
                                    l7122 2D08                                      l5516 3C9E  
                                    l6420 2F78                                      l6500 27EA  
                                    l7108 2AD0                                      l7116 2B34  
                                    l7036 22F0                                      l7060 1FD0  
                                    l7052 1F88                                      l7044 1F40  
                                    l7132 2D62                                      l7124 2D1A  
                                    l7140 2D98                                      l5622 23E6  
                                    l6350 3F74                                      l6430 2FD4  
                                    l6422 2F96                                      l6414 2F60  
                                    l7214 12F0                                      l7150 361E  
                                    l6406 336A                                      l7070 202A  
                                    l7062 1FE2                                      l7054 1F9A  
                                    l7046 1F52                                      l7134 2D74  
                                    l7126 2D2C                                      l7142 2DD2  
                                    l6360 395A                                      l6520 353A  
                                    l6504 280C                                      l7152 3630  
                                    l7160 3676                                      l6600 3A30  
                                    l7080 2084                                      l7072 203C  
                                    l7064 1FF4                                      l7056 1FAC  
                                    l7048 1F64                                      l7136 2D86  
                                    l7128 2D3E                                      l7304 3AC2  
                                    l6354 3F82                                      l6362 3964  
                                    l7330 39E8                                      l6426 2FAC  
                                    l6418 2F6E                                      l6522 3546  
                                    l7250 166E                                      l7226 141A  
                                    l7154 3642                                      l6450 390E  
                                    l6602 3A38                                      l7170 2E1C  
                                    l7082 2096                                      l7074 204E  
                                    l7066 2006                                      l7058 1FBE  
                                    l5628 2416                                      l6356 3F88  
                                    l6364 396E                                      l7332 39EC  
                                    l7340 3A10                                      l5660 36B4  
                                    l5652 369A                                      l7412 26D8  
                                    l7404 267E                                      l6428 2FCA  
                                    l6372 3AE6                                      l7148 360C  
                                    l6452 3912                                      l6460 3936  
                                    l6604 3A3C                                      l7180 2E6C  
                                    l7076 2060                                      l7068 2018  
                                    l7334 39F0                                      l6702 1AD8  
                                    l6534 2890                                      l7262 1798  
                                    l7238 1544                                      l7190 109A  
                                    l7158 3654                                      l7094 2A52  
                                    l6454 3916                                      l7182 2E8C  
                                    l7166 2DDC                                      l7174 2E2E  
                                    l7078 2072                                      l7086 20A8  
                                    l7350 2C50                                      l7328 39E4  
                                    l5672 36E0                                      l5664 36C8  
                                    l5656 36A8                                      l5648 368E  
                                    l6552 28F6                                      l6384 3B1A  
                                    l7096 2A64                                      l6448 390A  
                                    l6608 3A50                                      l7176 2E4A  
                                    l7168 2DFC                                      l7088 2130  
                                    l7360 2CB0                                      l7352 2C5E  
                                    l7344 2C26                                      l7432 39D2  
                                    l7338 39F6                                      l5658 36B0  
                                    l6730 1B92                                      l6714 1B22  
                                    l6570 2946                                      l6562 291E  
                                    l6618 34BC                                      l7282 197A  
                                    l7274 18C2                                      l6386 3B1E  
                                    l6482 254C                                      l7098 2A76  
                                    l6458 391C                                      l7354 2C6C  
                                    l7346 2C34                                      l5668 36D2  
                                    l6580 382E                                      l6732 1BA0  
                                    l6724 1B64                                      l6708 1B12  
                                    l6564 292A                                      l6556 2906  
                                    l6492 2608                                      l6812 30F2  
                                    l7348 2C42                                      l7428 3998  
                                    l6582 3836                                      l6750 1C56  
                                    l6742 1BE8                                      l6734 1BAE  
                                    l6566 2930                                      l7286 1992  
                                    l7294 1A18                                      l6478 2514  
                                    l6822 3138                                      l6830 3046  
                                    l7358 2C7A                                      l7366 2CD4  
                                    l6592 3856                                      l6584 383A  
                                    l6760 1CA4                                      l6744 1BF6  
                                    l6736 1BBA                                      l7296 1A5C  
                                    l6816 3102                                      l6840 308C  
                                    l7368 2CFC                                      l7394 266C  
                                    l7386 2652                                      l6922 29A8  
                                    l6690 38D6                                      l6834 3056  
                                    l7482 4020                                      l6940 29EA  
                                    l6916 2980                                      l6780 33E4  
                                    l6692 38F6                                      l6684 38BA  
                                    l6870 2B60                                      l6950 2A12  
                                    l6686 38C8                                      l6936 29DA  
                                    l6776 33CA                                      l6962 3230  
                                    l6946 2A02                                      l6876 2B88  
                                    l6972 328C                                      l6966 3260  
                                    l6990 2156                                      l6896 2BC6  
                                    l6994 2170                                      l6986 213C  
                                    STR_1 104A                                      STR_2 1020  
                                    STR_3 100B                                      STR_4 1035  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u3190 3FE4  
                                    u5111 2B48                                      _IPEN 007E87  
                                    u5131 2B70                                      u5060 33D6  
                                    u5300 1098                                      u3550 40A8  
                                    u5400 166C                                      u5320 11C4  
                                    u5161 2968                                      u5420 1796  
                                    u5340 12EE                                      u5260 2204  
                                    u5181 2990                                      u5440 18C0  
                                    u5360 1418                                      u4480 3356  
                                    u4641 2874                                      u4490 3398  
                                    u4660 28AE                                      u5380 1542  
                                    u5550 2708                                      u4831 1A78  
                                    u4815 3B92                                      u4487 334C  
                                    u5560 270A                                      u4816 3B94  
                                    u4841 1A96                                      u4665 28A6  
                                    u4497 338E                                      u4790 34E4  
                                    u4798 34E6                                      _TMR2 000FBC  
                                    _TMR4 000F53                                      _TMR6 000F4C  
                                    _WPUB 000F61                             _EUSART1_Write 3AE4  
                                    _Send 38B8                                      _main 4018  
                            ___ftpack@arg 0011                              ___ftpack@exp 0014  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                          __end_of_I2C_Send 2864  
                                    btemp 004F                             __CFG_BORV$190 000000  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00BA                        __size_of_LCD_Write 004A  
                           __CFG_IESO$OFF 000000                           _PWM5_Initialize 3F92  
                   ??_EPWM1_LoadDutyValue 003D                             ?_LCD_WriteInt 00DA  
                __end_of_EPWM3_Initialize 3D04                             _LCD_WriteChar 39DC  
              ??_TMR4_SetInterruptHandler 0013                              ___ftmul@cntr 0026  
                            ___param_bank 000000                              ___ftmul@sign 0027  
                     _I2C1_StatusCallback 3156                __end_of_PWM5_LoadDutyValue 3C02  
                            ___fttol@exp1 002A                          UART_Checksum@msg 0011  
               __size_of_DATAEE_WriteByte 003A                              ___fttol@lval 0026  
                  ??_ProcessPaPReferencia 0037                   _Process4TO20Transmitter 1060  
                        __end_of_LCD_Init 412E            __size_of_OSCILLATOR_Initialize 000E  
                          Send_Hardware@i 0036                                     ?_Send 0030  
           __end_of_OSCILLATOR_Initialize 40DE                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1CCA  
                         __end_of___awmod 36EA                           __end_of___ftdiv 2C1E  
                         __end_of___ftneg 3D34                           __end_of___ftmul 2A4C  
                         __end_of___fttol 2958                                     _T2CON 000FBA  
                                   _LATA0 007C48                                     _LATA5 007C4D  
                                   _LATD0 007C60                                     _LATD1 007C61  
                                   _LATE0 007C68                                     _LATD2 007C62  
                                   _LATC5 007C5D                                     _LATE1 007C69  
                                   _LATD3 007C63                                     _LATD4 007C64  
                                   _LATD7 007C67                                     _T4CON 000F51  
                                   _T6CON 000F4A                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 386A                           __end_of___lwmod 3A64  
                                   i2l228 007E                                     i2l338 3CD0  
                                   i2l445 3A88                                     i2l449 3A98  
                        _VERSION_HARDWARE 1001                        _PWM4_LoadDutyValue 3C02  
              __size_of_I2C_ProcessPacket 00E4                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                                     _TRISE 000F96  
                                   _Delay 3F72                             __CFG_WRT0$OFF 000000  
                         _TMR4_Initialize 3DBC                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                        _VERSION_FIRMWARE 1007                      _EUSART1_Transmit_ISR 3CA2  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ??_I2C1_Initialize 0011  
                      __size_of_UART_Send 01A2                      ?_I2C1_StatusCallback 0001  
                        __end_of_TMR2_ISR 413E                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                          __end_of_TMR4_ISR 4136  
                           __CFG_WRTD$OFF 000000                           _DATAEE_ReadByte 4000  
                          __CFG_EBTRB$OFF 000000                         UART_Send@msg_size 002D  
                                   _frexp 34A0                                     _errno 00BE  
                          Send_Firmware@i 0036                       ?_PWM4_LoadDutyValue 00EF  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0015  
                                   _putch 411C                                     _round 3290  
                                   _trunc 33A0                            ?_EUSART1_Write 0001  
                                   pclath 000FFA                      _UART_QueueOutPointer 0044  
                                   tablat 000FF5                        lcd_write_4@theByte 0013  
                                   status 000FD8                   __end_of_ProcessSensores 2DD6  
                          __CFG_HFOFST$ON 000000                           _TMR2_StartTimer 414A  
                          __CFG_PBADEN$ON 000000                            ??_LCD_WriteInt 003D  
                          ?_LCD_WriteChar 0015                           __initialization 3590  
                            __end_of_Send 3904                             ?_MemoryIsInit 0001  
                        __end_of_MainTask 4152                __end_of_EUSART1_Initialize 3BCC  
                            __end_of_main 402E                      ??_PWM4_LoadDutyValue 003D  
                       ProcessBotones@msg 0035                   __end_of_PWM4_Initialize 3FCE  
                 __end_of_TMR2_Initialize 3F52               ?_INTERRUPT_InterruptManager 0001  
                                  ??_Send 0032                          __end_of_Send_ACK 3818  
                              _MemoryInit 40AC                          __end_of_Send_NAK 3758  
                _TMR2_SetInterruptHandler 4112                                    ??_main 003F  
                           ___fttol@sign1 0025                   __size_of_I2C_FillPacket 01A4  
                           __activetblptr 000003                                    ?_Delay 0011  
                       __end_of_LCD_Write 394E                     ?_EUSART1_Transmit_ISR 0001  
                    ProcessBotones@result 0037                           _TMR6_Initialize 3FE8  
                   ??_I2C1_StatusCallback 0001      Process4TO20Transmitter@Data_Received 01E5  
                        __end_of_UpdateID 3F72                                 I2C_Send@i 0017  
      I2C_GetNewMessages@i2c_lastCharRead 0021                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_frexp 0011                          __end_of___altoft 3590  
                                  _ADRESH 000FC4                                    _EEADRH 000FAA  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                                  _CCPR1H 000FBF                                    _CCPR2H 000F68  
                                  _CCPR1L 000FBE                                    _CCPR3H 000F5F  
                                  _CCPR2L 000F67                                    _CCPR4H 000F59  
                                  _CCPR5H 000F56                                    _CCPR3L 000F5E  
                                  _CCPR4L 000F58                                    _CCPR5L 000F55  
                                  _EECON2 000FA7                                    _ANSELA 000F38  
                                  ?_putch 0001                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 2FFE  
                                  ?_round 00E9                                    ?_trunc 0035  
                 __end_of_PWM5_Initialize 3FB0                            __CFG_WDTEN$OFF 000000  
                                  i2l5074 3D84                                    i2l5502 31E4  
                                  i2l5480 316E                                    i2l5712 3AA2  
                                  i2l5704 3A80                                    i2l5730 3D98  
                                  i2l5490 31A2                                    i2l5474 315A  
                                  i2l5724 3CCA                                    i2l5496 31D0  
                                  i2l5738 3DB8                                    i2l5498 31D6  
                                  i2l5914 0072                                    i2l5906 0066  
                                  _TABLAT 000FF5                                    i2l5890 004E  
                                  i2l5898 005A                                    _RCREG1 000FAE  
                        __end_of___lwtoft 3EE8                                    _RCSTA1 000FAB  
                      __size_of_i2c_getch 0034                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                        __size_of_ReadClass 000E  
                      __size_of_InitTasks 0062                        __size_of_i2c_putch 0024  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                         _TMR4_StartTimer 4144                  __end_of_ProcessCompuerta 2B38  
                           _I2CMsgTimeout 00C4                                    _ReadID 40EC  
              __end_of_I2C_GetNewMessages 2764                                    _SaveID 4070  
                          __CFG_XINST$OFF 000000                            ??_MemoryIsInit 0013  
                              _Timer2Tick 40BE                ProcessPaPReferencia@result 0037  
                              _Timer4Tick 3D64                              _CCPTMRS0bits 000F49  
                            _CCPTMRS1bits 000F48                 ??_Process4TO20Transmitter 00F3  
                __size_of_TC_Devices_Init 003E                         __end_of_UART_Send 263C  
                      __size_of_SaveClass 0014                                    ___ftge 3200  
                    __size_of_lcd_init_4d 00B4                                    ___wmul 3E32  
                               ??___ftadd 00E3                            __CFG_STVREN$ON 000000  
                               ??___awmod 0015                                 ??___ftdiv 002E  
                               ??___ftneg 003D                                 ??___ftmul 001F  
                               ??___fttol 0020                                 ??___lwdiv 0035  
                               ??___lwmod 003C                         ProcessForward@msg 0035  
                   __end_of_UART_Checksum 3E0C                   __end_of_TMR4_Initialize 3DE4  
                               ?_I2C1_ISR 0001                                    clear_0 35AE  
                                  clear_1 35BA                                    clear_2 35C6  
                                  clear_3 35D2                                    clear_4 35DE  
                                  clear_5 35EA                                    clear_6 35F6  
                         ___awmod@divisor 0013                           ___awmod@counter 0015  
                 __end_of_DATAEE_ReadByte 4018                               Send_ACK@msg 0032  
                   ___ftmul@f3_as_product 0023                      __size_of_lcd_write_4 0048  
    __end_of_TMR4_DefaultInterruptHandler 4154     __size_of_TMR4_DefaultInterruptHandler 0002  
            _TMR4_DefaultInterruptHandler 4152                              __pdataCOMRAM 004D  
              ??_lcd_write_instruction_4d 0014                                 ?_I2C_Send 0012  
                            __mediumconst 0000                               _i2c_Paquete 00A0  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                   ?_lcd_write_character_4d 0001  
                             Send_NAK@msg 0032                            Send_Status@msg 00CA  
                                  round@f 00EC                        _I2C1_targetAddress 004D  
                                  round@x 00E9                           ??_EUSART1_Write 0011  
                 __end_of_TMR2_StartTimer 414E  TMR4_SetInterruptHandler@InterruptHandler 0011  
TMR2_SetInterruptHandler@InterruptHandler 0011                                    trunc@i 0038  
                                  trunc@x 0035                           _eusart1RxBuffer 0282  
           __size_of_INTERRUPT_Initialize 000E                           _eusart1TxBuffer 0060  
                       _SYSTEM_Initialize 3B22                                __accesstop 0060  
                 __end_of__initialization 35FC                                ___altoft@c 002B  
                               ?_LCD_Init 0001                                ___ftadd@f1 00DD  
                              ___ftadd@f2 00E0                     __end_of_TMR2_CallBack 3F30  
                         ??_LCD_WriteChar 0017                          ?_ProcessSensores 0035  
                              ___ftge@ff1 0011                                ___ftge@ff2 0014  
                      ?_SYSTEM_Initialize 0001                           _TMR6_StartTimer 413E  
                           ___rparam_used 000001                                ___ftdiv@f1 0028  
                              ___ftdiv@f2 002B                                ___ftdiv@f3 0032  
            EPWM3_LoadDutyValue@dutyValue 00EF                                ___ftneg@f1 00DA  
                           __end_of_Delay 3F92                                ___ftmul@f1 0019  
                              ___ftmul@f2 001C                         ?_EPWM1_Initialize 0001  
                              ___fttol@f1 001C                       ProcessDevice@Result 00F3  
                          __pcstackCOMRAM 0001               __end_of_lcd_write_string_4d 33A0  
                   __end_of_TMR4_CallBack 3F0C                     __end_of_ProcessDevice 22F6  
                     ??_SYSTEM_Initialize 0013                                 ?_TMR2_ISR 0001  
                               ?_TMR4_ISR 0001                        ??_EPWM1_Initialize 0011  
            __size_of_EPWM3_LoadDutyValue 0036                          _DATAEE_WriteByte 3B5C  
                           __end_of_frexp 3518                             __end_of_putch 4126  
                           __end_of_round 331E                                ??_I2C1_ISR 0002  
                           __end_of_trunc 3422                          ?_PWM4_Initialize 0001  
                        ?_TMR2_Initialize 0001                   __end_of_TMR6_Initialize 4000  
                             ?_MemoryInit 0001                         __end_of_i2c_getch 3CA2  
                              ___lwtoft@c 0019               PWM4_LoadDutyValue@dutyValue 00EF  
                       __end_of_ReadClass 4108                    __size_of_Send_Hardware 00AC  
                       __end_of_InitTasks 37BA                         __end_of_i2c_putch 3EC4  
                  ??_EUSART1_Transmit_ISR 0001                   __size_of_ProcessBotones 0074  
                  __size_of_Send_Firmware 00AC            __end_of_lcd_write_character_4d 4070  
                              ??_I2C_Send 0014                                   ??_Delay 0013  
                 __size_of_ProcessForward 00C6                      __end_of_LCD_WriteInt 1F28  
             __end_of_EUSART1_Receive_ISR 3DBC             ?_TMR4_DefaultInterruptHandler 0001  
                       ?_EPWM2_Initialize 0001                         __end_of_SaveClass 4098  
                                 ??_frexp 0016                   __end_of_TMR4_StartTimer 414A  
               __end_of_SYSTEM_Initialize 3B5C                        ??_EPWM2_Initialize 0011  
                                 ??_putch 0012                                   ??_round 003D  
                           _eusart1RxHead 004A                                 ?_MainTask 0001  
                                 ??_trunc 0038                             _eusart1TxHead 004C  
                           _eusart1RxTail 0049                                __pbssBANK0 0060  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                              __pbssBANK3 0300                                __pbssBANK4 0400  
                              __pbssBANK5 0500                             _eusart1TxTail 004B  
                        ?_PWM5_Initialize 0001                           __CFG_PLLCFG$OFF 000000  
                              ??_LCD_Init 0015                     _TMR4_InterruptHandler 00FA  
                               ?_Send_ACK 0032                                 ?_Send_NAK 0032  
                __end_of_VERSION_HARDWARE 1007                          Send_Hardware@msg 0032  
                                 ?_ReadID 0001                                   ?_SaveID 0001  
                             ?_Timer2Tick 0001                  __end_of_VERSION_FIRMWARE 100B  
                             ?_Timer4Tick 0001                        __CFG_CCP2MX$PORTC1 000000  
                       ?_EPWM3_Initialize 0001                                   ?___ftge 0011  
                               ?_UpdateID 0001                                   ?___wmul 002B  
                              ??_TMR2_ISR 0001                                ??_TMR4_ISR 0001  
                      __CFG_CCP3MX$PORTB5 000000                        ??_EPWM3_Initialize 0011  
                         _I2C1_Initialize 3E0C                                   _CCP1CON 000FBD  
                                 _CCP2CON 000F66                                   _CCP3CON 000F5D  
                                 _CCP4CON 000F57                                   _CCP5CON 000F54  
                                 _ECCP1AS 000FB6                                   _ECCP2AS 000F64  
                               ?___altoft 002B                                   _ECCP3AS 000F5B  
                        ?_TMR4_Initialize 0001                                 ?___ftpack 0011  
                          _I2C_FillPacket 22F6                         ??_TC_Devices_Init 0016  
                 __size_of_ADC_Initialize 0016                                 ?___lwtoft 0019  
                        ?_DATAEE_ReadByte 0011                        _PWM5_LoadDutyValue 3BCC  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                    __end_of_MemoryIsInit 3FE8                                   _OSCTUNE 000F9B  
                                 _PWM1CON 000FB7                                   _PWM2CON 000F65  
                                 _PWM3CON 000F5C                           __CFG_WDTPS$4096 000000  
                                 _SPBRGH1 000FB0                                   _SSP1ADD 000FC8  
                                 _SSP1BUF 000FC9                                   _SSP1MSK 000FCA  
                        ?_TMR2_StartTimer 0001                   __end_of_TMR6_StartTimer 4144  
                              ??_MainTask 0011              __size_of_I2C_ProcessMessages 0046  
                     ?_PWM5_LoadDutyValue 00EF               __end_of_EPWM1_LoadDutyValue 3D64  
                    DATAEE_WriteByte@bAdd 0011                             _Send_Hardware 2FFE  
                               _I2C_Input 0200                       __size_of_MemoryInit 0012  
                                 Send@msg 0030                                ??_Send_ACK 0034  
                              ??_Send_NAK 0035                             _Send_Firmware 30AA  
                         __CFG_PWRTEN$OFF 000000                                   __Hparam 0000  
                         __size_of_ReadID 000E                                   __Lparam 0000  
              ??_TMR2_SetInterruptHandler 0013                           __size_of_SaveID 0014  
                           LCD_WriteInt@i 00EA                                ??_UpdateID 003F  
                         __size_of___ftge 0090                                   ___ftadd 1A62  
                                 ___awmod 367A                                   ___ftdiv 2B38  
                                 ___ftneg 3D04                           __size_of___wmul 0026  
                                 ___ftmul 2958                                   ___fttol 2864  
                                 ___lwdiv 3818                                   ___lwmod 3A22  
                  __end_of_I2C_FillPacket 249A                      ??_PWM5_LoadDutyValue 003D  
                            __psmallconst 1000                                ??___altoft 002F  
                                 __pcinit 3590                                ??___ftpack 0016  
                        ?_TMR6_Initialize 0001                                   __ramtop 1000  
                                 __ptext0 4018                                   __ptext1 3B22  
                                 __ptext2 3FE8                                   __ptext3 413E  
                                 __ptext4 3DBC                                   __ptext5 4144  
                                 __ptext6 3F30                                   __ptext7 414A  
                                 __ptext8 3F92                                   __ptext9 3FB0  
           __size_of_ProcessPaPReferencia 020C                   __size_of_I2C1_DataReady 0014  
                              ??___lwtoft 001C          __end_of_lcd_write_instruction_4d 405A  
                   _OSCILLATOR_Initialize 40D0                                 _T2CONbits 000FBA  
            Timer4Tick@led_toggle_counter 00C2                          ___awmod@dividend 0011  
                               _T4CONbits 000F51                        _EUSART1_Initialize 3B96  
                ??_PIN_MANAGER_Initialize 0011         __size_of_TMR4_SetInterruptHandler 000A  
                   ProcessSensores@result 0037                 ?_TMR4_SetInterruptHandler 0011  
                        Send_Firmware@msg 0032                                 _T6CONbits 000F4A  
                     __size_of_Timer2Tick 0012                       __size_of_Timer4Tick 002C  
              __size_of_SYSTEM_Initialize 003A                          ?_TMR4_StartTimer 0001  
                               _LCD_Write 3904                      end_of_initialization 35FC  
                   UART_Checksum@msg_size 0013            ??_TMR4_DefaultInterruptHandler 0001  
                     ?_EUSART1_Initialize 0001                            ?_Send_Hardware 0032  
                       LCD_WriteInt@linea 00DD                         LCD_WriteInt@miles 00E6  
                          ?_Send_Firmware 0032                         ?_ProcessCompuerta 0035  
                 __end_of_I2C1_Initialize 3E32                        ??_ProcessCompuerta 0037  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE               __size_of_PWM4_LoadDutyValue 0036  
                         ?_I2C_FillPacket 0011                      ??_EUSART1_Initialize 0011  
                              _uart_index 00C0                                 _UART_Send 249A  
                               _UARTQueue 0400               __end_of_I2C1_StatusCallback 3200  
                   __size_of_LCD_WriteInt 025E                                 _PORTBbits 000F81  
                         I2C_FillPacket@i 0018                           I2C_FillPacket@j 0016  
                      _I2C_GetNewMessages 263C                            _ProcessBotones 3606  
                       __size_of_I2C1_ISR 0042                            _ProcessForward 2DD6  
                     _UART_QueueInPointer 0045                          __CFG_FOSC$INTIO7 000000  
                       __size_of_I2C_Send 0100                       ?_I2C_GetNewMessages 0001  
                     EUSART1_Write@txData 0011                                ?_LCD_Write 001B  
                          ProcessDevice@k 00F4                       _EPWM3_LoadDutyValue 3C38  
                        ?_TMR6_StartTimer 0001                  __end_of_DATAEE_WriteByte 3B96  
                      _DividerTaskCounter 00C6                         _Setup_Display_LCD 3422  
                             ___ftdiv@exp 0035                              Delay@Timeout 0011  
                      ?_Setup_Display_LCD 0001                             ??_lcd_init_4d 0015  
                       __size_of_LCD_Init 0008                              _LCD_WriteInt 1CCA  
                             ___ftmul@exp 0022                            __end_of_ReadID 40FA  
                    ??_I2C_GetNewMessages 001A                               _I2C_Address 00FE  
                          __end_of_SaveID 4084                       ??_Setup_Display_LCD 0020  
            __end_of_INTERRUPT_Initialize 40EC                      ?_EPWM3_LoadDutyValue 00EF  
    __end_of_TMR2_DefaultInterruptHandler 4156     __size_of_TMR2_DefaultInterruptHandler 0002  
            _TMR2_DefaultInterruptHandler 4154                            __end_of___ftge 3290  
                           ??_lcd_write_4 0013                            __end_of___wmul 3E58  
                  __end_of_ProcessBotones 367A                             __pidataCOMRAM 414E  
                              ?_UART_Send 0018                              ??_MemoryInit 0015  
                       __size_of_TMR2_ISR 0008                         __size_of_TMR4_ISR 0008  
                          _ADC_Initialize 402E                    __end_of_ProcessForward 2E9C  
                  ?_OSCILLATOR_Initialize 0001                     __size_of_MemoryIsInit 001A  
            lcd_write_string_4d@theString 0015                       start_initialization 3590  
                               _i2c_getch 3C6E                 __size_of_EPWM1_Initialize 0024  
                               _i2c_index 003F                                 _ReadClass 40FA  
         __size_of_PIN_MANAGER_Initialize 004E                                 _InitTasks 3758  
                               _i2c_putch 3EA0                 __end_of_Setup_Display_LCD 34A0  
                    LCD_WriteInt@decmiles 00DF                           ??_Send_Hardware 0034  
                             putch@txData 0012              EPWM1_LoadDutyValue@dutyValue 00EF  
                   __end_of_EUSART1_Write 3B22                      LCD_WriteInt@centenas 00E7  
                         ??_Send_Firmware 0034                                frexp@value 0011  
                  __size_of_UART_Checksum 0028                                 _SaveClass 4084  
                     ProcessCompuerta@msg 0035                         __size_of_MainTask 0002  
                ?_Process4TO20Transmitter 00F1                       DATAEE_ReadByte@bAdd 0011  
       __size_of_lcd_write_instruction_4d 0016                        __end_of_MemoryInit 40BE  
               ?_lcd_write_instruction_4d 0001                     __end_of_LCD_WriteChar 3A22  
                                ??_ReadID 0013                          ?_I2C1_Initialize 0001  
                         _TC_Devices_Init 3AA6                                  ??_SaveID 0015  
                            ??_Timer2Tick 0001                 __size_of_EPWM2_Initialize 0024  
                            ??_Timer4Tick 0001                         __size_of_Send_ACK 005E  
                         LCD_Write@dlinea 001F                         __size_of_Send_NAK 006E  
                            _MemoryIsInit 3FCE                                  ??___ftge 0017  
                        _DelayTimerTicked 00C9                        i2c_putch@character 0011  
                   ??_EPWM3_LoadDutyValue 003D                          I2C1_ISR@i2c_data 0002  
                         LCD_Write@offset 001E                                  ??___wmul 002F  
                __size_of_ProcessSensores 00D4                    __end_of_ADC_Initialize 4044  
                     _I2C_ProcessMessages 3996                           LCD_Write@string 001B  
                     __end_of_lcd_init_4d 2F50                           ?_ProcessBotones 0035  
                       __size_of_UpdateID 0020             ?_TMR2_DefaultInterruptHandler 0001  
                          _I2C1_DataReady 4098                      LCD_WriteInt@unidades 00E9  
                         ?_ProcessForward 0035              __size_of_lcd_write_string_4d 0082  
                          _eusart1RxCount 0048                         __size_of___altoft 0078  
                     LCD_WriteChar@dlinea 0018                         __size_of___ftpack 00AE  
                  __size_of_TMR2_CallBack 0024               PWM5_LoadDutyValue@dutyValue 00EF  
                     LCD_WriteChar@offset 0016                               __pbssCOMRAM 003F  
                     __end_of_lcd_write_4 3996                                ?_i2c_getch 0001  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0032  
               __size_of_EPWM3_Initialize 0030                             __pcstackBANK0 00DA  
                           __pcstackBANK1 01E1                                ?_ReadClass 0001  
        I2C1_StatusCallback@i2c_bus_state 0001                  __size_of_PWM4_Initialize 001E  
                __size_of_TMR2_Initialize 0022                                ?_InitTasks 0001  
                              ?_i2c_putch 0001                        __end_of_Timer2Tick 40D0  
                      __end_of_Timer4Tick 3D90                               ??_LCD_Write 001F  
                  __size_of_TMR4_CallBack 0024                    __size_of_ProcessDevice 01C2  
                    ?_I2C_ProcessMessages 0001              __size_of_EUSART1_Receive_ISR 002C  
                              ?_SaveClass 0001             Process4TO20Transmitter@result 01E1  
                               __pnvBANK0 00FA                          ___lwdiv@dividend 0031  
                  _PIN_MANAGER_Initialize 386A                  __size_of_PWM5_Initialize 001E  
                               __pintcode 0008          __end_of_TMR4_SetInterruptHandler 4112  
                               __ptext100 3D90                                 __ptext101 0000  
                                ?___ftadd 00DD                                  ?___awmod 0011  
                                ?___ftdiv 0028                                  ?___ftneg 00DA  
                                ?___ftmul 0019                                  ?___fttol 001C  
                                ?___lwdiv 0031                               I2C_Send@msg 0012  
                                ?___lwmod 0038                    __end_of_I2C1_DataReady 40AC  
                         ?_ADC_Initialize 0001                        ProcessSensores@msg 0035  
                                _I2C1_ISR 3A64                               ??_UART_Send 001A  
         Process4TO20Transmitter@PWM_Duty 01E7                             _UART_Checksum 3DE4  
                  ProcessCompuerta@result 0037              ??_INTERRUPT_InterruptManager 0003  
                        __CFG_PRICLKEN$ON 000000                      ProcessForward@result 0037  
                             __smallconst 1000                                  _BAUDCON1 000FB8  
                                _I2C_Send 2764                                  _I2CQueue 0500  
                          __size_of_Delay 0020                  __size_of_TMR4_Initialize 0028  
                        ___lwdiv@quotient 0036                __size_of_Setup_Display_LCD 007E  
                            _messageForMe 0047                     ??_I2C_ProcessMessages 003F  
                          __size_of_frexp 0078                  __size_of_DATAEE_ReadByte 0018  
         __end_of_Process4TO20Transmitter 1A62                            __size_of_putch 000A  
                          __size_of_round 008E                                UART_Send@i 002E  
                          __size_of_trunc 0082                      _INTERRUPT_Initialize 40DE  
                 __end_of_TC_Devices_Init 3AE4              __end_of_ProcessPaPReferencia 2134  
                                _LCD_Init 4126                            ___wmul@product 002F  
                           _TMR2_CallBack 3F0C                                  _IPR1bits 000F9F  
                                _PIE1bits 000F9D                                  _IPR5bits 000F7F  
                                _PIE5bits 000F7D                  __size_of_TMR2_StartTimer 0004  
                        ??_I2C_FillPacket 0013                               _lcd_init_4d 2E9C  
     __size_of_INTERRUPT_InterruptManager 00B2                                  i2u317_40 3D82  
                                i2u350_40 3168                                  i2u351_40 316A  
                                _PIR1bits 000F9E                                  i2u345_48 3F1C  
                                _PIR2bits 000FA1                                  i2u349_48 3EF8  
                                _PIR5bits 000F7E              __size_of_EPWM1_LoadDutyValue 0030  
                                _SSP1CON1 000FC6                                  _SSP1CON2 000FC5  
                                _SSP1CON3 000FCB                                  _TMR2_ISR 4136  
                                _TMR4_ISR 412E                           Send_NAK@errCode 0034  
                           _TMR4_CallBack 3EE8                                  _PSTR1CON 000FB9  
                                _PSTR2CON 000F63                                  _PSTR3CON 000F5A  
                           _ProcessDevice 2134                                  _SSP1STAT 000FC7  
                         ?_I2C1_DataReady 0001                  ??_lcd_write_character_4d 0014  
                          ?_UART_Checksum 0011               __size_of_PWM5_LoadDutyValue 0036  
                     _I2C1_slaveWriteData 004E                               _lcd_write_4 394E  
                 ProcessPaPReferencia@msg 0035                                _ADCON0bits 000FC2  
                       ___wmul@multiplier 002B                 __size_of_ProcessCompuerta 00EC  
                       ??_ProcessSensores 0037            ??_TMR2_DefaultInterruptHandler 0001  
                             ??_i2c_getch 0011                          _EPWM1_Initialize 3E7C  
       __size_of_TMR2_SetInterruptHandler 000A                 ?_TMR2_SetInterruptHandler 0011  
                             ??_ReadClass 0013                               ??_InitTasks 003F  
                   DATAEE_WriteByte@bData 0013                               ??_i2c_putch 0011  
                __size_of_TMR6_Initialize 0018    lcd_write_instruction_4d@theInstruction 0014  
                         UART_Send@packet 001E                                  SaveID@id 0015  
                             _INTCON2bits 000FF1             lcd_write_character_4d@theData 0014  
                   ?_INTERRUPT_Initialize 0001                                  _MainTask 4150  
                       ?_DATAEE_WriteByte 0011                                _I2C_Output 0300  
                             ??_SaveClass 0015                         ??_TMR2_Initialize 0013  
                       ??_PWM4_Initialize 0011                       LCD_WriteInt@decenas 00E8  
                          ?_TMR2_CallBack 0001                        ??_DATAEE_WriteByte 0014  
                     LCD_WriteInt@digitos 00DC                                 frexp@eptr 0014  
                              _EECON1bits 000FA6                                  _Send_ACK 37BA  
                                _Send_NAK 36EA                  __size_of_TMR4_StartTimer 0006  
                                __Hrparam 0000                          _EPWM2_Initialize 3E58  
              __end_of_PWM4_LoadDutyValue 3C38                                  __Lrparam 0000  
                          LCD_Write@linea 001D                        __CFG_BOREN$SBORDIS 000000  
                          ?_TMR4_CallBack 0001                            ?_ProcessDevice 00EB  
                       __CFG_P2BMX$PORTC0 000000                                  _UpdateID 3F52  
                 ??_OSCILLATOR_Initialize 0011                          __size_of___ftadd 0268  
                        __size_of___awmod 0070                          __size_of___ftdiv 00E6  
                        __size_of___ftneg 0030                                  ___altoft 3518  
                        __size_of___ftmul 00F4                        LCD_WriteChar@linea 0015  
                        __size_of___fttol 00F4               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwdiv 0052                          __size_of___lwmod 0042  
                                ___ftpack 2F50                         ??_PWM5_Initialize 0011  
                _TMR4_SetInterruptHandler 4108                                  ___lwtoft 3EC4  
                        _EPWM3_Initialize 3CD4                           ___lwdiv@divisor 0033  
            __size_of_I2C1_StatusCallback 00AA                           ___lwdiv@counter 0035  
                                __ptext10 386A                                  __ptext11 40D0  
                                __ptext20 3758                                  __ptext12 40DE  
                                __ptext21 4108                                  __ptext13 3E0C  
                                __ptext30 4126                                  __ptext22 4112  
                                __ptext14 3B96                                  __ptext31 2E9C  
                                __ptext23 3AA6                                  __ptext15 3CD4  
                                __ptext40 3A22                                  __ptext32 3996  
                                __ptext24 40EC                                  __ptext16 3E58  
                                __ptext41 3904                                  __ptext33 2C1E  
                                __ptext25 40FA                                  __ptext17 3E7C  
                                __ptext50 3606                                  __ptext42 331E  
                                __ptext34 2D02                                  __ptext26 3FCE  
                                __ptext18 402E                                  __ptext51 36EA  
                                __ptext43 2FFE                                  __ptext35 1F28  
                                __ptext27 4000                                  __ptext19 4150  
                                __ptext60 3290                                  __ptext52 38B8  
                                __ptext44 30AA                                  __ptext36 2DD6  
                                __ptext28 40AC                                  __ptext61 33A0  
                                __ptext53 249A                                  __ptext45 37BA  
                                __ptext37 2134                                  __ptext29 3422  
                                __ptext70 2958                                  __ptext62 34A0  
                                __ptext54 411C                                  __ptext46 4070  
                                __ptext38 3F52                                  __ptext71 3200  
                                __ptext63 2864                                  __ptext55 3AE4  
                                __ptext47 4084                                  __ptext39 1CCA  
                                __ptext80 367A                                  __ptext72 2B38  
                                __ptext64 3518                                  __ptext56 3DE4  
                                __ptext48 3B5C                                  __ptext81 39DC  
                                __ptext73 2F50                                  __ptext65 3D04  
                                __ptext57 2764                                  __ptext49 2A4C  
                                __ptext90 3EE8                                  __ptext82 4044  
                                __ptext74 3BCC                                  __ptext66 1A62  
                                __ptext58 3EA0                                  __ptext91 4152  
                                __ptext83 405A                                  __ptext75 3C02  
                                __ptext67 3E32                                  __ptext59 1060  
                                __ptext92 3D64                                  __ptext84 394E  
                                __ptext76 3C38                                  __ptext68 3EC4  
                                __ptext93 4136                                  __ptext85 3F72  
                                __ptext77 3D34                                  __ptext69 3818  
                                __ptext94 3F0C                                  __ptext86 22F6  
                                __ptext78 263C                                  __ptext95 4154  
                                __ptext87 4098                                  __ptext79 3C6E  
                                __ptext96 40BE                                  __ptext97 3A64  
                                __ptext89 412E                                  __ptext98 3156  
                                __ptext99 3CA2                              _SSP1CON1bits 000FC6  
                            _SSP1CON2bits 000FC5               DATAEE_WriteByte@GIEBitValue 0014  
                            UART_Send@msg 0018                          ?_TC_Devices_Init 0001  
                           __size_of_Send 004C                                trunc@expon 003B  
                       ??_TMR4_Initialize 0013                             __size_of_main 0016  
                     _lcd_write_string_4d 331E                         ??_DATAEE_ReadByte 0013  
                __size_of_TMR6_StartTimer 0006                          ??_ProcessBotones 0037  
                        ??_ProcessForward 0037               __size_of_I2C_GetNewMessages 0128  
                         ??_UART_Checksum 0014                                  int$flags 004F  
                       ??_TMR2_StartTimer 0011        __end_of_INTERRUPT_InterruptManager 00BA  
                 I2C_ProcessPacket@result 00F9                _INTERRUPT_InterruptManager 0008  
                            _SSP1STATbits 000FC7           __size_of_lcd_write_character_4d 0016  
        __size_of_Process4TO20Transmitter 0A02                       _EUSART1_Receive_ISR 3D90  
                    ?_lcd_write_string_4d 0015                      _ProcessPaPReferencia 1F28  
                            _uart_Paquete 00AF                                _INTCONbits 000FF2  
                      LCD_WriteInt@offset 00DE                         _I2C_ProcessPacket 2C1E  
                  ??_INTERRUPT_Initialize 0011                        LCD_WriteInt@number 00DA  
                      LCD_WriteInt@string 00E0                        ?_I2C_ProcessPacket 00F7  
                                intlevel2 0000                           ??_TMR2_CallBack 0001  
                   __end_of_Send_Hardware 30AA                      ?_EUSART1_Receive_ISR 0001  
                        ___lwmod@dividend 0038                   ?_PIN_MANAGER_Initialize 0001  
                       ??_TMR6_Initialize 0011                     __end_of_Send_Firmware 3156  
             __end_of_EPWM3_LoadDutyValue 3C6E                                _RCSTA1bits 000FAB  
                     ??_I2C_ProcessPacket 003F              __end_of_EUSART1_Transmit_ISR 3CD4  
                      _I2C_QueueInPointer 0042                          ??_ADC_Initialize 0011  
                         ??_TMR4_CallBack 0001                           ??_ProcessDevice 00ED  
                          SaveClass@class 0015                Process4TO20Transmitter@msg 00F1  
                       ??_TMR4_StartTimer 0011                     I2C_GetNewMessages@msg 001F  
      Process4TO20Transmitter@Online_data 01E9                  __size_of_I2C1_Initialize 0026  
                  __size_of_EUSART1_Write 003E                     ??_lcd_write_string_4d 0017  
                   ?_ProcessPaPReferencia 0035                         I2C_FillPacket@msg 0011  
                        _ProcessCompuerta 2A4C                 __end_of_I2C_ProcessPacket 2D02  
                         ___lwmod@divisor 003A                           ___lwmod@counter 003C  
                       __CFG_T3CMX$PORTC0 000000                    __size_of_LCD_WriteChar 0046  
                     _EPWM1_LoadDutyValue 3D34                    LCD_WriteChar@character 0017  
                  _lcd_write_character_4d 405A                     ??_EUSART1_Receive_ISR 0001  
          __end_of_PIN_MANAGER_Initialize 38B8                  _lcd_write_instruction_4d 4044  
                        _MotorTimerTicked 0046                       _I2C_QueueOutPointer 0041  
                    I2C_ProcessPacket@msg 00F7              _Process4TO20Transmitter$6380 01E2  
                    lcd_write_string_4d@i 0019                     _TMR2_InterruptHandler 00FC  
                            ?_lcd_init_4d 0001                          ??_I2C1_DataReady 0011  
                __end_of_EPWM1_Initialize 3EA0                      ?_EPWM1_LoadDutyValue 00EF  
                      i2c_getch@character 0011  
